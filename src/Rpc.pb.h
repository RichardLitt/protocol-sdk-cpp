// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Rpc.proto

#ifndef PROTOBUF_INCLUDED_Rpc_2eproto
#define PROTOBUF_INCLUDED_Rpc_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Common.pb.h"
#include "Deltas.pb.h"
#include "Transaction.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Rpc_2eproto 

namespace protobuf_Rpc_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[68];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Rpc_2eproto
namespace Catalyst {
namespace Protocol {
namespace Rpc {
namespace Node {
class AddFileToDfsRequest;
class AddFileToDfsRequestDefaultTypeInternal;
extern AddFileToDfsRequestDefaultTypeInternal _AddFileToDfsRequest_default_instance_;
class AddFileToDfsResponse;
class AddFileToDfsResponseDefaultTypeInternal;
extern AddFileToDfsResponseDefaultTypeInternal _AddFileToDfsResponse_default_instance_;
class AddNodeRequest;
class AddNodeRequestDefaultTypeInternal;
extern AddNodeRequestDefaultTypeInternal _AddNodeRequest_default_instance_;
class AddNodeResponse;
class AddNodeResponseDefaultTypeInternal;
extern AddNodeResponseDefaultTypeInternal _AddNodeResponse_default_instance_;
class BroadcastRawTransactionRequest;
class BroadcastRawTransactionRequestDefaultTypeInternal;
extern BroadcastRawTransactionRequestDefaultTypeInternal _BroadcastRawTransactionRequest_default_instance_;
class BroadcastRawTransactionResponse;
class BroadcastRawTransactionResponseDefaultTypeInternal;
extern BroadcastRawTransactionResponseDefaultTypeInternal _BroadcastRawTransactionResponse_default_instance_;
class CreateAddressRequest;
class CreateAddressRequestDefaultTypeInternal;
extern CreateAddressRequestDefaultTypeInternal _CreateAddressRequest_default_instance_;
class CreateAddressResponse;
class CreateAddressResponseDefaultTypeInternal;
extern CreateAddressResponseDefaultTypeInternal _CreateAddressResponse_default_instance_;
class CreateRawTransactionRequest;
class CreateRawTransactionRequestDefaultTypeInternal;
extern CreateRawTransactionRequestDefaultTypeInternal _CreateRawTransactionRequest_default_instance_;
class CreateRawTransactionResponse;
class CreateRawTransactionResponseDefaultTypeInternal;
extern CreateRawTransactionResponseDefaultTypeInternal _CreateRawTransactionResponse_default_instance_;
class CreateWalletRequest;
class CreateWalletRequestDefaultTypeInternal;
extern CreateWalletRequestDefaultTypeInternal _CreateWalletRequest_default_instance_;
class CreateWalletResponse;
class CreateWalletResponseDefaultTypeInternal;
extern CreateWalletResponseDefaultTypeInternal _CreateWalletResponse_default_instance_;
class DecodeRawTransactionRequest;
class DecodeRawTransactionRequestDefaultTypeInternal;
extern DecodeRawTransactionRequestDefaultTypeInternal _DecodeRawTransactionRequest_default_instance_;
class DecodeRawTransactionResponse;
class DecodeRawTransactionResponseDefaultTypeInternal;
extern DecodeRawTransactionResponseDefaultTypeInternal _DecodeRawTransactionResponse_default_instance_;
class GetAddressRequest;
class GetAddressRequestDefaultTypeInternal;
extern GetAddressRequestDefaultTypeInternal _GetAddressRequest_default_instance_;
class GetAddressResponse;
class GetAddressResponseDefaultTypeInternal;
extern GetAddressResponseDefaultTypeInternal _GetAddressResponse_default_instance_;
class GetBalanceRequest;
class GetBalanceRequestDefaultTypeInternal;
extern GetBalanceRequestDefaultTypeInternal _GetBalanceRequest_default_instance_;
class GetBalanceResponse;
class GetBalanceResponseDefaultTypeInternal;
extern GetBalanceResponseDefaultTypeInternal _GetBalanceResponse_default_instance_;
class GetConnectionCountRequest;
class GetConnectionCountRequestDefaultTypeInternal;
extern GetConnectionCountRequestDefaultTypeInternal _GetConnectionCountRequest_default_instance_;
class GetConnectionCountResponse;
class GetConnectionCountResponseDefaultTypeInternal;
extern GetConnectionCountResponseDefaultTypeInternal _GetConnectionCountResponse_default_instance_;
class GetDeltaRequest;
class GetDeltaRequestDefaultTypeInternal;
extern GetDeltaRequestDefaultTypeInternal _GetDeltaRequest_default_instance_;
class GetDeltaResponse;
class GetDeltaResponseDefaultTypeInternal;
extern GetDeltaResponseDefaultTypeInternal _GetDeltaResponse_default_instance_;
class GetFileFromDfsRequest;
class GetFileFromDfsRequestDefaultTypeInternal;
extern GetFileFromDfsRequestDefaultTypeInternal _GetFileFromDfsRequest_default_instance_;
class GetFileFromDfsResponse;
class GetFileFromDfsResponseDefaultTypeInternal;
extern GetFileFromDfsResponseDefaultTypeInternal _GetFileFromDfsResponse_default_instance_;
class GetInfoRequest;
class GetInfoRequestDefaultTypeInternal;
extern GetInfoRequestDefaultTypeInternal _GetInfoRequest_default_instance_;
class GetInfoResponse;
class GetInfoResponseDefaultTypeInternal;
extern GetInfoResponseDefaultTypeInternal _GetInfoResponse_default_instance_;
class GetMempoolRequest;
class GetMempoolRequestDefaultTypeInternal;
extern GetMempoolRequestDefaultTypeInternal _GetMempoolRequest_default_instance_;
class GetMempoolResponse;
class GetMempoolResponseDefaultTypeInternal;
extern GetMempoolResponseDefaultTypeInternal _GetMempoolResponse_default_instance_;
class GetPeerCountRequest;
class GetPeerCountRequestDefaultTypeInternal;
extern GetPeerCountRequestDefaultTypeInternal _GetPeerCountRequest_default_instance_;
class GetPeerCountResponse;
class GetPeerCountResponseDefaultTypeInternal;
extern GetPeerCountResponseDefaultTypeInternal _GetPeerCountResponse_default_instance_;
class GetPeerInfoRequest;
class GetPeerInfoRequestDefaultTypeInternal;
extern GetPeerInfoRequestDefaultTypeInternal _GetPeerInfoRequest_default_instance_;
class GetPeerInfoResponse;
class GetPeerInfoResponseDefaultTypeInternal;
extern GetPeerInfoResponseDefaultTypeInternal _GetPeerInfoResponse_default_instance_;
class GetPeerListRequest;
class GetPeerListRequestDefaultTypeInternal;
extern GetPeerListRequestDefaultTypeInternal _GetPeerListRequest_default_instance_;
class GetPeerListResponse;
class GetPeerListResponseDefaultTypeInternal;
extern GetPeerListResponseDefaultTypeInternal _GetPeerListResponse_default_instance_;
class GetPeerReputationRequest;
class GetPeerReputationRequestDefaultTypeInternal;
extern GetPeerReputationRequestDefaultTypeInternal _GetPeerReputationRequest_default_instance_;
class GetPeerReputationResponse;
class GetPeerReputationResponseDefaultTypeInternal;
extern GetPeerReputationResponseDefaultTypeInternal _GetPeerReputationResponse_default_instance_;
class ListAddressRequest;
class ListAddressRequestDefaultTypeInternal;
extern ListAddressRequestDefaultTypeInternal _ListAddressRequest_default_instance_;
class ListAddressResponse;
class ListAddressResponseDefaultTypeInternal;
extern ListAddressResponseDefaultTypeInternal _ListAddressResponse_default_instance_;
class ListWalletRequest;
class ListWalletRequestDefaultTypeInternal;
extern ListWalletRequestDefaultTypeInternal _ListWalletRequest_default_instance_;
class ListWalletResponse;
class ListWalletResponseDefaultTypeInternal;
extern ListWalletResponseDefaultTypeInternal _ListWalletResponse_default_instance_;
class RemovePeerRequest;
class RemovePeerRequestDefaultTypeInternal;
extern RemovePeerRequestDefaultTypeInternal _RemovePeerRequest_default_instance_;
class RemovePeerResponse;
class RemovePeerResponseDefaultTypeInternal;
extern RemovePeerResponseDefaultTypeInternal _RemovePeerResponse_default_instance_;
class SendFromManyRequest;
class SendFromManyRequestDefaultTypeInternal;
extern SendFromManyRequestDefaultTypeInternal _SendFromManyRequest_default_instance_;
class SendFromManyResponse;
class SendFromManyResponseDefaultTypeInternal;
extern SendFromManyResponseDefaultTypeInternal _SendFromManyResponse_default_instance_;
class SendManyRequest;
class SendManyRequestDefaultTypeInternal;
extern SendManyRequestDefaultTypeInternal _SendManyRequest_default_instance_;
class SendManyResponse;
class SendManyResponseDefaultTypeInternal;
extern SendManyResponseDefaultTypeInternal _SendManyResponse_default_instance_;
class SendToFromRequest;
class SendToFromRequestDefaultTypeInternal;
extern SendToFromRequestDefaultTypeInternal _SendToFromRequest_default_instance_;
class SendToFromResponse;
class SendToFromResponseDefaultTypeInternal;
extern SendToFromResponseDefaultTypeInternal _SendToFromResponse_default_instance_;
class SendToRequest;
class SendToRequestDefaultTypeInternal;
extern SendToRequestDefaultTypeInternal _SendToRequest_default_instance_;
class SendToResponse;
class SendToResponseDefaultTypeInternal;
extern SendToResponseDefaultTypeInternal _SendToResponse_default_instance_;
class ServiceStatusRequest;
class ServiceStatusRequestDefaultTypeInternal;
extern ServiceStatusRequestDefaultTypeInternal _ServiceStatusRequest_default_instance_;
class ServiceStatusResponse;
class ServiceStatusResponseDefaultTypeInternal;
extern ServiceStatusResponseDefaultTypeInternal _ServiceStatusResponse_default_instance_;
class SetPeerBlackListRequest;
class SetPeerBlackListRequestDefaultTypeInternal;
extern SetPeerBlackListRequestDefaultTypeInternal _SetPeerBlackListRequest_default_instance_;
class SetPeerBlackListResponse;
class SetPeerBlackListResponseDefaultTypeInternal;
extern SetPeerBlackListResponseDefaultTypeInternal _SetPeerBlackListResponse_default_instance_;
class SetPeerDataFolderRequest;
class SetPeerDataFolderRequestDefaultTypeInternal;
extern SetPeerDataFolderRequestDefaultTypeInternal _SetPeerDataFolderRequest_default_instance_;
class SetPeerDataFolderResponse;
class SetPeerDataFolderResponseDefaultTypeInternal;
extern SetPeerDataFolderResponseDefaultTypeInternal _SetPeerDataFolderResponse_default_instance_;
class SignMessageRequest;
class SignMessageRequestDefaultTypeInternal;
extern SignMessageRequestDefaultTypeInternal _SignMessageRequest_default_instance_;
class SignMessageResponse;
class SignMessageResponseDefaultTypeInternal;
extern SignMessageResponseDefaultTypeInternal _SignMessageResponse_default_instance_;
class SignRawTransactionRequest;
class SignRawTransactionRequestDefaultTypeInternal;
extern SignRawTransactionRequestDefaultTypeInternal _SignRawTransactionRequest_default_instance_;
class SignRawTransactionResponse;
class SignRawTransactionResponseDefaultTypeInternal;
extern SignRawTransactionResponseDefaultTypeInternal _SignRawTransactionResponse_default_instance_;
class TransferFileBytesRequest;
class TransferFileBytesRequestDefaultTypeInternal;
extern TransferFileBytesRequestDefaultTypeInternal _TransferFileBytesRequest_default_instance_;
class TransferFileBytesResponse;
class TransferFileBytesResponseDefaultTypeInternal;
extern TransferFileBytesResponseDefaultTypeInternal _TransferFileBytesResponse_default_instance_;
class ValidateAddressRequest;
class ValidateAddressRequestDefaultTypeInternal;
extern ValidateAddressRequestDefaultTypeInternal _ValidateAddressRequest_default_instance_;
class ValidateAddressResponse;
class ValidateAddressResponseDefaultTypeInternal;
extern ValidateAddressResponseDefaultTypeInternal _ValidateAddressResponse_default_instance_;
class VerifyMessageRequest;
class VerifyMessageRequestDefaultTypeInternal;
extern VerifyMessageRequestDefaultTypeInternal _VerifyMessageRequest_default_instance_;
class VerifyMessageResponse;
class VerifyMessageResponseDefaultTypeInternal;
extern VerifyMessageResponseDefaultTypeInternal _VerifyMessageResponse_default_instance_;
class VersionRequest;
class VersionRequestDefaultTypeInternal;
extern VersionRequestDefaultTypeInternal _VersionRequest_default_instance_;
class VersionResponse;
class VersionResponseDefaultTypeInternal;
extern VersionResponseDefaultTypeInternal _VersionResponse_default_instance_;
}  // namespace Node
}  // namespace Rpc
}  // namespace Protocol
}  // namespace Catalyst
namespace google {
namespace protobuf {
template<> ::Catalyst::Protocol::Rpc::Node::AddFileToDfsRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::AddFileToDfsRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::AddFileToDfsResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::AddFileToDfsResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::AddNodeRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::AddNodeRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::AddNodeResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::AddNodeResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::BroadcastRawTransactionRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::BroadcastRawTransactionRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::BroadcastRawTransactionResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::BroadcastRawTransactionResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::CreateAddressRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::CreateAddressRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::CreateAddressResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::CreateAddressResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::CreateRawTransactionRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::CreateRawTransactionRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::CreateRawTransactionResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::CreateRawTransactionResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::CreateWalletRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::CreateWalletRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::CreateWalletResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::CreateWalletResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::DecodeRawTransactionRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::DecodeRawTransactionRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::DecodeRawTransactionResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::DecodeRawTransactionResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::GetAddressRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::GetAddressRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::GetAddressResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::GetAddressResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::GetBalanceRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::GetBalanceRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::GetBalanceResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::GetBalanceResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::GetConnectionCountRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::GetConnectionCountRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::GetConnectionCountResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::GetConnectionCountResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::GetDeltaRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::GetDeltaRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::GetDeltaResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::GetDeltaResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::GetFileFromDfsRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::GetFileFromDfsRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::GetFileFromDfsResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::GetFileFromDfsResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::GetInfoRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::GetInfoRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::GetInfoResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::GetInfoResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::GetMempoolRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::GetMempoolRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::GetMempoolResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::GetMempoolResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::GetPeerCountRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::GetPeerCountRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::GetPeerCountResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::GetPeerCountResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::GetPeerInfoRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::GetPeerInfoRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::GetPeerInfoResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::GetPeerInfoResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::GetPeerListRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::GetPeerListRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::GetPeerListResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::GetPeerListResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::GetPeerReputationRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::GetPeerReputationRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::GetPeerReputationResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::GetPeerReputationResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::ListAddressRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::ListAddressRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::ListAddressResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::ListAddressResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::ListWalletRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::ListWalletRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::ListWalletResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::ListWalletResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::RemovePeerRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::RemovePeerRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::RemovePeerResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::RemovePeerResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::SendFromManyRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::SendFromManyRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::SendFromManyResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::SendFromManyResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::SendManyRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::SendManyRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::SendManyResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::SendManyResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::SendToFromRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::SendToFromRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::SendToFromResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::SendToFromResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::SendToRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::SendToRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::SendToResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::SendToResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::ServiceStatusRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::ServiceStatusRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::ServiceStatusResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::ServiceStatusResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::SetPeerBlackListRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::SetPeerBlackListRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::SetPeerBlackListResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::SetPeerBlackListResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::SetPeerDataFolderRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::SetPeerDataFolderRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::SetPeerDataFolderResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::SetPeerDataFolderResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::SignMessageRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::SignMessageRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::SignMessageResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::SignMessageResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::SignRawTransactionRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::SignRawTransactionRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::SignRawTransactionResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::SignRawTransactionResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::TransferFileBytesRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::TransferFileBytesRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::TransferFileBytesResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::TransferFileBytesResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::ValidateAddressRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::ValidateAddressRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::ValidateAddressResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::ValidateAddressResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::VerifyMessageRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::VerifyMessageRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::VerifyMessageResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::VerifyMessageResponse>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::VersionRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::VersionRequest>(Arena*);
template<> ::Catalyst::Protocol::Rpc::Node::VersionResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::Rpc::Node::VersionResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Catalyst {
namespace Protocol {
namespace Rpc {
namespace Node {

enum ResponseCode {
  PENDING = 0,
  SUCCESSFUL = 1,
  ERROR = 2,
  FINISHED = 3,
  EXPIRED = 4,
  FAILED = 5,
  ResponseCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ResponseCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ResponseCode_IsValid(int value);
const ResponseCode ResponseCode_MIN = PENDING;
const ResponseCode ResponseCode_MAX = FAILED;
const int ResponseCode_ARRAYSIZE = ResponseCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResponseCode_descriptor();
inline const ::std::string& ResponseCode_Name(ResponseCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResponseCode_descriptor(), value);
}
inline bool ResponseCode_Parse(
    const ::std::string& name, ResponseCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResponseCode>(
    ResponseCode_descriptor(), name, value);
}
// ===================================================================

class VersionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.VersionRequest) */ {
 public:
  VersionRequest();
  virtual ~VersionRequest();

  VersionRequest(const VersionRequest& from);

  inline VersionRequest& operator=(const VersionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VersionRequest(VersionRequest&& from) noexcept
    : VersionRequest() {
    *this = ::std::move(from);
  }

  inline VersionRequest& operator=(VersionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VersionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VersionRequest* internal_default_instance() {
    return reinterpret_cast<const VersionRequest*>(
               &_VersionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(VersionRequest* other);
  friend void swap(VersionRequest& a, VersionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VersionRequest* New() const final {
    return CreateMaybeMessage<VersionRequest>(NULL);
  }

  VersionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VersionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VersionRequest& from);
  void MergeFrom(const VersionRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.VersionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VersionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.VersionResponse) */ {
 public:
  VersionResponse();
  virtual ~VersionResponse();

  VersionResponse(const VersionResponse& from);

  inline VersionResponse& operator=(const VersionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VersionResponse(VersionResponse&& from) noexcept
    : VersionResponse() {
    *this = ::std::move(from);
  }

  inline VersionResponse& operator=(VersionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VersionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VersionResponse* internal_default_instance() {
    return reinterpret_cast<const VersionResponse*>(
               &_VersionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(VersionResponse* other);
  friend void swap(VersionResponse& a, VersionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VersionResponse* New() const final {
    return CreateMaybeMessage<VersionResponse>(NULL);
  }

  VersionResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VersionResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VersionResponse& from);
  void MergeFrom(const VersionResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.VersionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetInfoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetInfoRequest) */ {
 public:
  GetInfoRequest();
  virtual ~GetInfoRequest();

  GetInfoRequest(const GetInfoRequest& from);

  inline GetInfoRequest& operator=(const GetInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetInfoRequest(GetInfoRequest&& from) noexcept
    : GetInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetInfoRequest& operator=(GetInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetInfoRequest*>(
               &_GetInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GetInfoRequest* other);
  friend void swap(GetInfoRequest& a, GetInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetInfoRequest* New() const final {
    return CreateMaybeMessage<GetInfoRequest>(NULL);
  }

  GetInfoRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetInfoRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetInfoRequest& from);
  void MergeFrom(const GetInfoRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetInfoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetInfoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetInfoResponse) */ {
 public:
  GetInfoResponse();
  virtual ~GetInfoResponse();

  GetInfoResponse(const GetInfoResponse& from);

  inline GetInfoResponse& operator=(const GetInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetInfoResponse(GetInfoResponse&& from) noexcept
    : GetInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetInfoResponse& operator=(GetInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetInfoResponse*>(
               &_GetInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GetInfoResponse* other);
  friend void swap(GetInfoResponse& a, GetInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetInfoResponse* New() const final {
    return CreateMaybeMessage<GetInfoResponse>(NULL);
  }

  GetInfoResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetInfoResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetInfoResponse& from);
  void MergeFrom(const GetInfoResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetInfoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateWalletRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.CreateWalletRequest) */ {
 public:
  CreateWalletRequest();
  virtual ~CreateWalletRequest();

  CreateWalletRequest(const CreateWalletRequest& from);

  inline CreateWalletRequest& operator=(const CreateWalletRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateWalletRequest(CreateWalletRequest&& from) noexcept
    : CreateWalletRequest() {
    *this = ::std::move(from);
  }

  inline CreateWalletRequest& operator=(CreateWalletRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateWalletRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateWalletRequest* internal_default_instance() {
    return reinterpret_cast<const CreateWalletRequest*>(
               &_CreateWalletRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CreateWalletRequest* other);
  friend void swap(CreateWalletRequest& a, CreateWalletRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateWalletRequest* New() const final {
    return CreateMaybeMessage<CreateWalletRequest>(NULL);
  }

  CreateWalletRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateWalletRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateWalletRequest& from);
  void MergeFrom(const CreateWalletRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateWalletRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.CreateWalletRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateWalletResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.CreateWalletResponse) */ {
 public:
  CreateWalletResponse();
  virtual ~CreateWalletResponse();

  CreateWalletResponse(const CreateWalletResponse& from);

  inline CreateWalletResponse& operator=(const CreateWalletResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateWalletResponse(CreateWalletResponse&& from) noexcept
    : CreateWalletResponse() {
    *this = ::std::move(from);
  }

  inline CreateWalletResponse& operator=(CreateWalletResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateWalletResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateWalletResponse* internal_default_instance() {
    return reinterpret_cast<const CreateWalletResponse*>(
               &_CreateWalletResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CreateWalletResponse* other);
  friend void swap(CreateWalletResponse& a, CreateWalletResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateWalletResponse* New() const final {
    return CreateMaybeMessage<CreateWalletResponse>(NULL);
  }

  CreateWalletResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateWalletResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateWalletResponse& from);
  void MergeFrom(const CreateWalletResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateWalletResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.CreateWalletResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListWalletRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.ListWalletRequest) */ {
 public:
  ListWalletRequest();
  virtual ~ListWalletRequest();

  ListWalletRequest(const ListWalletRequest& from);

  inline ListWalletRequest& operator=(const ListWalletRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListWalletRequest(ListWalletRequest&& from) noexcept
    : ListWalletRequest() {
    *this = ::std::move(from);
  }

  inline ListWalletRequest& operator=(ListWalletRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListWalletRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListWalletRequest* internal_default_instance() {
    return reinterpret_cast<const ListWalletRequest*>(
               &_ListWalletRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ListWalletRequest* other);
  friend void swap(ListWalletRequest& a, ListWalletRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListWalletRequest* New() const final {
    return CreateMaybeMessage<ListWalletRequest>(NULL);
  }

  ListWalletRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListWalletRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListWalletRequest& from);
  void MergeFrom(const ListWalletRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListWalletRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.ListWalletRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListWalletResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.ListWalletResponse) */ {
 public:
  ListWalletResponse();
  virtual ~ListWalletResponse();

  ListWalletResponse(const ListWalletResponse& from);

  inline ListWalletResponse& operator=(const ListWalletResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListWalletResponse(ListWalletResponse&& from) noexcept
    : ListWalletResponse() {
    *this = ::std::move(from);
  }

  inline ListWalletResponse& operator=(ListWalletResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListWalletResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListWalletResponse* internal_default_instance() {
    return reinterpret_cast<const ListWalletResponse*>(
               &_ListWalletResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ListWalletResponse* other);
  friend void swap(ListWalletResponse& a, ListWalletResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListWalletResponse* New() const final {
    return CreateMaybeMessage<ListWalletResponse>(NULL);
  }

  ListWalletResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListWalletResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListWalletResponse& from);
  void MergeFrom(const ListWalletResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListWalletResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.ListWalletResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateAddressRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.CreateAddressRequest) */ {
 public:
  CreateAddressRequest();
  virtual ~CreateAddressRequest();

  CreateAddressRequest(const CreateAddressRequest& from);

  inline CreateAddressRequest& operator=(const CreateAddressRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateAddressRequest(CreateAddressRequest&& from) noexcept
    : CreateAddressRequest() {
    *this = ::std::move(from);
  }

  inline CreateAddressRequest& operator=(CreateAddressRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateAddressRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateAddressRequest* internal_default_instance() {
    return reinterpret_cast<const CreateAddressRequest*>(
               &_CreateAddressRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(CreateAddressRequest* other);
  friend void swap(CreateAddressRequest& a, CreateAddressRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateAddressRequest* New() const final {
    return CreateMaybeMessage<CreateAddressRequest>(NULL);
  }

  CreateAddressRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateAddressRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateAddressRequest& from);
  void MergeFrom(const CreateAddressRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAddressRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.CreateAddressRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateAddressResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.CreateAddressResponse) */ {
 public:
  CreateAddressResponse();
  virtual ~CreateAddressResponse();

  CreateAddressResponse(const CreateAddressResponse& from);

  inline CreateAddressResponse& operator=(const CreateAddressResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateAddressResponse(CreateAddressResponse&& from) noexcept
    : CreateAddressResponse() {
    *this = ::std::move(from);
  }

  inline CreateAddressResponse& operator=(CreateAddressResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateAddressResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateAddressResponse* internal_default_instance() {
    return reinterpret_cast<const CreateAddressResponse*>(
               &_CreateAddressResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(CreateAddressResponse* other);
  friend void swap(CreateAddressResponse& a, CreateAddressResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateAddressResponse* New() const final {
    return CreateMaybeMessage<CreateAddressResponse>(NULL);
  }

  CreateAddressResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateAddressResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateAddressResponse& from);
  void MergeFrom(const CreateAddressResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAddressResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.CreateAddressResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetAddressRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetAddressRequest) */ {
 public:
  GetAddressRequest();
  virtual ~GetAddressRequest();

  GetAddressRequest(const GetAddressRequest& from);

  inline GetAddressRequest& operator=(const GetAddressRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetAddressRequest(GetAddressRequest&& from) noexcept
    : GetAddressRequest() {
    *this = ::std::move(from);
  }

  inline GetAddressRequest& operator=(GetAddressRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAddressRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAddressRequest* internal_default_instance() {
    return reinterpret_cast<const GetAddressRequest*>(
               &_GetAddressRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(GetAddressRequest* other);
  friend void swap(GetAddressRequest& a, GetAddressRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetAddressRequest* New() const final {
    return CreateMaybeMessage<GetAddressRequest>(NULL);
  }

  GetAddressRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetAddressRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetAddressRequest& from);
  void MergeFrom(const GetAddressRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAddressRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetAddressRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetAddressResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetAddressResponse) */ {
 public:
  GetAddressResponse();
  virtual ~GetAddressResponse();

  GetAddressResponse(const GetAddressResponse& from);

  inline GetAddressResponse& operator=(const GetAddressResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetAddressResponse(GetAddressResponse&& from) noexcept
    : GetAddressResponse() {
    *this = ::std::move(from);
  }

  inline GetAddressResponse& operator=(GetAddressResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAddressResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAddressResponse* internal_default_instance() {
    return reinterpret_cast<const GetAddressResponse*>(
               &_GetAddressResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(GetAddressResponse* other);
  friend void swap(GetAddressResponse& a, GetAddressResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetAddressResponse* New() const final {
    return CreateMaybeMessage<GetAddressResponse>(NULL);
  }

  GetAddressResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetAddressResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetAddressResponse& from);
  void MergeFrom(const GetAddressResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAddressResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetAddressResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListAddressRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.ListAddressRequest) */ {
 public:
  ListAddressRequest();
  virtual ~ListAddressRequest();

  ListAddressRequest(const ListAddressRequest& from);

  inline ListAddressRequest& operator=(const ListAddressRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListAddressRequest(ListAddressRequest&& from) noexcept
    : ListAddressRequest() {
    *this = ::std::move(from);
  }

  inline ListAddressRequest& operator=(ListAddressRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListAddressRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListAddressRequest* internal_default_instance() {
    return reinterpret_cast<const ListAddressRequest*>(
               &_ListAddressRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(ListAddressRequest* other);
  friend void swap(ListAddressRequest& a, ListAddressRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListAddressRequest* New() const final {
    return CreateMaybeMessage<ListAddressRequest>(NULL);
  }

  ListAddressRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListAddressRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListAddressRequest& from);
  void MergeFrom(const ListAddressRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAddressRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.ListAddressRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListAddressResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.ListAddressResponse) */ {
 public:
  ListAddressResponse();
  virtual ~ListAddressResponse();

  ListAddressResponse(const ListAddressResponse& from);

  inline ListAddressResponse& operator=(const ListAddressResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListAddressResponse(ListAddressResponse&& from) noexcept
    : ListAddressResponse() {
    *this = ::std::move(from);
  }

  inline ListAddressResponse& operator=(ListAddressResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListAddressResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListAddressResponse* internal_default_instance() {
    return reinterpret_cast<const ListAddressResponse*>(
               &_ListAddressResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(ListAddressResponse* other);
  friend void swap(ListAddressResponse& a, ListAddressResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListAddressResponse* New() const final {
    return CreateMaybeMessage<ListAddressResponse>(NULL);
  }

  ListAddressResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListAddressResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListAddressResponse& from);
  void MergeFrom(const ListAddressResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAddressResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.ListAddressResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValidateAddressRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.ValidateAddressRequest) */ {
 public:
  ValidateAddressRequest();
  virtual ~ValidateAddressRequest();

  ValidateAddressRequest(const ValidateAddressRequest& from);

  inline ValidateAddressRequest& operator=(const ValidateAddressRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValidateAddressRequest(ValidateAddressRequest&& from) noexcept
    : ValidateAddressRequest() {
    *this = ::std::move(from);
  }

  inline ValidateAddressRequest& operator=(ValidateAddressRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValidateAddressRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValidateAddressRequest* internal_default_instance() {
    return reinterpret_cast<const ValidateAddressRequest*>(
               &_ValidateAddressRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(ValidateAddressRequest* other);
  friend void swap(ValidateAddressRequest& a, ValidateAddressRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValidateAddressRequest* New() const final {
    return CreateMaybeMessage<ValidateAddressRequest>(NULL);
  }

  ValidateAddressRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValidateAddressRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValidateAddressRequest& from);
  void MergeFrom(const ValidateAddressRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateAddressRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.ValidateAddressRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValidateAddressResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse) */ {
 public:
  ValidateAddressResponse();
  virtual ~ValidateAddressResponse();

  ValidateAddressResponse(const ValidateAddressResponse& from);

  inline ValidateAddressResponse& operator=(const ValidateAddressResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValidateAddressResponse(ValidateAddressResponse&& from) noexcept
    : ValidateAddressResponse() {
    *this = ::std::move(from);
  }

  inline ValidateAddressResponse& operator=(ValidateAddressResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValidateAddressResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValidateAddressResponse* internal_default_instance() {
    return reinterpret_cast<const ValidateAddressResponse*>(
               &_ValidateAddressResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(ValidateAddressResponse* other);
  friend void swap(ValidateAddressResponse& a, ValidateAddressResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValidateAddressResponse* New() const final {
    return CreateMaybeMessage<ValidateAddressResponse>(NULL);
  }

  ValidateAddressResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValidateAddressResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValidateAddressResponse& from);
  void MergeFrom(const ValidateAddressResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateAddressResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetBalanceRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetBalanceRequest) */ {
 public:
  GetBalanceRequest();
  virtual ~GetBalanceRequest();

  GetBalanceRequest(const GetBalanceRequest& from);

  inline GetBalanceRequest& operator=(const GetBalanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetBalanceRequest(GetBalanceRequest&& from) noexcept
    : GetBalanceRequest() {
    *this = ::std::move(from);
  }

  inline GetBalanceRequest& operator=(GetBalanceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetBalanceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBalanceRequest* internal_default_instance() {
    return reinterpret_cast<const GetBalanceRequest*>(
               &_GetBalanceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(GetBalanceRequest* other);
  friend void swap(GetBalanceRequest& a, GetBalanceRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetBalanceRequest* New() const final {
    return CreateMaybeMessage<GetBalanceRequest>(NULL);
  }

  GetBalanceRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetBalanceRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetBalanceRequest& from);
  void MergeFrom(const GetBalanceRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBalanceRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetBalanceRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetBalanceResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetBalanceResponse) */ {
 public:
  GetBalanceResponse();
  virtual ~GetBalanceResponse();

  GetBalanceResponse(const GetBalanceResponse& from);

  inline GetBalanceResponse& operator=(const GetBalanceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetBalanceResponse(GetBalanceResponse&& from) noexcept
    : GetBalanceResponse() {
    *this = ::std::move(from);
  }

  inline GetBalanceResponse& operator=(GetBalanceResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetBalanceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBalanceResponse* internal_default_instance() {
    return reinterpret_cast<const GetBalanceResponse*>(
               &_GetBalanceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(GetBalanceResponse* other);
  friend void swap(GetBalanceResponse& a, GetBalanceResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetBalanceResponse* New() const final {
    return CreateMaybeMessage<GetBalanceResponse>(NULL);
  }

  GetBalanceResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetBalanceResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetBalanceResponse& from);
  void MergeFrom(const GetBalanceResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBalanceResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetBalanceResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateRawTransactionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest) */ {
 public:
  CreateRawTransactionRequest();
  virtual ~CreateRawTransactionRequest();

  CreateRawTransactionRequest(const CreateRawTransactionRequest& from);

  inline CreateRawTransactionRequest& operator=(const CreateRawTransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateRawTransactionRequest(CreateRawTransactionRequest&& from) noexcept
    : CreateRawTransactionRequest() {
    *this = ::std::move(from);
  }

  inline CreateRawTransactionRequest& operator=(CreateRawTransactionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateRawTransactionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateRawTransactionRequest* internal_default_instance() {
    return reinterpret_cast<const CreateRawTransactionRequest*>(
               &_CreateRawTransactionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(CreateRawTransactionRequest* other);
  friend void swap(CreateRawTransactionRequest& a, CreateRawTransactionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateRawTransactionRequest* New() const final {
    return CreateMaybeMessage<CreateRawTransactionRequest>(NULL);
  }

  CreateRawTransactionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateRawTransactionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateRawTransactionRequest& from);
  void MergeFrom(const CreateRawTransactionRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRawTransactionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateRawTransactionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse) */ {
 public:
  CreateRawTransactionResponse();
  virtual ~CreateRawTransactionResponse();

  CreateRawTransactionResponse(const CreateRawTransactionResponse& from);

  inline CreateRawTransactionResponse& operator=(const CreateRawTransactionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateRawTransactionResponse(CreateRawTransactionResponse&& from) noexcept
    : CreateRawTransactionResponse() {
    *this = ::std::move(from);
  }

  inline CreateRawTransactionResponse& operator=(CreateRawTransactionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateRawTransactionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateRawTransactionResponse* internal_default_instance() {
    return reinterpret_cast<const CreateRawTransactionResponse*>(
               &_CreateRawTransactionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(CreateRawTransactionResponse* other);
  friend void swap(CreateRawTransactionResponse& a, CreateRawTransactionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateRawTransactionResponse* New() const final {
    return CreateMaybeMessage<CreateRawTransactionResponse>(NULL);
  }

  CreateRawTransactionResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateRawTransactionResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateRawTransactionResponse& from);
  void MergeFrom(const CreateRawTransactionResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRawTransactionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SignRawTransactionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest) */ {
 public:
  SignRawTransactionRequest();
  virtual ~SignRawTransactionRequest();

  SignRawTransactionRequest(const SignRawTransactionRequest& from);

  inline SignRawTransactionRequest& operator=(const SignRawTransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SignRawTransactionRequest(SignRawTransactionRequest&& from) noexcept
    : SignRawTransactionRequest() {
    *this = ::std::move(from);
  }

  inline SignRawTransactionRequest& operator=(SignRawTransactionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SignRawTransactionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignRawTransactionRequest* internal_default_instance() {
    return reinterpret_cast<const SignRawTransactionRequest*>(
               &_SignRawTransactionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(SignRawTransactionRequest* other);
  friend void swap(SignRawTransactionRequest& a, SignRawTransactionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SignRawTransactionRequest* New() const final {
    return CreateMaybeMessage<SignRawTransactionRequest>(NULL);
  }

  SignRawTransactionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SignRawTransactionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SignRawTransactionRequest& from);
  void MergeFrom(const SignRawTransactionRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignRawTransactionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SignRawTransactionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse) */ {
 public:
  SignRawTransactionResponse();
  virtual ~SignRawTransactionResponse();

  SignRawTransactionResponse(const SignRawTransactionResponse& from);

  inline SignRawTransactionResponse& operator=(const SignRawTransactionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SignRawTransactionResponse(SignRawTransactionResponse&& from) noexcept
    : SignRawTransactionResponse() {
    *this = ::std::move(from);
  }

  inline SignRawTransactionResponse& operator=(SignRawTransactionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SignRawTransactionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignRawTransactionResponse* internal_default_instance() {
    return reinterpret_cast<const SignRawTransactionResponse*>(
               &_SignRawTransactionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(SignRawTransactionResponse* other);
  friend void swap(SignRawTransactionResponse& a, SignRawTransactionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SignRawTransactionResponse* New() const final {
    return CreateMaybeMessage<SignRawTransactionResponse>(NULL);
  }

  SignRawTransactionResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SignRawTransactionResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SignRawTransactionResponse& from);
  void MergeFrom(const SignRawTransactionResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignRawTransactionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DecodeRawTransactionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest) */ {
 public:
  DecodeRawTransactionRequest();
  virtual ~DecodeRawTransactionRequest();

  DecodeRawTransactionRequest(const DecodeRawTransactionRequest& from);

  inline DecodeRawTransactionRequest& operator=(const DecodeRawTransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DecodeRawTransactionRequest(DecodeRawTransactionRequest&& from) noexcept
    : DecodeRawTransactionRequest() {
    *this = ::std::move(from);
  }

  inline DecodeRawTransactionRequest& operator=(DecodeRawTransactionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DecodeRawTransactionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DecodeRawTransactionRequest* internal_default_instance() {
    return reinterpret_cast<const DecodeRawTransactionRequest*>(
               &_DecodeRawTransactionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(DecodeRawTransactionRequest* other);
  friend void swap(DecodeRawTransactionRequest& a, DecodeRawTransactionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DecodeRawTransactionRequest* New() const final {
    return CreateMaybeMessage<DecodeRawTransactionRequest>(NULL);
  }

  DecodeRawTransactionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DecodeRawTransactionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DecodeRawTransactionRequest& from);
  void MergeFrom(const DecodeRawTransactionRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DecodeRawTransactionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DecodeRawTransactionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse) */ {
 public:
  DecodeRawTransactionResponse();
  virtual ~DecodeRawTransactionResponse();

  DecodeRawTransactionResponse(const DecodeRawTransactionResponse& from);

  inline DecodeRawTransactionResponse& operator=(const DecodeRawTransactionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DecodeRawTransactionResponse(DecodeRawTransactionResponse&& from) noexcept
    : DecodeRawTransactionResponse() {
    *this = ::std::move(from);
  }

  inline DecodeRawTransactionResponse& operator=(DecodeRawTransactionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DecodeRawTransactionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DecodeRawTransactionResponse* internal_default_instance() {
    return reinterpret_cast<const DecodeRawTransactionResponse*>(
               &_DecodeRawTransactionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(DecodeRawTransactionResponse* other);
  friend void swap(DecodeRawTransactionResponse& a, DecodeRawTransactionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DecodeRawTransactionResponse* New() const final {
    return CreateMaybeMessage<DecodeRawTransactionResponse>(NULL);
  }

  DecodeRawTransactionResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DecodeRawTransactionResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DecodeRawTransactionResponse& from);
  void MergeFrom(const DecodeRawTransactionResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DecodeRawTransactionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BroadcastRawTransactionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest) */ {
 public:
  BroadcastRawTransactionRequest();
  virtual ~BroadcastRawTransactionRequest();

  BroadcastRawTransactionRequest(const BroadcastRawTransactionRequest& from);

  inline BroadcastRawTransactionRequest& operator=(const BroadcastRawTransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BroadcastRawTransactionRequest(BroadcastRawTransactionRequest&& from) noexcept
    : BroadcastRawTransactionRequest() {
    *this = ::std::move(from);
  }

  inline BroadcastRawTransactionRequest& operator=(BroadcastRawTransactionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BroadcastRawTransactionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BroadcastRawTransactionRequest* internal_default_instance() {
    return reinterpret_cast<const BroadcastRawTransactionRequest*>(
               &_BroadcastRawTransactionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(BroadcastRawTransactionRequest* other);
  friend void swap(BroadcastRawTransactionRequest& a, BroadcastRawTransactionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BroadcastRawTransactionRequest* New() const final {
    return CreateMaybeMessage<BroadcastRawTransactionRequest>(NULL);
  }

  BroadcastRawTransactionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BroadcastRawTransactionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BroadcastRawTransactionRequest& from);
  void MergeFrom(const BroadcastRawTransactionRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadcastRawTransactionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Catalyst.Protocol.Transaction.TransactionBroadcast transaction = 1;
  bool has_transaction() const;
  void clear_transaction();
  static const int kTransactionFieldNumber = 1;
  private:
  const ::Catalyst::Protocol::Transaction::TransactionBroadcast& _internal_transaction() const;
  public:
  const ::Catalyst::Protocol::Transaction::TransactionBroadcast& transaction() const;
  ::Catalyst::Protocol::Transaction::TransactionBroadcast* release_transaction();
  ::Catalyst::Protocol::Transaction::TransactionBroadcast* mutable_transaction();
  void set_allocated_transaction(::Catalyst::Protocol::Transaction::TransactionBroadcast* transaction);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Catalyst::Protocol::Transaction::TransactionBroadcast* transaction_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BroadcastRawTransactionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse) */ {
 public:
  BroadcastRawTransactionResponse();
  virtual ~BroadcastRawTransactionResponse();

  BroadcastRawTransactionResponse(const BroadcastRawTransactionResponse& from);

  inline BroadcastRawTransactionResponse& operator=(const BroadcastRawTransactionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BroadcastRawTransactionResponse(BroadcastRawTransactionResponse&& from) noexcept
    : BroadcastRawTransactionResponse() {
    *this = ::std::move(from);
  }

  inline BroadcastRawTransactionResponse& operator=(BroadcastRawTransactionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BroadcastRawTransactionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BroadcastRawTransactionResponse* internal_default_instance() {
    return reinterpret_cast<const BroadcastRawTransactionResponse*>(
               &_BroadcastRawTransactionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(BroadcastRawTransactionResponse* other);
  friend void swap(BroadcastRawTransactionResponse& a, BroadcastRawTransactionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BroadcastRawTransactionResponse* New() const final {
    return CreateMaybeMessage<BroadcastRawTransactionResponse>(NULL);
  }

  BroadcastRawTransactionResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BroadcastRawTransactionResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BroadcastRawTransactionResponse& from);
  void MergeFrom(const BroadcastRawTransactionResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadcastRawTransactionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Catalyst.Protocol.Rpc.Node.ResponseCode responseCode = 1;
  void clear_responsecode();
  static const int kResponseCodeFieldNumber = 1;
  ::Catalyst::Protocol::Rpc::Node::ResponseCode responsecode() const;
  void set_responsecode(::Catalyst::Protocol::Rpc::Node::ResponseCode value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int responsecode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SendToRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SendToRequest) */ {
 public:
  SendToRequest();
  virtual ~SendToRequest();

  SendToRequest(const SendToRequest& from);

  inline SendToRequest& operator=(const SendToRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendToRequest(SendToRequest&& from) noexcept
    : SendToRequest() {
    *this = ::std::move(from);
  }

  inline SendToRequest& operator=(SendToRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendToRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendToRequest* internal_default_instance() {
    return reinterpret_cast<const SendToRequest*>(
               &_SendToRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(SendToRequest* other);
  friend void swap(SendToRequest& a, SendToRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendToRequest* New() const final {
    return CreateMaybeMessage<SendToRequest>(NULL);
  }

  SendToRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SendToRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SendToRequest& from);
  void MergeFrom(const SendToRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendToRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SendToRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SendToResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SendToResponse) */ {
 public:
  SendToResponse();
  virtual ~SendToResponse();

  SendToResponse(const SendToResponse& from);

  inline SendToResponse& operator=(const SendToResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendToResponse(SendToResponse&& from) noexcept
    : SendToResponse() {
    *this = ::std::move(from);
  }

  inline SendToResponse& operator=(SendToResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendToResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendToResponse* internal_default_instance() {
    return reinterpret_cast<const SendToResponse*>(
               &_SendToResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(SendToResponse* other);
  friend void swap(SendToResponse& a, SendToResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendToResponse* New() const final {
    return CreateMaybeMessage<SendToResponse>(NULL);
  }

  SendToResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SendToResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SendToResponse& from);
  void MergeFrom(const SendToResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendToResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SendToResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SendToFromRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SendToFromRequest) */ {
 public:
  SendToFromRequest();
  virtual ~SendToFromRequest();

  SendToFromRequest(const SendToFromRequest& from);

  inline SendToFromRequest& operator=(const SendToFromRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendToFromRequest(SendToFromRequest&& from) noexcept
    : SendToFromRequest() {
    *this = ::std::move(from);
  }

  inline SendToFromRequest& operator=(SendToFromRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendToFromRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendToFromRequest* internal_default_instance() {
    return reinterpret_cast<const SendToFromRequest*>(
               &_SendToFromRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(SendToFromRequest* other);
  friend void swap(SendToFromRequest& a, SendToFromRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendToFromRequest* New() const final {
    return CreateMaybeMessage<SendToFromRequest>(NULL);
  }

  SendToFromRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SendToFromRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SendToFromRequest& from);
  void MergeFrom(const SendToFromRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendToFromRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SendToFromRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SendToFromResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SendToFromResponse) */ {
 public:
  SendToFromResponse();
  virtual ~SendToFromResponse();

  SendToFromResponse(const SendToFromResponse& from);

  inline SendToFromResponse& operator=(const SendToFromResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendToFromResponse(SendToFromResponse&& from) noexcept
    : SendToFromResponse() {
    *this = ::std::move(from);
  }

  inline SendToFromResponse& operator=(SendToFromResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendToFromResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendToFromResponse* internal_default_instance() {
    return reinterpret_cast<const SendToFromResponse*>(
               &_SendToFromResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(SendToFromResponse* other);
  friend void swap(SendToFromResponse& a, SendToFromResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendToFromResponse* New() const final {
    return CreateMaybeMessage<SendToFromResponse>(NULL);
  }

  SendToFromResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SendToFromResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SendToFromResponse& from);
  void MergeFrom(const SendToFromResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendToFromResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SendToFromResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SendManyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SendManyRequest) */ {
 public:
  SendManyRequest();
  virtual ~SendManyRequest();

  SendManyRequest(const SendManyRequest& from);

  inline SendManyRequest& operator=(const SendManyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendManyRequest(SendManyRequest&& from) noexcept
    : SendManyRequest() {
    *this = ::std::move(from);
  }

  inline SendManyRequest& operator=(SendManyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendManyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendManyRequest* internal_default_instance() {
    return reinterpret_cast<const SendManyRequest*>(
               &_SendManyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(SendManyRequest* other);
  friend void swap(SendManyRequest& a, SendManyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendManyRequest* New() const final {
    return CreateMaybeMessage<SendManyRequest>(NULL);
  }

  SendManyRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SendManyRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SendManyRequest& from);
  void MergeFrom(const SendManyRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendManyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SendManyRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SendManyResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SendManyResponse) */ {
 public:
  SendManyResponse();
  virtual ~SendManyResponse();

  SendManyResponse(const SendManyResponse& from);

  inline SendManyResponse& operator=(const SendManyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendManyResponse(SendManyResponse&& from) noexcept
    : SendManyResponse() {
    *this = ::std::move(from);
  }

  inline SendManyResponse& operator=(SendManyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendManyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendManyResponse* internal_default_instance() {
    return reinterpret_cast<const SendManyResponse*>(
               &_SendManyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(SendManyResponse* other);
  friend void swap(SendManyResponse& a, SendManyResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendManyResponse* New() const final {
    return CreateMaybeMessage<SendManyResponse>(NULL);
  }

  SendManyResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SendManyResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SendManyResponse& from);
  void MergeFrom(const SendManyResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendManyResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SendManyResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SendFromManyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SendFromManyRequest) */ {
 public:
  SendFromManyRequest();
  virtual ~SendFromManyRequest();

  SendFromManyRequest(const SendFromManyRequest& from);

  inline SendFromManyRequest& operator=(const SendFromManyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendFromManyRequest(SendFromManyRequest&& from) noexcept
    : SendFromManyRequest() {
    *this = ::std::move(from);
  }

  inline SendFromManyRequest& operator=(SendFromManyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendFromManyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendFromManyRequest* internal_default_instance() {
    return reinterpret_cast<const SendFromManyRequest*>(
               &_SendFromManyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(SendFromManyRequest* other);
  friend void swap(SendFromManyRequest& a, SendFromManyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendFromManyRequest* New() const final {
    return CreateMaybeMessage<SendFromManyRequest>(NULL);
  }

  SendFromManyRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SendFromManyRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SendFromManyRequest& from);
  void MergeFrom(const SendFromManyRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendFromManyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SendFromManyRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SendFromManyResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SendFromManyResponse) */ {
 public:
  SendFromManyResponse();
  virtual ~SendFromManyResponse();

  SendFromManyResponse(const SendFromManyResponse& from);

  inline SendFromManyResponse& operator=(const SendFromManyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendFromManyResponse(SendFromManyResponse&& from) noexcept
    : SendFromManyResponse() {
    *this = ::std::move(from);
  }

  inline SendFromManyResponse& operator=(SendFromManyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendFromManyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendFromManyResponse* internal_default_instance() {
    return reinterpret_cast<const SendFromManyResponse*>(
               &_SendFromManyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(SendFromManyResponse* other);
  friend void swap(SendFromManyResponse& a, SendFromManyResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendFromManyResponse* New() const final {
    return CreateMaybeMessage<SendFromManyResponse>(NULL);
  }

  SendFromManyResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SendFromManyResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SendFromManyResponse& from);
  void MergeFrom(const SendFromManyResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendFromManyResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SendFromManyResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddNodeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.AddNodeRequest) */ {
 public:
  AddNodeRequest();
  virtual ~AddNodeRequest();

  AddNodeRequest(const AddNodeRequest& from);

  inline AddNodeRequest& operator=(const AddNodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddNodeRequest(AddNodeRequest&& from) noexcept
    : AddNodeRequest() {
    *this = ::std::move(from);
  }

  inline AddNodeRequest& operator=(AddNodeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddNodeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddNodeRequest* internal_default_instance() {
    return reinterpret_cast<const AddNodeRequest*>(
               &_AddNodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(AddNodeRequest* other);
  friend void swap(AddNodeRequest& a, AddNodeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddNodeRequest* New() const final {
    return CreateMaybeMessage<AddNodeRequest>(NULL);
  }

  AddNodeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddNodeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddNodeRequest& from);
  void MergeFrom(const AddNodeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddNodeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.AddNodeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddNodeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.AddNodeResponse) */ {
 public:
  AddNodeResponse();
  virtual ~AddNodeResponse();

  AddNodeResponse(const AddNodeResponse& from);

  inline AddNodeResponse& operator=(const AddNodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddNodeResponse(AddNodeResponse&& from) noexcept
    : AddNodeResponse() {
    *this = ::std::move(from);
  }

  inline AddNodeResponse& operator=(AddNodeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddNodeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddNodeResponse* internal_default_instance() {
    return reinterpret_cast<const AddNodeResponse*>(
               &_AddNodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(AddNodeResponse* other);
  friend void swap(AddNodeResponse& a, AddNodeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddNodeResponse* New() const final {
    return CreateMaybeMessage<AddNodeResponse>(NULL);
  }

  AddNodeResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddNodeResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddNodeResponse& from);
  void MergeFrom(const AddNodeResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddNodeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.AddNodeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPeerListRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetPeerListRequest) */ {
 public:
  GetPeerListRequest();
  virtual ~GetPeerListRequest();

  GetPeerListRequest(const GetPeerListRequest& from);

  inline GetPeerListRequest& operator=(const GetPeerListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPeerListRequest(GetPeerListRequest&& from) noexcept
    : GetPeerListRequest() {
    *this = ::std::move(from);
  }

  inline GetPeerListRequest& operator=(GetPeerListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPeerListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPeerListRequest* internal_default_instance() {
    return reinterpret_cast<const GetPeerListRequest*>(
               &_GetPeerListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(GetPeerListRequest* other);
  friend void swap(GetPeerListRequest& a, GetPeerListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPeerListRequest* New() const final {
    return CreateMaybeMessage<GetPeerListRequest>(NULL);
  }

  GetPeerListRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetPeerListRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetPeerListRequest& from);
  void MergeFrom(const GetPeerListRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPeerListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetPeerListRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPeerListResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetPeerListResponse) */ {
 public:
  GetPeerListResponse();
  virtual ~GetPeerListResponse();

  GetPeerListResponse(const GetPeerListResponse& from);

  inline GetPeerListResponse& operator=(const GetPeerListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPeerListResponse(GetPeerListResponse&& from) noexcept
    : GetPeerListResponse() {
    *this = ::std::move(from);
  }

  inline GetPeerListResponse& operator=(GetPeerListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPeerListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPeerListResponse* internal_default_instance() {
    return reinterpret_cast<const GetPeerListResponse*>(
               &_GetPeerListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(GetPeerListResponse* other);
  friend void swap(GetPeerListResponse& a, GetPeerListResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPeerListResponse* New() const final {
    return CreateMaybeMessage<GetPeerListResponse>(NULL);
  }

  GetPeerListResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetPeerListResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetPeerListResponse& from);
  void MergeFrom(const GetPeerListResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPeerListResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Catalyst.Protocol.Common.PeerId Peers = 1;
  int peers_size() const;
  void clear_peers();
  static const int kPeersFieldNumber = 1;
  ::Catalyst::Protocol::Common::PeerId* mutable_peers(int index);
  ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Common::PeerId >*
      mutable_peers();
  const ::Catalyst::Protocol::Common::PeerId& peers(int index) const;
  ::Catalyst::Protocol::Common::PeerId* add_peers();
  const ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Common::PeerId >&
      peers() const;

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetPeerListResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Common::PeerId > peers_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPeerReputationRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest) */ {
 public:
  GetPeerReputationRequest();
  virtual ~GetPeerReputationRequest();

  GetPeerReputationRequest(const GetPeerReputationRequest& from);

  inline GetPeerReputationRequest& operator=(const GetPeerReputationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPeerReputationRequest(GetPeerReputationRequest&& from) noexcept
    : GetPeerReputationRequest() {
    *this = ::std::move(from);
  }

  inline GetPeerReputationRequest& operator=(GetPeerReputationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPeerReputationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPeerReputationRequest* internal_default_instance() {
    return reinterpret_cast<const GetPeerReputationRequest*>(
               &_GetPeerReputationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(GetPeerReputationRequest* other);
  friend void swap(GetPeerReputationRequest& a, GetPeerReputationRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPeerReputationRequest* New() const final {
    return CreateMaybeMessage<GetPeerReputationRequest>(NULL);
  }

  GetPeerReputationRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetPeerReputationRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetPeerReputationRequest& from);
  void MergeFrom(const GetPeerReputationRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPeerReputationRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes publicKey = 1;
  void clear_publickey();
  static const int kPublicKeyFieldNumber = 1;
  const ::std::string& publickey() const;
  void set_publickey(const ::std::string& value);
  #if LANG_CXX11
  void set_publickey(::std::string&& value);
  #endif
  void set_publickey(const char* value);
  void set_publickey(const void* value, size_t size);
  ::std::string* mutable_publickey();
  ::std::string* release_publickey();
  void set_allocated_publickey(::std::string* publickey);

  // bytes ip = 2;
  void clear_ip();
  static const int kIpFieldNumber = 2;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr publickey_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPeerReputationResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetPeerReputationResponse) */ {
 public:
  GetPeerReputationResponse();
  virtual ~GetPeerReputationResponse();

  GetPeerReputationResponse(const GetPeerReputationResponse& from);

  inline GetPeerReputationResponse& operator=(const GetPeerReputationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPeerReputationResponse(GetPeerReputationResponse&& from) noexcept
    : GetPeerReputationResponse() {
    *this = ::std::move(from);
  }

  inline GetPeerReputationResponse& operator=(GetPeerReputationResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPeerReputationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPeerReputationResponse* internal_default_instance() {
    return reinterpret_cast<const GetPeerReputationResponse*>(
               &_GetPeerReputationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void Swap(GetPeerReputationResponse* other);
  friend void swap(GetPeerReputationResponse& a, GetPeerReputationResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPeerReputationResponse* New() const final {
    return CreateMaybeMessage<GetPeerReputationResponse>(NULL);
  }

  GetPeerReputationResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetPeerReputationResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetPeerReputationResponse& from);
  void MergeFrom(const GetPeerReputationResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPeerReputationResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 reputation = 1;
  void clear_reputation();
  static const int kReputationFieldNumber = 1;
  ::google::protobuf::int32 reputation() const;
  void set_reputation(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetPeerReputationResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 reputation_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetPeerBlackListRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SetPeerBlackListRequest) */ {
 public:
  SetPeerBlackListRequest();
  virtual ~SetPeerBlackListRequest();

  SetPeerBlackListRequest(const SetPeerBlackListRequest& from);

  inline SetPeerBlackListRequest& operator=(const SetPeerBlackListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetPeerBlackListRequest(SetPeerBlackListRequest&& from) noexcept
    : SetPeerBlackListRequest() {
    *this = ::std::move(from);
  }

  inline SetPeerBlackListRequest& operator=(SetPeerBlackListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetPeerBlackListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetPeerBlackListRequest* internal_default_instance() {
    return reinterpret_cast<const SetPeerBlackListRequest*>(
               &_SetPeerBlackListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  void Swap(SetPeerBlackListRequest* other);
  friend void swap(SetPeerBlackListRequest& a, SetPeerBlackListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetPeerBlackListRequest* New() const final {
    return CreateMaybeMessage<SetPeerBlackListRequest>(NULL);
  }

  SetPeerBlackListRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetPeerBlackListRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetPeerBlackListRequest& from);
  void MergeFrom(const SetPeerBlackListRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPeerBlackListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes publicKey = 1;
  void clear_publickey();
  static const int kPublicKeyFieldNumber = 1;
  const ::std::string& publickey() const;
  void set_publickey(const ::std::string& value);
  #if LANG_CXX11
  void set_publickey(::std::string&& value);
  #endif
  void set_publickey(const char* value);
  void set_publickey(const void* value, size_t size);
  ::std::string* mutable_publickey();
  ::std::string* release_publickey();
  void set_allocated_publickey(::std::string* publickey);

  // bytes ip = 2;
  void clear_ip();
  static const int kIpFieldNumber = 2;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // bool blacklist = 3;
  void clear_blacklist();
  static const int kBlacklistFieldNumber = 3;
  bool blacklist() const;
  void set_blacklist(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SetPeerBlackListRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr publickey_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  bool blacklist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetPeerBlackListResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SetPeerBlackListResponse) */ {
 public:
  SetPeerBlackListResponse();
  virtual ~SetPeerBlackListResponse();

  SetPeerBlackListResponse(const SetPeerBlackListResponse& from);

  inline SetPeerBlackListResponse& operator=(const SetPeerBlackListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetPeerBlackListResponse(SetPeerBlackListResponse&& from) noexcept
    : SetPeerBlackListResponse() {
    *this = ::std::move(from);
  }

  inline SetPeerBlackListResponse& operator=(SetPeerBlackListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetPeerBlackListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetPeerBlackListResponse* internal_default_instance() {
    return reinterpret_cast<const SetPeerBlackListResponse*>(
               &_SetPeerBlackListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  void Swap(SetPeerBlackListResponse* other);
  friend void swap(SetPeerBlackListResponse& a, SetPeerBlackListResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetPeerBlackListResponse* New() const final {
    return CreateMaybeMessage<SetPeerBlackListResponse>(NULL);
  }

  SetPeerBlackListResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetPeerBlackListResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetPeerBlackListResponse& from);
  void MergeFrom(const SetPeerBlackListResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPeerBlackListResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes publicKey = 1;
  void clear_publickey();
  static const int kPublicKeyFieldNumber = 1;
  const ::std::string& publickey() const;
  void set_publickey(const ::std::string& value);
  #if LANG_CXX11
  void set_publickey(::std::string&& value);
  #endif
  void set_publickey(const char* value);
  void set_publickey(const void* value, size_t size);
  ::std::string* mutable_publickey();
  ::std::string* release_publickey();
  void set_allocated_publickey(::std::string* publickey);

  // bytes ip = 2;
  void clear_ip();
  static const int kIpFieldNumber = 2;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // bool blacklist = 3;
  void clear_blacklist();
  static const int kBlacklistFieldNumber = 3;
  bool blacklist() const;
  void set_blacklist(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SetPeerBlackListResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr publickey_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  bool blacklist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPeerInfoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest) */ {
 public:
  GetPeerInfoRequest();
  virtual ~GetPeerInfoRequest();

  GetPeerInfoRequest(const GetPeerInfoRequest& from);

  inline GetPeerInfoRequest& operator=(const GetPeerInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPeerInfoRequest(GetPeerInfoRequest&& from) noexcept
    : GetPeerInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetPeerInfoRequest& operator=(GetPeerInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPeerInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPeerInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetPeerInfoRequest*>(
               &_GetPeerInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  void Swap(GetPeerInfoRequest* other);
  friend void swap(GetPeerInfoRequest& a, GetPeerInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPeerInfoRequest* New() const final {
    return CreateMaybeMessage<GetPeerInfoRequest>(NULL);
  }

  GetPeerInfoRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetPeerInfoRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetPeerInfoRequest& from);
  void MergeFrom(const GetPeerInfoRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPeerInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes publicKey = 1;
  void clear_publickey();
  static const int kPublicKeyFieldNumber = 1;
  const ::std::string& publickey() const;
  void set_publickey(const ::std::string& value);
  #if LANG_CXX11
  void set_publickey(::std::string&& value);
  #endif
  void set_publickey(const char* value);
  void set_publickey(const void* value, size_t size);
  ::std::string* mutable_publickey();
  ::std::string* release_publickey();
  void set_allocated_publickey(::std::string* publickey);

  // bytes ip = 2;
  void clear_ip();
  static const int kIpFieldNumber = 2;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr publickey_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPeerInfoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse) */ {
 public:
  GetPeerInfoResponse();
  virtual ~GetPeerInfoResponse();

  GetPeerInfoResponse(const GetPeerInfoResponse& from);

  inline GetPeerInfoResponse& operator=(const GetPeerInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPeerInfoResponse(GetPeerInfoResponse&& from) noexcept
    : GetPeerInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetPeerInfoResponse& operator=(GetPeerInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPeerInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPeerInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetPeerInfoResponse*>(
               &_GetPeerInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  void Swap(GetPeerInfoResponse* other);
  friend void swap(GetPeerInfoResponse& a, GetPeerInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPeerInfoResponse* New() const final {
    return CreateMaybeMessage<GetPeerInfoResponse>(NULL);
  }

  GetPeerInfoResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetPeerInfoResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetPeerInfoResponse& from);
  void MergeFrom(const GetPeerInfoResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPeerInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Catalyst.Protocol.Common.PeerInfo PeerInfo = 1;
  int peerinfo_size() const;
  void clear_peerinfo();
  static const int kPeerInfoFieldNumber = 1;
  ::Catalyst::Protocol::Common::PeerInfo* mutable_peerinfo(int index);
  ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Common::PeerInfo >*
      mutable_peerinfo();
  const ::Catalyst::Protocol::Common::PeerInfo& peerinfo(int index) const;
  ::Catalyst::Protocol::Common::PeerInfo* add_peerinfo();
  const ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Common::PeerInfo >&
      peerinfo() const;

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Common::PeerInfo > peerinfo_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetConnectionCountRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest) */ {
 public:
  GetConnectionCountRequest();
  virtual ~GetConnectionCountRequest();

  GetConnectionCountRequest(const GetConnectionCountRequest& from);

  inline GetConnectionCountRequest& operator=(const GetConnectionCountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetConnectionCountRequest(GetConnectionCountRequest&& from) noexcept
    : GetConnectionCountRequest() {
    *this = ::std::move(from);
  }

  inline GetConnectionCountRequest& operator=(GetConnectionCountRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetConnectionCountRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetConnectionCountRequest* internal_default_instance() {
    return reinterpret_cast<const GetConnectionCountRequest*>(
               &_GetConnectionCountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  void Swap(GetConnectionCountRequest* other);
  friend void swap(GetConnectionCountRequest& a, GetConnectionCountRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetConnectionCountRequest* New() const final {
    return CreateMaybeMessage<GetConnectionCountRequest>(NULL);
  }

  GetConnectionCountRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetConnectionCountRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetConnectionCountRequest& from);
  void MergeFrom(const GetConnectionCountRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConnectionCountRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetConnectionCountResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse) */ {
 public:
  GetConnectionCountResponse();
  virtual ~GetConnectionCountResponse();

  GetConnectionCountResponse(const GetConnectionCountResponse& from);

  inline GetConnectionCountResponse& operator=(const GetConnectionCountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetConnectionCountResponse(GetConnectionCountResponse&& from) noexcept
    : GetConnectionCountResponse() {
    *this = ::std::move(from);
  }

  inline GetConnectionCountResponse& operator=(GetConnectionCountResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetConnectionCountResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetConnectionCountResponse* internal_default_instance() {
    return reinterpret_cast<const GetConnectionCountResponse*>(
               &_GetConnectionCountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  void Swap(GetConnectionCountResponse* other);
  friend void swap(GetConnectionCountResponse& a, GetConnectionCountResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetConnectionCountResponse* New() const final {
    return CreateMaybeMessage<GetConnectionCountResponse>(NULL);
  }

  GetConnectionCountResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetConnectionCountResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetConnectionCountResponse& from);
  void MergeFrom(const GetConnectionCountResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConnectionCountResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetDeltaRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetDeltaRequest) */ {
 public:
  GetDeltaRequest();
  virtual ~GetDeltaRequest();

  GetDeltaRequest(const GetDeltaRequest& from);

  inline GetDeltaRequest& operator=(const GetDeltaRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetDeltaRequest(GetDeltaRequest&& from) noexcept
    : GetDeltaRequest() {
    *this = ::std::move(from);
  }

  inline GetDeltaRequest& operator=(GetDeltaRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDeltaRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDeltaRequest* internal_default_instance() {
    return reinterpret_cast<const GetDeltaRequest*>(
               &_GetDeltaRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  void Swap(GetDeltaRequest* other);
  friend void swap(GetDeltaRequest& a, GetDeltaRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetDeltaRequest* New() const final {
    return CreateMaybeMessage<GetDeltaRequest>(NULL);
  }

  GetDeltaRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetDeltaRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetDeltaRequest& from);
  void MergeFrom(const GetDeltaRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDeltaRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes DeltaDfsHash = 1;
  void clear_deltadfshash();
  static const int kDeltaDfsHashFieldNumber = 1;
  const ::std::string& deltadfshash() const;
  void set_deltadfshash(const ::std::string& value);
  #if LANG_CXX11
  void set_deltadfshash(::std::string&& value);
  #endif
  void set_deltadfshash(const char* value);
  void set_deltadfshash(const void* value, size_t size);
  ::std::string* mutable_deltadfshash();
  ::std::string* release_deltadfshash();
  void set_allocated_deltadfshash(::std::string* deltadfshash);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetDeltaRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr deltadfshash_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetDeltaResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetDeltaResponse) */ {
 public:
  GetDeltaResponse();
  virtual ~GetDeltaResponse();

  GetDeltaResponse(const GetDeltaResponse& from);

  inline GetDeltaResponse& operator=(const GetDeltaResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetDeltaResponse(GetDeltaResponse&& from) noexcept
    : GetDeltaResponse() {
    *this = ::std::move(from);
  }

  inline GetDeltaResponse& operator=(GetDeltaResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDeltaResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDeltaResponse* internal_default_instance() {
    return reinterpret_cast<const GetDeltaResponse*>(
               &_GetDeltaResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  void Swap(GetDeltaResponse* other);
  friend void swap(GetDeltaResponse& a, GetDeltaResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetDeltaResponse* New() const final {
    return CreateMaybeMessage<GetDeltaResponse>(NULL);
  }

  GetDeltaResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetDeltaResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetDeltaResponse& from);
  void MergeFrom(const GetDeltaResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDeltaResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Catalyst.Protocol.Deltas.Delta Delta = 1;
  bool has_delta() const;
  void clear_delta();
  static const int kDeltaFieldNumber = 1;
  private:
  const ::Catalyst::Protocol::Deltas::Delta& _internal_delta() const;
  public:
  const ::Catalyst::Protocol::Deltas::Delta& delta() const;
  ::Catalyst::Protocol::Deltas::Delta* release_delta();
  ::Catalyst::Protocol::Deltas::Delta* mutable_delta();
  void set_allocated_delta(::Catalyst::Protocol::Deltas::Delta* delta);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetDeltaResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Catalyst::Protocol::Deltas::Delta* delta_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetMempoolRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetMempoolRequest) */ {
 public:
  GetMempoolRequest();
  virtual ~GetMempoolRequest();

  GetMempoolRequest(const GetMempoolRequest& from);

  inline GetMempoolRequest& operator=(const GetMempoolRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetMempoolRequest(GetMempoolRequest&& from) noexcept
    : GetMempoolRequest() {
    *this = ::std::move(from);
  }

  inline GetMempoolRequest& operator=(GetMempoolRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMempoolRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMempoolRequest* internal_default_instance() {
    return reinterpret_cast<const GetMempoolRequest*>(
               &_GetMempoolRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  void Swap(GetMempoolRequest* other);
  friend void swap(GetMempoolRequest& a, GetMempoolRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMempoolRequest* New() const final {
    return CreateMaybeMessage<GetMempoolRequest>(NULL);
  }

  GetMempoolRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetMempoolRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetMempoolRequest& from);
  void MergeFrom(const GetMempoolRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMempoolRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetMempoolRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetMempoolResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetMempoolResponse) */ {
 public:
  GetMempoolResponse();
  virtual ~GetMempoolResponse();

  GetMempoolResponse(const GetMempoolResponse& from);

  inline GetMempoolResponse& operator=(const GetMempoolResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetMempoolResponse(GetMempoolResponse&& from) noexcept
    : GetMempoolResponse() {
    *this = ::std::move(from);
  }

  inline GetMempoolResponse& operator=(GetMempoolResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMempoolResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMempoolResponse* internal_default_instance() {
    return reinterpret_cast<const GetMempoolResponse*>(
               &_GetMempoolResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  void Swap(GetMempoolResponse* other);
  friend void swap(GetMempoolResponse& a, GetMempoolResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMempoolResponse* New() const final {
    return CreateMaybeMessage<GetMempoolResponse>(NULL);
  }

  GetMempoolResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetMempoolResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetMempoolResponse& from);
  void MergeFrom(const GetMempoolResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMempoolResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Catalyst.Protocol.Transaction.TransactionBroadcast transactions = 1;
  int transactions_size() const;
  void clear_transactions();
  static const int kTransactionsFieldNumber = 1;
  ::Catalyst::Protocol::Transaction::TransactionBroadcast* mutable_transactions(int index);
  ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::TransactionBroadcast >*
      mutable_transactions();
  const ::Catalyst::Protocol::Transaction::TransactionBroadcast& transactions(int index) const;
  ::Catalyst::Protocol::Transaction::TransactionBroadcast* add_transactions();
  const ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::TransactionBroadcast >&
      transactions() const;

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetMempoolResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::TransactionBroadcast > transactions_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SignMessageRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SignMessageRequest) */ {
 public:
  SignMessageRequest();
  virtual ~SignMessageRequest();

  SignMessageRequest(const SignMessageRequest& from);

  inline SignMessageRequest& operator=(const SignMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SignMessageRequest(SignMessageRequest&& from) noexcept
    : SignMessageRequest() {
    *this = ::std::move(from);
  }

  inline SignMessageRequest& operator=(SignMessageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SignMessageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignMessageRequest* internal_default_instance() {
    return reinterpret_cast<const SignMessageRequest*>(
               &_SignMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  void Swap(SignMessageRequest* other);
  friend void swap(SignMessageRequest& a, SignMessageRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SignMessageRequest* New() const final {
    return CreateMaybeMessage<SignMessageRequest>(NULL);
  }

  SignMessageRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SignMessageRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SignMessageRequest& from);
  void MergeFrom(const SignMessageRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignMessageRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const void* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // string keyId = 2;
  void clear_keyid();
  static const int kKeyIdFieldNumber = 2;
  const ::std::string& keyid() const;
  void set_keyid(const ::std::string& value);
  #if LANG_CXX11
  void set_keyid(::std::string&& value);
  #endif
  void set_keyid(const char* value);
  void set_keyid(const char* value, size_t size);
  ::std::string* mutable_keyid();
  ::std::string* release_keyid();
  void set_allocated_keyid(::std::string* keyid);

  // .Catalyst.Protocol.Common.SigningContext signingContext = 3;
  bool has_signingcontext() const;
  void clear_signingcontext();
  static const int kSigningContextFieldNumber = 3;
  private:
  const ::Catalyst::Protocol::Common::SigningContext& _internal_signingcontext() const;
  public:
  const ::Catalyst::Protocol::Common::SigningContext& signingcontext() const;
  ::Catalyst::Protocol::Common::SigningContext* release_signingcontext();
  ::Catalyst::Protocol::Common::SigningContext* mutable_signingcontext();
  void set_allocated_signingcontext(::Catalyst::Protocol::Common::SigningContext* signingcontext);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SignMessageRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::internal::ArenaStringPtr keyid_;
  ::Catalyst::Protocol::Common::SigningContext* signingcontext_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SignMessageResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SignMessageResponse) */ {
 public:
  SignMessageResponse();
  virtual ~SignMessageResponse();

  SignMessageResponse(const SignMessageResponse& from);

  inline SignMessageResponse& operator=(const SignMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SignMessageResponse(SignMessageResponse&& from) noexcept
    : SignMessageResponse() {
    *this = ::std::move(from);
  }

  inline SignMessageResponse& operator=(SignMessageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SignMessageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignMessageResponse* internal_default_instance() {
    return reinterpret_cast<const SignMessageResponse*>(
               &_SignMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  void Swap(SignMessageResponse* other);
  friend void swap(SignMessageResponse& a, SignMessageResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SignMessageResponse* New() const final {
    return CreateMaybeMessage<SignMessageResponse>(NULL);
  }

  SignMessageResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SignMessageResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SignMessageResponse& from);
  void MergeFrom(const SignMessageResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignMessageResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes signature = 1;
  void clear_signature();
  static const int kSignatureFieldNumber = 1;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // bytes publicKey = 2;
  void clear_publickey();
  static const int kPublicKeyFieldNumber = 2;
  const ::std::string& publickey() const;
  void set_publickey(const ::std::string& value);
  #if LANG_CXX11
  void set_publickey(::std::string&& value);
  #endif
  void set_publickey(const char* value);
  void set_publickey(const void* value, size_t size);
  ::std::string* mutable_publickey();
  ::std::string* release_publickey();
  void set_allocated_publickey(::std::string* publickey);

  // bytes originalMessage = 3;
  void clear_originalmessage();
  static const int kOriginalMessageFieldNumber = 3;
  const ::std::string& originalmessage() const;
  void set_originalmessage(const ::std::string& value);
  #if LANG_CXX11
  void set_originalmessage(::std::string&& value);
  #endif
  void set_originalmessage(const char* value);
  void set_originalmessage(const void* value, size_t size);
  ::std::string* mutable_originalmessage();
  ::std::string* release_originalmessage();
  void set_allocated_originalmessage(::std::string* originalmessage);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SignMessageResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::internal::ArenaStringPtr publickey_;
  ::google::protobuf::internal::ArenaStringPtr originalmessage_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VerifyMessageRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest) */ {
 public:
  VerifyMessageRequest();
  virtual ~VerifyMessageRequest();

  VerifyMessageRequest(const VerifyMessageRequest& from);

  inline VerifyMessageRequest& operator=(const VerifyMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VerifyMessageRequest(VerifyMessageRequest&& from) noexcept
    : VerifyMessageRequest() {
    *this = ::std::move(from);
  }

  inline VerifyMessageRequest& operator=(VerifyMessageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VerifyMessageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerifyMessageRequest* internal_default_instance() {
    return reinterpret_cast<const VerifyMessageRequest*>(
               &_VerifyMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  void Swap(VerifyMessageRequest* other);
  friend void swap(VerifyMessageRequest& a, VerifyMessageRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VerifyMessageRequest* New() const final {
    return CreateMaybeMessage<VerifyMessageRequest>(NULL);
  }

  VerifyMessageRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VerifyMessageRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VerifyMessageRequest& from);
  void MergeFrom(const VerifyMessageRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyMessageRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes signature = 1;
  void clear_signature();
  static const int kSignatureFieldNumber = 1;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // bytes publicKey = 2;
  void clear_publickey();
  static const int kPublicKeyFieldNumber = 2;
  const ::std::string& publickey() const;
  void set_publickey(const ::std::string& value);
  #if LANG_CXX11
  void set_publickey(::std::string&& value);
  #endif
  void set_publickey(const char* value);
  void set_publickey(const void* value, size_t size);
  ::std::string* mutable_publickey();
  ::std::string* release_publickey();
  void set_allocated_publickey(::std::string* publickey);

  // bytes message = 3;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const void* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // .Catalyst.Protocol.Common.SigningContext signingContext = 4;
  bool has_signingcontext() const;
  void clear_signingcontext();
  static const int kSigningContextFieldNumber = 4;
  private:
  const ::Catalyst::Protocol::Common::SigningContext& _internal_signingcontext() const;
  public:
  const ::Catalyst::Protocol::Common::SigningContext& signingcontext() const;
  ::Catalyst::Protocol::Common::SigningContext* release_signingcontext();
  ::Catalyst::Protocol::Common::SigningContext* mutable_signingcontext();
  void set_allocated_signingcontext(::Catalyst::Protocol::Common::SigningContext* signingcontext);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::internal::ArenaStringPtr publickey_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::Catalyst::Protocol::Common::SigningContext* signingcontext_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VerifyMessageResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.VerifyMessageResponse) */ {
 public:
  VerifyMessageResponse();
  virtual ~VerifyMessageResponse();

  VerifyMessageResponse(const VerifyMessageResponse& from);

  inline VerifyMessageResponse& operator=(const VerifyMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VerifyMessageResponse(VerifyMessageResponse&& from) noexcept
    : VerifyMessageResponse() {
    *this = ::std::move(from);
  }

  inline VerifyMessageResponse& operator=(VerifyMessageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VerifyMessageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerifyMessageResponse* internal_default_instance() {
    return reinterpret_cast<const VerifyMessageResponse*>(
               &_VerifyMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  void Swap(VerifyMessageResponse* other);
  friend void swap(VerifyMessageResponse& a, VerifyMessageResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VerifyMessageResponse* New() const final {
    return CreateMaybeMessage<VerifyMessageResponse>(NULL);
  }

  VerifyMessageResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VerifyMessageResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VerifyMessageResponse& from);
  void MergeFrom(const VerifyMessageResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyMessageResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool isSignedByKey = 1;
  void clear_issignedbykey();
  static const int kIsSignedByKeyFieldNumber = 1;
  bool issignedbykey() const;
  void set_issignedbykey(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.VerifyMessageResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool issignedbykey_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServiceStatusRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.ServiceStatusRequest) */ {
 public:
  ServiceStatusRequest();
  virtual ~ServiceStatusRequest();

  ServiceStatusRequest(const ServiceStatusRequest& from);

  inline ServiceStatusRequest& operator=(const ServiceStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServiceStatusRequest(ServiceStatusRequest&& from) noexcept
    : ServiceStatusRequest() {
    *this = ::std::move(from);
  }

  inline ServiceStatusRequest& operator=(ServiceStatusRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceStatusRequest* internal_default_instance() {
    return reinterpret_cast<const ServiceStatusRequest*>(
               &_ServiceStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  void Swap(ServiceStatusRequest* other);
  friend void swap(ServiceStatusRequest& a, ServiceStatusRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServiceStatusRequest* New() const final {
    return CreateMaybeMessage<ServiceStatusRequest>(NULL);
  }

  ServiceStatusRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServiceStatusRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServiceStatusRequest& from);
  void MergeFrom(const ServiceStatusRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceStatusRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.ServiceStatusRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServiceStatusResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse) */ {
 public:
  ServiceStatusResponse();
  virtual ~ServiceStatusResponse();

  ServiceStatusResponse(const ServiceStatusResponse& from);

  inline ServiceStatusResponse& operator=(const ServiceStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServiceStatusResponse(ServiceStatusResponse&& from) noexcept
    : ServiceStatusResponse() {
    *this = ::std::move(from);
  }

  inline ServiceStatusResponse& operator=(ServiceStatusResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceStatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceStatusResponse* internal_default_instance() {
    return reinterpret_cast<const ServiceStatusResponse*>(
               &_ServiceStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  void Swap(ServiceStatusResponse* other);
  friend void swap(ServiceStatusResponse& a, ServiceStatusResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServiceStatusResponse* New() const final {
    return CreateMaybeMessage<ServiceStatusResponse>(NULL);
  }

  ServiceStatusResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServiceStatusResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServiceStatusResponse& from);
  void MergeFrom(const ServiceStatusResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceStatusResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddFileToDfsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest) */ {
 public:
  AddFileToDfsRequest();
  virtual ~AddFileToDfsRequest();

  AddFileToDfsRequest(const AddFileToDfsRequest& from);

  inline AddFileToDfsRequest& operator=(const AddFileToDfsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddFileToDfsRequest(AddFileToDfsRequest&& from) noexcept
    : AddFileToDfsRequest() {
    *this = ::std::move(from);
  }

  inline AddFileToDfsRequest& operator=(AddFileToDfsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddFileToDfsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddFileToDfsRequest* internal_default_instance() {
    return reinterpret_cast<const AddFileToDfsRequest*>(
               &_AddFileToDfsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  void Swap(AddFileToDfsRequest* other);
  friend void swap(AddFileToDfsRequest& a, AddFileToDfsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddFileToDfsRequest* New() const final {
    return CreateMaybeMessage<AddFileToDfsRequest>(NULL);
  }

  AddFileToDfsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddFileToDfsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddFileToDfsRequest& from);
  void MergeFrom(const AddFileToDfsRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFileToDfsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string fileName = 2;
  void clear_filename();
  static const int kFileNameFieldNumber = 2;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // string node = 3;
  void clear_node();
  static const int kNodeFieldNumber = 3;
  const ::std::string& node() const;
  void set_node(const ::std::string& value);
  #if LANG_CXX11
  void set_node(::std::string&& value);
  #endif
  void set_node(const char* value);
  void set_node(const char* value, size_t size);
  ::std::string* mutable_node();
  ::std::string* release_node();
  void set_allocated_node(::std::string* node);

  // uint64 fileSize = 1;
  void clear_filesize();
  static const int kFileSizeFieldNumber = 1;
  ::google::protobuf::uint64 filesize() const;
  void set_filesize(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::internal::ArenaStringPtr node_;
  ::google::protobuf::uint64 filesize_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddFileToDfsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse) */ {
 public:
  AddFileToDfsResponse();
  virtual ~AddFileToDfsResponse();

  AddFileToDfsResponse(const AddFileToDfsResponse& from);

  inline AddFileToDfsResponse& operator=(const AddFileToDfsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddFileToDfsResponse(AddFileToDfsResponse&& from) noexcept
    : AddFileToDfsResponse() {
    *this = ::std::move(from);
  }

  inline AddFileToDfsResponse& operator=(AddFileToDfsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddFileToDfsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddFileToDfsResponse* internal_default_instance() {
    return reinterpret_cast<const AddFileToDfsResponse*>(
               &_AddFileToDfsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  void Swap(AddFileToDfsResponse* other);
  friend void swap(AddFileToDfsResponse& a, AddFileToDfsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddFileToDfsResponse* New() const final {
    return CreateMaybeMessage<AddFileToDfsResponse>(NULL);
  }

  AddFileToDfsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddFileToDfsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddFileToDfsResponse& from);
  void MergeFrom(const AddFileToDfsResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFileToDfsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes responseCode = 1;
  void clear_responsecode();
  static const int kResponseCodeFieldNumber = 1;
  const ::std::string& responsecode() const;
  void set_responsecode(const ::std::string& value);
  #if LANG_CXX11
  void set_responsecode(::std::string&& value);
  #endif
  void set_responsecode(const char* value);
  void set_responsecode(const void* value, size_t size);
  ::std::string* mutable_responsecode();
  ::std::string* release_responsecode();
  void set_allocated_responsecode(::std::string* responsecode);

  // string dfsHash = 2;
  void clear_dfshash();
  static const int kDfsHashFieldNumber = 2;
  const ::std::string& dfshash() const;
  void set_dfshash(const ::std::string& value);
  #if LANG_CXX11
  void set_dfshash(::std::string&& value);
  #endif
  void set_dfshash(const char* value);
  void set_dfshash(const char* value, size_t size);
  ::std::string* mutable_dfshash();
  ::std::string* release_dfshash();
  void set_allocated_dfshash(::std::string* dfshash);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr responsecode_;
  ::google::protobuf::internal::ArenaStringPtr dfshash_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransferFileBytesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest) */ {
 public:
  TransferFileBytesRequest();
  virtual ~TransferFileBytesRequest();

  TransferFileBytesRequest(const TransferFileBytesRequest& from);

  inline TransferFileBytesRequest& operator=(const TransferFileBytesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransferFileBytesRequest(TransferFileBytesRequest&& from) noexcept
    : TransferFileBytesRequest() {
    *this = ::std::move(from);
  }

  inline TransferFileBytesRequest& operator=(TransferFileBytesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransferFileBytesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransferFileBytesRequest* internal_default_instance() {
    return reinterpret_cast<const TransferFileBytesRequest*>(
               &_TransferFileBytesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  void Swap(TransferFileBytesRequest* other);
  friend void swap(TransferFileBytesRequest& a, TransferFileBytesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransferFileBytesRequest* New() const final {
    return CreateMaybeMessage<TransferFileBytesRequest>(NULL);
  }

  TransferFileBytesRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TransferFileBytesRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TransferFileBytesRequest& from);
  void MergeFrom(const TransferFileBytesRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferFileBytesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes chunkBytes = 2;
  void clear_chunkbytes();
  static const int kChunkBytesFieldNumber = 2;
  const ::std::string& chunkbytes() const;
  void set_chunkbytes(const ::std::string& value);
  #if LANG_CXX11
  void set_chunkbytes(::std::string&& value);
  #endif
  void set_chunkbytes(const char* value);
  void set_chunkbytes(const void* value, size_t size);
  ::std::string* mutable_chunkbytes();
  ::std::string* release_chunkbytes();
  void set_allocated_chunkbytes(::std::string* chunkbytes);

  // bytes correlationFileName = 3;
  void clear_correlationfilename();
  static const int kCorrelationFileNameFieldNumber = 3;
  const ::std::string& correlationfilename() const;
  void set_correlationfilename(const ::std::string& value);
  #if LANG_CXX11
  void set_correlationfilename(::std::string&& value);
  #endif
  void set_correlationfilename(const char* value);
  void set_correlationfilename(const void* value, size_t size);
  ::std::string* mutable_correlationfilename();
  ::std::string* release_correlationfilename();
  void set_allocated_correlationfilename(::std::string* correlationfilename);

  // uint32 chunkId = 1;
  void clear_chunkid();
  static const int kChunkIdFieldNumber = 1;
  ::google::protobuf::uint32 chunkid() const;
  void set_chunkid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr chunkbytes_;
  ::google::protobuf::internal::ArenaStringPtr correlationfilename_;
  ::google::protobuf::uint32 chunkid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransferFileBytesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse) */ {
 public:
  TransferFileBytesResponse();
  virtual ~TransferFileBytesResponse();

  TransferFileBytesResponse(const TransferFileBytesResponse& from);

  inline TransferFileBytesResponse& operator=(const TransferFileBytesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransferFileBytesResponse(TransferFileBytesResponse&& from) noexcept
    : TransferFileBytesResponse() {
    *this = ::std::move(from);
  }

  inline TransferFileBytesResponse& operator=(TransferFileBytesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransferFileBytesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransferFileBytesResponse* internal_default_instance() {
    return reinterpret_cast<const TransferFileBytesResponse*>(
               &_TransferFileBytesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  void Swap(TransferFileBytesResponse* other);
  friend void swap(TransferFileBytesResponse& a, TransferFileBytesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransferFileBytesResponse* New() const final {
    return CreateMaybeMessage<TransferFileBytesResponse>(NULL);
  }

  TransferFileBytesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TransferFileBytesResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TransferFileBytesResponse& from);
  void MergeFrom(const TransferFileBytesResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferFileBytesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes responseCode = 1;
  void clear_responsecode();
  static const int kResponseCodeFieldNumber = 1;
  const ::std::string& responsecode() const;
  void set_responsecode(const ::std::string& value);
  #if LANG_CXX11
  void set_responsecode(::std::string&& value);
  #endif
  void set_responsecode(const char* value);
  void set_responsecode(const void* value, size_t size);
  ::std::string* mutable_responsecode();
  ::std::string* release_responsecode();
  void set_allocated_responsecode(::std::string* responsecode);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr responsecode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemovePeerRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.RemovePeerRequest) */ {
 public:
  RemovePeerRequest();
  virtual ~RemovePeerRequest();

  RemovePeerRequest(const RemovePeerRequest& from);

  inline RemovePeerRequest& operator=(const RemovePeerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemovePeerRequest(RemovePeerRequest&& from) noexcept
    : RemovePeerRequest() {
    *this = ::std::move(from);
  }

  inline RemovePeerRequest& operator=(RemovePeerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemovePeerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemovePeerRequest* internal_default_instance() {
    return reinterpret_cast<const RemovePeerRequest*>(
               &_RemovePeerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  void Swap(RemovePeerRequest* other);
  friend void swap(RemovePeerRequest& a, RemovePeerRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemovePeerRequest* New() const final {
    return CreateMaybeMessage<RemovePeerRequest>(NULL);
  }

  RemovePeerRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemovePeerRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemovePeerRequest& from);
  void MergeFrom(const RemovePeerRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemovePeerRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes peerIp = 1;
  void clear_peerip();
  static const int kPeerIpFieldNumber = 1;
  const ::std::string& peerip() const;
  void set_peerip(const ::std::string& value);
  #if LANG_CXX11
  void set_peerip(::std::string&& value);
  #endif
  void set_peerip(const char* value);
  void set_peerip(const void* value, size_t size);
  ::std::string* mutable_peerip();
  ::std::string* release_peerip();
  void set_allocated_peerip(::std::string* peerip);

  // bytes publicKey = 2;
  void clear_publickey();
  static const int kPublicKeyFieldNumber = 2;
  const ::std::string& publickey() const;
  void set_publickey(const ::std::string& value);
  #if LANG_CXX11
  void set_publickey(::std::string&& value);
  #endif
  void set_publickey(const char* value);
  void set_publickey(const void* value, size_t size);
  ::std::string* mutable_publickey();
  ::std::string* release_publickey();
  void set_allocated_publickey(::std::string* publickey);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.RemovePeerRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr peerip_;
  ::google::protobuf::internal::ArenaStringPtr publickey_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemovePeerResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.RemovePeerResponse) */ {
 public:
  RemovePeerResponse();
  virtual ~RemovePeerResponse();

  RemovePeerResponse(const RemovePeerResponse& from);

  inline RemovePeerResponse& operator=(const RemovePeerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemovePeerResponse(RemovePeerResponse&& from) noexcept
    : RemovePeerResponse() {
    *this = ::std::move(from);
  }

  inline RemovePeerResponse& operator=(RemovePeerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemovePeerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemovePeerResponse* internal_default_instance() {
    return reinterpret_cast<const RemovePeerResponse*>(
               &_RemovePeerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  void Swap(RemovePeerResponse* other);
  friend void swap(RemovePeerResponse& a, RemovePeerResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemovePeerResponse* New() const final {
    return CreateMaybeMessage<RemovePeerResponse>(NULL);
  }

  RemovePeerResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemovePeerResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemovePeerResponse& from);
  void MergeFrom(const RemovePeerResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemovePeerResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 deletedCount = 1;
  void clear_deletedcount();
  static const int kDeletedCountFieldNumber = 1;
  ::google::protobuf::uint32 deletedcount() const;
  void set_deletedcount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.RemovePeerResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 deletedcount_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPeerCountRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetPeerCountRequest) */ {
 public:
  GetPeerCountRequest();
  virtual ~GetPeerCountRequest();

  GetPeerCountRequest(const GetPeerCountRequest& from);

  inline GetPeerCountRequest& operator=(const GetPeerCountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPeerCountRequest(GetPeerCountRequest&& from) noexcept
    : GetPeerCountRequest() {
    *this = ::std::move(from);
  }

  inline GetPeerCountRequest& operator=(GetPeerCountRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPeerCountRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPeerCountRequest* internal_default_instance() {
    return reinterpret_cast<const GetPeerCountRequest*>(
               &_GetPeerCountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  void Swap(GetPeerCountRequest* other);
  friend void swap(GetPeerCountRequest& a, GetPeerCountRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPeerCountRequest* New() const final {
    return CreateMaybeMessage<GetPeerCountRequest>(NULL);
  }

  GetPeerCountRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetPeerCountRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetPeerCountRequest& from);
  void MergeFrom(const GetPeerCountRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPeerCountRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetPeerCountRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPeerCountResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetPeerCountResponse) */ {
 public:
  GetPeerCountResponse();
  virtual ~GetPeerCountResponse();

  GetPeerCountResponse(const GetPeerCountResponse& from);

  inline GetPeerCountResponse& operator=(const GetPeerCountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPeerCountResponse(GetPeerCountResponse&& from) noexcept
    : GetPeerCountResponse() {
    *this = ::std::move(from);
  }

  inline GetPeerCountResponse& operator=(GetPeerCountResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPeerCountResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPeerCountResponse* internal_default_instance() {
    return reinterpret_cast<const GetPeerCountResponse*>(
               &_GetPeerCountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  void Swap(GetPeerCountResponse* other);
  friend void swap(GetPeerCountResponse& a, GetPeerCountResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPeerCountResponse* New() const final {
    return CreateMaybeMessage<GetPeerCountResponse>(NULL);
  }

  GetPeerCountResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetPeerCountResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetPeerCountResponse& from);
  void MergeFrom(const GetPeerCountResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPeerCountResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 peerCount = 1;
  void clear_peercount();
  static const int kPeerCountFieldNumber = 1;
  ::google::protobuf::int32 peercount() const;
  void set_peercount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetPeerCountResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 peercount_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetFileFromDfsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest) */ {
 public:
  GetFileFromDfsRequest();
  virtual ~GetFileFromDfsRequest();

  GetFileFromDfsRequest(const GetFileFromDfsRequest& from);

  inline GetFileFromDfsRequest& operator=(const GetFileFromDfsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetFileFromDfsRequest(GetFileFromDfsRequest&& from) noexcept
    : GetFileFromDfsRequest() {
    *this = ::std::move(from);
  }

  inline GetFileFromDfsRequest& operator=(GetFileFromDfsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFileFromDfsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFileFromDfsRequest* internal_default_instance() {
    return reinterpret_cast<const GetFileFromDfsRequest*>(
               &_GetFileFromDfsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  void Swap(GetFileFromDfsRequest* other);
  friend void swap(GetFileFromDfsRequest& a, GetFileFromDfsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetFileFromDfsRequest* New() const final {
    return CreateMaybeMessage<GetFileFromDfsRequest>(NULL);
  }

  GetFileFromDfsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetFileFromDfsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetFileFromDfsRequest& from);
  void MergeFrom(const GetFileFromDfsRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFileFromDfsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string dfsHash = 1;
  void clear_dfshash();
  static const int kDfsHashFieldNumber = 1;
  const ::std::string& dfshash() const;
  void set_dfshash(const ::std::string& value);
  #if LANG_CXX11
  void set_dfshash(::std::string&& value);
  #endif
  void set_dfshash(const char* value);
  void set_dfshash(const char* value, size_t size);
  ::std::string* mutable_dfshash();
  ::std::string* release_dfshash();
  void set_allocated_dfshash(::std::string* dfshash);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr dfshash_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetFileFromDfsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse) */ {
 public:
  GetFileFromDfsResponse();
  virtual ~GetFileFromDfsResponse();

  GetFileFromDfsResponse(const GetFileFromDfsResponse& from);

  inline GetFileFromDfsResponse& operator=(const GetFileFromDfsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetFileFromDfsResponse(GetFileFromDfsResponse&& from) noexcept
    : GetFileFromDfsResponse() {
    *this = ::std::move(from);
  }

  inline GetFileFromDfsResponse& operator=(GetFileFromDfsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFileFromDfsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFileFromDfsResponse* internal_default_instance() {
    return reinterpret_cast<const GetFileFromDfsResponse*>(
               &_GetFileFromDfsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  void Swap(GetFileFromDfsResponse* other);
  friend void swap(GetFileFromDfsResponse& a, GetFileFromDfsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetFileFromDfsResponse* New() const final {
    return CreateMaybeMessage<GetFileFromDfsResponse>(NULL);
  }

  GetFileFromDfsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetFileFromDfsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetFileFromDfsResponse& from);
  void MergeFrom(const GetFileFromDfsResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFileFromDfsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes responseCode = 2;
  void clear_responsecode();
  static const int kResponseCodeFieldNumber = 2;
  const ::std::string& responsecode() const;
  void set_responsecode(const ::std::string& value);
  #if LANG_CXX11
  void set_responsecode(::std::string&& value);
  #endif
  void set_responsecode(const char* value);
  void set_responsecode(const void* value, size_t size);
  ::std::string* mutable_responsecode();
  ::std::string* release_responsecode();
  void set_allocated_responsecode(::std::string* responsecode);

  // uint64 fileSize = 1;
  void clear_filesize();
  static const int kFileSizeFieldNumber = 1;
  ::google::protobuf::uint64 filesize() const;
  void set_filesize(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr responsecode_;
  ::google::protobuf::uint64 filesize_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetPeerDataFolderRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest) */ {
 public:
  SetPeerDataFolderRequest();
  virtual ~SetPeerDataFolderRequest();

  SetPeerDataFolderRequest(const SetPeerDataFolderRequest& from);

  inline SetPeerDataFolderRequest& operator=(const SetPeerDataFolderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetPeerDataFolderRequest(SetPeerDataFolderRequest&& from) noexcept
    : SetPeerDataFolderRequest() {
    *this = ::std::move(from);
  }

  inline SetPeerDataFolderRequest& operator=(SetPeerDataFolderRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetPeerDataFolderRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetPeerDataFolderRequest* internal_default_instance() {
    return reinterpret_cast<const SetPeerDataFolderRequest*>(
               &_SetPeerDataFolderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  void Swap(SetPeerDataFolderRequest* other);
  friend void swap(SetPeerDataFolderRequest& a, SetPeerDataFolderRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetPeerDataFolderRequest* New() const final {
    return CreateMaybeMessage<SetPeerDataFolderRequest>(NULL);
  }

  SetPeerDataFolderRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetPeerDataFolderRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetPeerDataFolderRequest& from);
  void MergeFrom(const SetPeerDataFolderRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPeerDataFolderRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string datafolder = 1;
  void clear_datafolder();
  static const int kDatafolderFieldNumber = 1;
  const ::std::string& datafolder() const;
  void set_datafolder(const ::std::string& value);
  #if LANG_CXX11
  void set_datafolder(::std::string&& value);
  #endif
  void set_datafolder(const char* value);
  void set_datafolder(const char* value, size_t size);
  ::std::string* mutable_datafolder();
  ::std::string* release_datafolder();
  void set_allocated_datafolder(::std::string* datafolder);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr datafolder_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetPeerDataFolderResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderResponse) */ {
 public:
  SetPeerDataFolderResponse();
  virtual ~SetPeerDataFolderResponse();

  SetPeerDataFolderResponse(const SetPeerDataFolderResponse& from);

  inline SetPeerDataFolderResponse& operator=(const SetPeerDataFolderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetPeerDataFolderResponse(SetPeerDataFolderResponse&& from) noexcept
    : SetPeerDataFolderResponse() {
    *this = ::std::move(from);
  }

  inline SetPeerDataFolderResponse& operator=(SetPeerDataFolderResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetPeerDataFolderResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetPeerDataFolderResponse* internal_default_instance() {
    return reinterpret_cast<const SetPeerDataFolderResponse*>(
               &_SetPeerDataFolderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  void Swap(SetPeerDataFolderResponse* other);
  friend void swap(SetPeerDataFolderResponse& a, SetPeerDataFolderResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetPeerDataFolderResponse* New() const final {
    return CreateMaybeMessage<SetPeerDataFolderResponse>(NULL);
  }

  SetPeerDataFolderResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetPeerDataFolderResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetPeerDataFolderResponse& from);
  void MergeFrom(const SetPeerDataFolderResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPeerDataFolderResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool query = 1;
  void clear_query();
  static const int kQueryFieldNumber = 1;
  bool query() const;
  void set_query(bool value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Rpc_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VersionRequest

// bool query = 1;
inline void VersionRequest::clear_query() {
  query_ = false;
}
inline bool VersionRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.VersionRequest.query)
  return query_;
}
inline void VersionRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.VersionRequest.query)
}

// -------------------------------------------------------------------

// VersionResponse

// string version = 1;
inline void VersionResponse::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VersionResponse::version() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.VersionResponse.version)
  return version_.GetNoArena();
}
inline void VersionResponse::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.VersionResponse.version)
}
#if LANG_CXX11
inline void VersionResponse::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.VersionResponse.version)
}
#endif
inline void VersionResponse::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.VersionResponse.version)
}
inline void VersionResponse::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.VersionResponse.version)
}
inline ::std::string* VersionResponse::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.VersionResponse.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VersionResponse::release_version() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.VersionResponse.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VersionResponse::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.VersionResponse.version)
}

// -------------------------------------------------------------------

// GetInfoRequest

// bool query = 1;
inline void GetInfoRequest::clear_query() {
  query_ = false;
}
inline bool GetInfoRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetInfoRequest.query)
  return query_;
}
inline void GetInfoRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetInfoRequest.query)
}

// -------------------------------------------------------------------

// GetInfoResponse

// string query = 1;
inline void GetInfoResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetInfoResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetInfoResponse.query)
  return query_.GetNoArena();
}
inline void GetInfoResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetInfoResponse.query)
}
#if LANG_CXX11
inline void GetInfoResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.GetInfoResponse.query)
}
#endif
inline void GetInfoResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.GetInfoResponse.query)
}
inline void GetInfoResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.GetInfoResponse.query)
}
inline ::std::string* GetInfoResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetInfoResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetInfoResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetInfoResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetInfoResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetInfoResponse.query)
}

// -------------------------------------------------------------------

// CreateWalletRequest

// bool query = 1;
inline void CreateWalletRequest::clear_query() {
  query_ = false;
}
inline bool CreateWalletRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.CreateWalletRequest.query)
  return query_;
}
inline void CreateWalletRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.CreateWalletRequest.query)
}

// -------------------------------------------------------------------

// CreateWalletResponse

// string query = 1;
inline void CreateWalletResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateWalletResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.CreateWalletResponse.query)
  return query_.GetNoArena();
}
inline void CreateWalletResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.CreateWalletResponse.query)
}
#if LANG_CXX11
inline void CreateWalletResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.CreateWalletResponse.query)
}
#endif
inline void CreateWalletResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.CreateWalletResponse.query)
}
inline void CreateWalletResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.CreateWalletResponse.query)
}
inline ::std::string* CreateWalletResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.CreateWalletResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateWalletResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.CreateWalletResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateWalletResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.CreateWalletResponse.query)
}

// -------------------------------------------------------------------

// ListWalletRequest

// bool query = 1;
inline void ListWalletRequest::clear_query() {
  query_ = false;
}
inline bool ListWalletRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.ListWalletRequest.query)
  return query_;
}
inline void ListWalletRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.ListWalletRequest.query)
}

// -------------------------------------------------------------------

// ListWalletResponse

// string query = 1;
inline void ListWalletResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListWalletResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.ListWalletResponse.query)
  return query_.GetNoArena();
}
inline void ListWalletResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.ListWalletResponse.query)
}
#if LANG_CXX11
inline void ListWalletResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.ListWalletResponse.query)
}
#endif
inline void ListWalletResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.ListWalletResponse.query)
}
inline void ListWalletResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.ListWalletResponse.query)
}
inline ::std::string* ListWalletResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.ListWalletResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListWalletResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.ListWalletResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListWalletResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.ListWalletResponse.query)
}

// -------------------------------------------------------------------

// CreateAddressRequest

// bool query = 1;
inline void CreateAddressRequest::clear_query() {
  query_ = false;
}
inline bool CreateAddressRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.CreateAddressRequest.query)
  return query_;
}
inline void CreateAddressRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.CreateAddressRequest.query)
}

// -------------------------------------------------------------------

// CreateAddressResponse

// string query = 1;
inline void CreateAddressResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateAddressResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.CreateAddressResponse.query)
  return query_.GetNoArena();
}
inline void CreateAddressResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.CreateAddressResponse.query)
}
#if LANG_CXX11
inline void CreateAddressResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.CreateAddressResponse.query)
}
#endif
inline void CreateAddressResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.CreateAddressResponse.query)
}
inline void CreateAddressResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.CreateAddressResponse.query)
}
inline ::std::string* CreateAddressResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.CreateAddressResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateAddressResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.CreateAddressResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateAddressResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.CreateAddressResponse.query)
}

// -------------------------------------------------------------------

// GetAddressRequest

// bool query = 1;
inline void GetAddressRequest::clear_query() {
  query_ = false;
}
inline bool GetAddressRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetAddressRequest.query)
  return query_;
}
inline void GetAddressRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetAddressRequest.query)
}

// -------------------------------------------------------------------

// GetAddressResponse

// string query = 1;
inline void GetAddressResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetAddressResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetAddressResponse.query)
  return query_.GetNoArena();
}
inline void GetAddressResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetAddressResponse.query)
}
#if LANG_CXX11
inline void GetAddressResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.GetAddressResponse.query)
}
#endif
inline void GetAddressResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.GetAddressResponse.query)
}
inline void GetAddressResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.GetAddressResponse.query)
}
inline ::std::string* GetAddressResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetAddressResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetAddressResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetAddressResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetAddressResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetAddressResponse.query)
}

// -------------------------------------------------------------------

// ListAddressRequest

// bool query = 1;
inline void ListAddressRequest::clear_query() {
  query_ = false;
}
inline bool ListAddressRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.ListAddressRequest.query)
  return query_;
}
inline void ListAddressRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.ListAddressRequest.query)
}

// -------------------------------------------------------------------

// ListAddressResponse

// string query = 1;
inline void ListAddressResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListAddressResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.ListAddressResponse.query)
  return query_.GetNoArena();
}
inline void ListAddressResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.ListAddressResponse.query)
}
#if LANG_CXX11
inline void ListAddressResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.ListAddressResponse.query)
}
#endif
inline void ListAddressResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.ListAddressResponse.query)
}
inline void ListAddressResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.ListAddressResponse.query)
}
inline ::std::string* ListAddressResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.ListAddressResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListAddressResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.ListAddressResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListAddressResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.ListAddressResponse.query)
}

// -------------------------------------------------------------------

// ValidateAddressRequest

// bool query = 1;
inline void ValidateAddressRequest::clear_query() {
  query_ = false;
}
inline bool ValidateAddressRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.ValidateAddressRequest.query)
  return query_;
}
inline void ValidateAddressRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.ValidateAddressRequest.query)
}

// -------------------------------------------------------------------

// ValidateAddressResponse

// string query = 1;
inline void ValidateAddressResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ValidateAddressResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse.query)
  return query_.GetNoArena();
}
inline void ValidateAddressResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse.query)
}
#if LANG_CXX11
inline void ValidateAddressResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse.query)
}
#endif
inline void ValidateAddressResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse.query)
}
inline void ValidateAddressResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse.query)
}
inline ::std::string* ValidateAddressResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ValidateAddressResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ValidateAddressResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.ValidateAddressResponse.query)
}

// -------------------------------------------------------------------

// GetBalanceRequest

// bool query = 1;
inline void GetBalanceRequest::clear_query() {
  query_ = false;
}
inline bool GetBalanceRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetBalanceRequest.query)
  return query_;
}
inline void GetBalanceRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetBalanceRequest.query)
}

// -------------------------------------------------------------------

// GetBalanceResponse

// string query = 1;
inline void GetBalanceResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetBalanceResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetBalanceResponse.query)
  return query_.GetNoArena();
}
inline void GetBalanceResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetBalanceResponse.query)
}
#if LANG_CXX11
inline void GetBalanceResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.GetBalanceResponse.query)
}
#endif
inline void GetBalanceResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.GetBalanceResponse.query)
}
inline void GetBalanceResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.GetBalanceResponse.query)
}
inline ::std::string* GetBalanceResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetBalanceResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetBalanceResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetBalanceResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetBalanceResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetBalanceResponse.query)
}

// -------------------------------------------------------------------

// CreateRawTransactionRequest

// bool query = 1;
inline void CreateRawTransactionRequest::clear_query() {
  query_ = false;
}
inline bool CreateRawTransactionRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest.query)
  return query_;
}
inline void CreateRawTransactionRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.CreateRawTransactionRequest.query)
}

// -------------------------------------------------------------------

// CreateRawTransactionResponse

// string query = 1;
inline void CreateRawTransactionResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateRawTransactionResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse.query)
  return query_.GetNoArena();
}
inline void CreateRawTransactionResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse.query)
}
#if LANG_CXX11
inline void CreateRawTransactionResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse.query)
}
#endif
inline void CreateRawTransactionResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse.query)
}
inline void CreateRawTransactionResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse.query)
}
inline ::std::string* CreateRawTransactionResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateRawTransactionResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateRawTransactionResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.CreateRawTransactionResponse.query)
}

// -------------------------------------------------------------------

// SignRawTransactionRequest

// bool query = 1;
inline void SignRawTransactionRequest::clear_query() {
  query_ = false;
}
inline bool SignRawTransactionRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest.query)
  return query_;
}
inline void SignRawTransactionRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SignRawTransactionRequest.query)
}

// -------------------------------------------------------------------

// SignRawTransactionResponse

// string query = 1;
inline void SignRawTransactionResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignRawTransactionResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse.query)
  return query_.GetNoArena();
}
inline void SignRawTransactionResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse.query)
}
#if LANG_CXX11
inline void SignRawTransactionResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse.query)
}
#endif
inline void SignRawTransactionResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse.query)
}
inline void SignRawTransactionResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse.query)
}
inline ::std::string* SignRawTransactionResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignRawTransactionResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignRawTransactionResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SignRawTransactionResponse.query)
}

// -------------------------------------------------------------------

// DecodeRawTransactionRequest

// bool query = 1;
inline void DecodeRawTransactionRequest::clear_query() {
  query_ = false;
}
inline bool DecodeRawTransactionRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest.query)
  return query_;
}
inline void DecodeRawTransactionRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionRequest.query)
}

// -------------------------------------------------------------------

// DecodeRawTransactionResponse

// string query = 1;
inline void DecodeRawTransactionResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DecodeRawTransactionResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse.query)
  return query_.GetNoArena();
}
inline void DecodeRawTransactionResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse.query)
}
#if LANG_CXX11
inline void DecodeRawTransactionResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse.query)
}
#endif
inline void DecodeRawTransactionResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse.query)
}
inline void DecodeRawTransactionResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse.query)
}
inline ::std::string* DecodeRawTransactionResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DecodeRawTransactionResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DecodeRawTransactionResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.DecodeRawTransactionResponse.query)
}

// -------------------------------------------------------------------

// BroadcastRawTransactionRequest

// .Catalyst.Protocol.Transaction.TransactionBroadcast transaction = 1;
inline bool BroadcastRawTransactionRequest::has_transaction() const {
  return this != internal_default_instance() && transaction_ != NULL;
}
inline const ::Catalyst::Protocol::Transaction::TransactionBroadcast& BroadcastRawTransactionRequest::_internal_transaction() const {
  return *transaction_;
}
inline const ::Catalyst::Protocol::Transaction::TransactionBroadcast& BroadcastRawTransactionRequest::transaction() const {
  const ::Catalyst::Protocol::Transaction::TransactionBroadcast* p = transaction_;
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest.transaction)
  return p != NULL ? *p : *reinterpret_cast<const ::Catalyst::Protocol::Transaction::TransactionBroadcast*>(
      &::Catalyst::Protocol::Transaction::_TransactionBroadcast_default_instance_);
}
inline ::Catalyst::Protocol::Transaction::TransactionBroadcast* BroadcastRawTransactionRequest::release_transaction() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest.transaction)
  
  ::Catalyst::Protocol::Transaction::TransactionBroadcast* temp = transaction_;
  transaction_ = NULL;
  return temp;
}
inline ::Catalyst::Protocol::Transaction::TransactionBroadcast* BroadcastRawTransactionRequest::mutable_transaction() {
  
  if (transaction_ == NULL) {
    auto* p = CreateMaybeMessage<::Catalyst::Protocol::Transaction::TransactionBroadcast>(GetArenaNoVirtual());
    transaction_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest.transaction)
  return transaction_;
}
inline void BroadcastRawTransactionRequest::set_allocated_transaction(::Catalyst::Protocol::Transaction::TransactionBroadcast* transaction) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(transaction_);
  }
  if (transaction) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      transaction = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transaction, submessage_arena);
    }
    
  } else {
    
  }
  transaction_ = transaction;
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionRequest.transaction)
}

// -------------------------------------------------------------------

// BroadcastRawTransactionResponse

// .Catalyst.Protocol.Rpc.Node.ResponseCode responseCode = 1;
inline void BroadcastRawTransactionResponse::clear_responsecode() {
  responsecode_ = 0;
}
inline ::Catalyst::Protocol::Rpc::Node::ResponseCode BroadcastRawTransactionResponse::responsecode() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse.responseCode)
  return static_cast< ::Catalyst::Protocol::Rpc::Node::ResponseCode >(responsecode_);
}
inline void BroadcastRawTransactionResponse::set_responsecode(::Catalyst::Protocol::Rpc::Node::ResponseCode value) {
  
  responsecode_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.BroadcastRawTransactionResponse.responseCode)
}

// -------------------------------------------------------------------

// SendToRequest

// bool query = 1;
inline void SendToRequest::clear_query() {
  query_ = false;
}
inline bool SendToRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SendToRequest.query)
  return query_;
}
inline void SendToRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SendToRequest.query)
}

// -------------------------------------------------------------------

// SendToResponse

// string query = 1;
inline void SendToResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendToResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SendToResponse.query)
  return query_.GetNoArena();
}
inline void SendToResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SendToResponse.query)
}
#if LANG_CXX11
inline void SendToResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SendToResponse.query)
}
#endif
inline void SendToResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SendToResponse.query)
}
inline void SendToResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SendToResponse.query)
}
inline ::std::string* SendToResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SendToResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendToResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SendToResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendToResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SendToResponse.query)
}

// -------------------------------------------------------------------

// SendToFromRequest

// bool query = 1;
inline void SendToFromRequest::clear_query() {
  query_ = false;
}
inline bool SendToFromRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SendToFromRequest.query)
  return query_;
}
inline void SendToFromRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SendToFromRequest.query)
}

// -------------------------------------------------------------------

// SendToFromResponse

// string query = 1;
inline void SendToFromResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendToFromResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SendToFromResponse.query)
  return query_.GetNoArena();
}
inline void SendToFromResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SendToFromResponse.query)
}
#if LANG_CXX11
inline void SendToFromResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SendToFromResponse.query)
}
#endif
inline void SendToFromResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SendToFromResponse.query)
}
inline void SendToFromResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SendToFromResponse.query)
}
inline ::std::string* SendToFromResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SendToFromResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendToFromResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SendToFromResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendToFromResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SendToFromResponse.query)
}

// -------------------------------------------------------------------

// SendManyRequest

// bool query = 1;
inline void SendManyRequest::clear_query() {
  query_ = false;
}
inline bool SendManyRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SendManyRequest.query)
  return query_;
}
inline void SendManyRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SendManyRequest.query)
}

// -------------------------------------------------------------------

// SendManyResponse

// string query = 1;
inline void SendManyResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendManyResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SendManyResponse.query)
  return query_.GetNoArena();
}
inline void SendManyResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SendManyResponse.query)
}
#if LANG_CXX11
inline void SendManyResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SendManyResponse.query)
}
#endif
inline void SendManyResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SendManyResponse.query)
}
inline void SendManyResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SendManyResponse.query)
}
inline ::std::string* SendManyResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SendManyResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendManyResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SendManyResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendManyResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SendManyResponse.query)
}

// -------------------------------------------------------------------

// SendFromManyRequest

// bool query = 1;
inline void SendFromManyRequest::clear_query() {
  query_ = false;
}
inline bool SendFromManyRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SendFromManyRequest.query)
  return query_;
}
inline void SendFromManyRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SendFromManyRequest.query)
}

// -------------------------------------------------------------------

// SendFromManyResponse

// string query = 1;
inline void SendFromManyResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendFromManyResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SendFromManyResponse.query)
  return query_.GetNoArena();
}
inline void SendFromManyResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SendFromManyResponse.query)
}
#if LANG_CXX11
inline void SendFromManyResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SendFromManyResponse.query)
}
#endif
inline void SendFromManyResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SendFromManyResponse.query)
}
inline void SendFromManyResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SendFromManyResponse.query)
}
inline ::std::string* SendFromManyResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SendFromManyResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendFromManyResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SendFromManyResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendFromManyResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SendFromManyResponse.query)
}

// -------------------------------------------------------------------

// AddNodeRequest

// bool query = 1;
inline void AddNodeRequest::clear_query() {
  query_ = false;
}
inline bool AddNodeRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.AddNodeRequest.query)
  return query_;
}
inline void AddNodeRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.AddNodeRequest.query)
}

// -------------------------------------------------------------------

// AddNodeResponse

// string query = 1;
inline void AddNodeResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddNodeResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.AddNodeResponse.query)
  return query_.GetNoArena();
}
inline void AddNodeResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.AddNodeResponse.query)
}
#if LANG_CXX11
inline void AddNodeResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.AddNodeResponse.query)
}
#endif
inline void AddNodeResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.AddNodeResponse.query)
}
inline void AddNodeResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.AddNodeResponse.query)
}
inline ::std::string* AddNodeResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.AddNodeResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddNodeResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.AddNodeResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddNodeResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.AddNodeResponse.query)
}

// -------------------------------------------------------------------

// GetPeerListRequest

// -------------------------------------------------------------------

// GetPeerListResponse

// repeated .Catalyst.Protocol.Common.PeerId Peers = 1;
inline int GetPeerListResponse::peers_size() const {
  return peers_.size();
}
inline ::Catalyst::Protocol::Common::PeerId* GetPeerListResponse::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetPeerListResponse.Peers)
  return peers_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Common::PeerId >*
GetPeerListResponse::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:Catalyst.Protocol.Rpc.Node.GetPeerListResponse.Peers)
  return &peers_;
}
inline const ::Catalyst::Protocol::Common::PeerId& GetPeerListResponse::peers(int index) const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetPeerListResponse.Peers)
  return peers_.Get(index);
}
inline ::Catalyst::Protocol::Common::PeerId* GetPeerListResponse::add_peers() {
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Rpc.Node.GetPeerListResponse.Peers)
  return peers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Common::PeerId >&
GetPeerListResponse::peers() const {
  // @@protoc_insertion_point(field_list:Catalyst.Protocol.Rpc.Node.GetPeerListResponse.Peers)
  return peers_;
}

// -------------------------------------------------------------------

// GetPeerReputationRequest

// bytes publicKey = 1;
inline void GetPeerReputationRequest::clear_publickey() {
  publickey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetPeerReputationRequest::publickey() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.publicKey)
  return publickey_.GetNoArena();
}
inline void GetPeerReputationRequest::set_publickey(const ::std::string& value) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.publicKey)
}
#if LANG_CXX11
inline void GetPeerReputationRequest::set_publickey(::std::string&& value) {
  
  publickey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.publicKey)
}
#endif
inline void GetPeerReputationRequest::set_publickey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.publicKey)
}
inline void GetPeerReputationRequest::set_publickey(const void* value, size_t size) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.publicKey)
}
inline ::std::string* GetPeerReputationRequest::mutable_publickey() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.publicKey)
  return publickey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetPeerReputationRequest::release_publickey() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.publicKey)
  
  return publickey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPeerReputationRequest::set_allocated_publickey(::std::string* publickey) {
  if (publickey != NULL) {
    
  } else {
    
  }
  publickey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publickey);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.publicKey)
}

// bytes ip = 2;
inline void GetPeerReputationRequest::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetPeerReputationRequest::ip() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.ip)
  return ip_.GetNoArena();
}
inline void GetPeerReputationRequest::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.ip)
}
#if LANG_CXX11
inline void GetPeerReputationRequest::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.ip)
}
#endif
inline void GetPeerReputationRequest::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.ip)
}
inline void GetPeerReputationRequest::set_ip(const void* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.ip)
}
inline ::std::string* GetPeerReputationRequest::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetPeerReputationRequest::release_ip() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPeerReputationRequest::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetPeerReputationRequest.ip)
}

// -------------------------------------------------------------------

// GetPeerReputationResponse

// int32 reputation = 1;
inline void GetPeerReputationResponse::clear_reputation() {
  reputation_ = 0;
}
inline ::google::protobuf::int32 GetPeerReputationResponse::reputation() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetPeerReputationResponse.reputation)
  return reputation_;
}
inline void GetPeerReputationResponse::set_reputation(::google::protobuf::int32 value) {
  
  reputation_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetPeerReputationResponse.reputation)
}

// -------------------------------------------------------------------

// SetPeerBlackListRequest

// bytes publicKey = 1;
inline void SetPeerBlackListRequest::clear_publickey() {
  publickey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetPeerBlackListRequest::publickey() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SetPeerBlackListRequest.publicKey)
  return publickey_.GetNoArena();
}
inline void SetPeerBlackListRequest::set_publickey(const ::std::string& value) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SetPeerBlackListRequest.publicKey)
}
#if LANG_CXX11
inline void SetPeerBlackListRequest::set_publickey(::std::string&& value) {
  
  publickey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SetPeerBlackListRequest.publicKey)
}
#endif
inline void SetPeerBlackListRequest::set_publickey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SetPeerBlackListRequest.publicKey)
}
inline void SetPeerBlackListRequest::set_publickey(const void* value, size_t size) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SetPeerBlackListRequest.publicKey)
}
inline ::std::string* SetPeerBlackListRequest::mutable_publickey() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SetPeerBlackListRequest.publicKey)
  return publickey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetPeerBlackListRequest::release_publickey() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SetPeerBlackListRequest.publicKey)
  
  return publickey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetPeerBlackListRequest::set_allocated_publickey(::std::string* publickey) {
  if (publickey != NULL) {
    
  } else {
    
  }
  publickey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publickey);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SetPeerBlackListRequest.publicKey)
}

// bytes ip = 2;
inline void SetPeerBlackListRequest::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetPeerBlackListRequest::ip() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SetPeerBlackListRequest.ip)
  return ip_.GetNoArena();
}
inline void SetPeerBlackListRequest::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SetPeerBlackListRequest.ip)
}
#if LANG_CXX11
inline void SetPeerBlackListRequest::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SetPeerBlackListRequest.ip)
}
#endif
inline void SetPeerBlackListRequest::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SetPeerBlackListRequest.ip)
}
inline void SetPeerBlackListRequest::set_ip(const void* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SetPeerBlackListRequest.ip)
}
inline ::std::string* SetPeerBlackListRequest::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SetPeerBlackListRequest.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetPeerBlackListRequest::release_ip() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SetPeerBlackListRequest.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetPeerBlackListRequest::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SetPeerBlackListRequest.ip)
}

// bool blacklist = 3;
inline void SetPeerBlackListRequest::clear_blacklist() {
  blacklist_ = false;
}
inline bool SetPeerBlackListRequest::blacklist() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SetPeerBlackListRequest.blacklist)
  return blacklist_;
}
inline void SetPeerBlackListRequest::set_blacklist(bool value) {
  
  blacklist_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SetPeerBlackListRequest.blacklist)
}

// -------------------------------------------------------------------

// SetPeerBlackListResponse

// bytes publicKey = 1;
inline void SetPeerBlackListResponse::clear_publickey() {
  publickey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetPeerBlackListResponse::publickey() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SetPeerBlackListResponse.publicKey)
  return publickey_.GetNoArena();
}
inline void SetPeerBlackListResponse::set_publickey(const ::std::string& value) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SetPeerBlackListResponse.publicKey)
}
#if LANG_CXX11
inline void SetPeerBlackListResponse::set_publickey(::std::string&& value) {
  
  publickey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SetPeerBlackListResponse.publicKey)
}
#endif
inline void SetPeerBlackListResponse::set_publickey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SetPeerBlackListResponse.publicKey)
}
inline void SetPeerBlackListResponse::set_publickey(const void* value, size_t size) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SetPeerBlackListResponse.publicKey)
}
inline ::std::string* SetPeerBlackListResponse::mutable_publickey() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SetPeerBlackListResponse.publicKey)
  return publickey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetPeerBlackListResponse::release_publickey() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SetPeerBlackListResponse.publicKey)
  
  return publickey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetPeerBlackListResponse::set_allocated_publickey(::std::string* publickey) {
  if (publickey != NULL) {
    
  } else {
    
  }
  publickey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publickey);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SetPeerBlackListResponse.publicKey)
}

// bytes ip = 2;
inline void SetPeerBlackListResponse::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetPeerBlackListResponse::ip() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SetPeerBlackListResponse.ip)
  return ip_.GetNoArena();
}
inline void SetPeerBlackListResponse::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SetPeerBlackListResponse.ip)
}
#if LANG_CXX11
inline void SetPeerBlackListResponse::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SetPeerBlackListResponse.ip)
}
#endif
inline void SetPeerBlackListResponse::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SetPeerBlackListResponse.ip)
}
inline void SetPeerBlackListResponse::set_ip(const void* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SetPeerBlackListResponse.ip)
}
inline ::std::string* SetPeerBlackListResponse::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SetPeerBlackListResponse.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetPeerBlackListResponse::release_ip() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SetPeerBlackListResponse.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetPeerBlackListResponse::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SetPeerBlackListResponse.ip)
}

// bool blacklist = 3;
inline void SetPeerBlackListResponse::clear_blacklist() {
  blacklist_ = false;
}
inline bool SetPeerBlackListResponse::blacklist() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SetPeerBlackListResponse.blacklist)
  return blacklist_;
}
inline void SetPeerBlackListResponse::set_blacklist(bool value) {
  
  blacklist_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SetPeerBlackListResponse.blacklist)
}

// -------------------------------------------------------------------

// GetPeerInfoRequest

// bytes publicKey = 1;
inline void GetPeerInfoRequest::clear_publickey() {
  publickey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetPeerInfoRequest::publickey() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.publicKey)
  return publickey_.GetNoArena();
}
inline void GetPeerInfoRequest::set_publickey(const ::std::string& value) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.publicKey)
}
#if LANG_CXX11
inline void GetPeerInfoRequest::set_publickey(::std::string&& value) {
  
  publickey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.publicKey)
}
#endif
inline void GetPeerInfoRequest::set_publickey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.publicKey)
}
inline void GetPeerInfoRequest::set_publickey(const void* value, size_t size) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.publicKey)
}
inline ::std::string* GetPeerInfoRequest::mutable_publickey() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.publicKey)
  return publickey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetPeerInfoRequest::release_publickey() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.publicKey)
  
  return publickey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPeerInfoRequest::set_allocated_publickey(::std::string* publickey) {
  if (publickey != NULL) {
    
  } else {
    
  }
  publickey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publickey);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.publicKey)
}

// bytes ip = 2;
inline void GetPeerInfoRequest::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetPeerInfoRequest::ip() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.ip)
  return ip_.GetNoArena();
}
inline void GetPeerInfoRequest::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.ip)
}
#if LANG_CXX11
inline void GetPeerInfoRequest::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.ip)
}
#endif
inline void GetPeerInfoRequest::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.ip)
}
inline void GetPeerInfoRequest::set_ip(const void* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.ip)
}
inline ::std::string* GetPeerInfoRequest::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetPeerInfoRequest::release_ip() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPeerInfoRequest::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetPeerInfoRequest.ip)
}

// -------------------------------------------------------------------

// GetPeerInfoResponse

// repeated .Catalyst.Protocol.Common.PeerInfo PeerInfo = 1;
inline int GetPeerInfoResponse::peerinfo_size() const {
  return peerinfo_.size();
}
inline ::Catalyst::Protocol::Common::PeerInfo* GetPeerInfoResponse::mutable_peerinfo(int index) {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse.PeerInfo)
  return peerinfo_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Common::PeerInfo >*
GetPeerInfoResponse::mutable_peerinfo() {
  // @@protoc_insertion_point(field_mutable_list:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse.PeerInfo)
  return &peerinfo_;
}
inline const ::Catalyst::Protocol::Common::PeerInfo& GetPeerInfoResponse::peerinfo(int index) const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse.PeerInfo)
  return peerinfo_.Get(index);
}
inline ::Catalyst::Protocol::Common::PeerInfo* GetPeerInfoResponse::add_peerinfo() {
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse.PeerInfo)
  return peerinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Common::PeerInfo >&
GetPeerInfoResponse::peerinfo() const {
  // @@protoc_insertion_point(field_list:Catalyst.Protocol.Rpc.Node.GetPeerInfoResponse.PeerInfo)
  return peerinfo_;
}

// -------------------------------------------------------------------

// GetConnectionCountRequest

// bool query = 1;
inline void GetConnectionCountRequest::clear_query() {
  query_ = false;
}
inline bool GetConnectionCountRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest.query)
  return query_;
}
inline void GetConnectionCountRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetConnectionCountRequest.query)
}

// -------------------------------------------------------------------

// GetConnectionCountResponse

// string query = 1;
inline void GetConnectionCountResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetConnectionCountResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse.query)
  return query_.GetNoArena();
}
inline void GetConnectionCountResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse.query)
}
#if LANG_CXX11
inline void GetConnectionCountResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse.query)
}
#endif
inline void GetConnectionCountResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse.query)
}
inline void GetConnectionCountResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse.query)
}
inline ::std::string* GetConnectionCountResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetConnectionCountResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetConnectionCountResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetConnectionCountResponse.query)
}

// -------------------------------------------------------------------

// GetDeltaRequest

// bytes DeltaDfsHash = 1;
inline void GetDeltaRequest::clear_deltadfshash() {
  deltadfshash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetDeltaRequest::deltadfshash() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetDeltaRequest.DeltaDfsHash)
  return deltadfshash_.GetNoArena();
}
inline void GetDeltaRequest::set_deltadfshash(const ::std::string& value) {
  
  deltadfshash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetDeltaRequest.DeltaDfsHash)
}
#if LANG_CXX11
inline void GetDeltaRequest::set_deltadfshash(::std::string&& value) {
  
  deltadfshash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.GetDeltaRequest.DeltaDfsHash)
}
#endif
inline void GetDeltaRequest::set_deltadfshash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  deltadfshash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.GetDeltaRequest.DeltaDfsHash)
}
inline void GetDeltaRequest::set_deltadfshash(const void* value, size_t size) {
  
  deltadfshash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.GetDeltaRequest.DeltaDfsHash)
}
inline ::std::string* GetDeltaRequest::mutable_deltadfshash() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetDeltaRequest.DeltaDfsHash)
  return deltadfshash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetDeltaRequest::release_deltadfshash() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetDeltaRequest.DeltaDfsHash)
  
  return deltadfshash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetDeltaRequest::set_allocated_deltadfshash(::std::string* deltadfshash) {
  if (deltadfshash != NULL) {
    
  } else {
    
  }
  deltadfshash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deltadfshash);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetDeltaRequest.DeltaDfsHash)
}

// -------------------------------------------------------------------

// GetDeltaResponse

// .Catalyst.Protocol.Deltas.Delta Delta = 1;
inline bool GetDeltaResponse::has_delta() const {
  return this != internal_default_instance() && delta_ != NULL;
}
inline const ::Catalyst::Protocol::Deltas::Delta& GetDeltaResponse::_internal_delta() const {
  return *delta_;
}
inline const ::Catalyst::Protocol::Deltas::Delta& GetDeltaResponse::delta() const {
  const ::Catalyst::Protocol::Deltas::Delta* p = delta_;
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetDeltaResponse.Delta)
  return p != NULL ? *p : *reinterpret_cast<const ::Catalyst::Protocol::Deltas::Delta*>(
      &::Catalyst::Protocol::Deltas::_Delta_default_instance_);
}
inline ::Catalyst::Protocol::Deltas::Delta* GetDeltaResponse::release_delta() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetDeltaResponse.Delta)
  
  ::Catalyst::Protocol::Deltas::Delta* temp = delta_;
  delta_ = NULL;
  return temp;
}
inline ::Catalyst::Protocol::Deltas::Delta* GetDeltaResponse::mutable_delta() {
  
  if (delta_ == NULL) {
    auto* p = CreateMaybeMessage<::Catalyst::Protocol::Deltas::Delta>(GetArenaNoVirtual());
    delta_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetDeltaResponse.Delta)
  return delta_;
}
inline void GetDeltaResponse::set_allocated_delta(::Catalyst::Protocol::Deltas::Delta* delta) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(delta_);
  }
  if (delta) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      delta = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, delta, submessage_arena);
    }
    
  } else {
    
  }
  delta_ = delta;
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetDeltaResponse.Delta)
}

// -------------------------------------------------------------------

// GetMempoolRequest

// bool query = 1;
inline void GetMempoolRequest::clear_query() {
  query_ = false;
}
inline bool GetMempoolRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetMempoolRequest.query)
  return query_;
}
inline void GetMempoolRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetMempoolRequest.query)
}

// -------------------------------------------------------------------

// GetMempoolResponse

// repeated .Catalyst.Protocol.Transaction.TransactionBroadcast transactions = 1;
inline int GetMempoolResponse::transactions_size() const {
  return transactions_.size();
}
inline ::Catalyst::Protocol::Transaction::TransactionBroadcast* GetMempoolResponse::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetMempoolResponse.transactions)
  return transactions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::TransactionBroadcast >*
GetMempoolResponse::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:Catalyst.Protocol.Rpc.Node.GetMempoolResponse.transactions)
  return &transactions_;
}
inline const ::Catalyst::Protocol::Transaction::TransactionBroadcast& GetMempoolResponse::transactions(int index) const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetMempoolResponse.transactions)
  return transactions_.Get(index);
}
inline ::Catalyst::Protocol::Transaction::TransactionBroadcast* GetMempoolResponse::add_transactions() {
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Rpc.Node.GetMempoolResponse.transactions)
  return transactions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::TransactionBroadcast >&
GetMempoolResponse::transactions() const {
  // @@protoc_insertion_point(field_list:Catalyst.Protocol.Rpc.Node.GetMempoolResponse.transactions)
  return transactions_;
}

// -------------------------------------------------------------------

// SignMessageRequest

// bytes message = 1;
inline void SignMessageRequest::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignMessageRequest::message() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SignMessageRequest.message)
  return message_.GetNoArena();
}
inline void SignMessageRequest::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SignMessageRequest.message)
}
#if LANG_CXX11
inline void SignMessageRequest::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SignMessageRequest.message)
}
#endif
inline void SignMessageRequest::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SignMessageRequest.message)
}
inline void SignMessageRequest::set_message(const void* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SignMessageRequest.message)
}
inline ::std::string* SignMessageRequest::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SignMessageRequest.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignMessageRequest::release_message() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SignMessageRequest.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignMessageRequest::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SignMessageRequest.message)
}

// string keyId = 2;
inline void SignMessageRequest::clear_keyid() {
  keyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignMessageRequest::keyid() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SignMessageRequest.keyId)
  return keyid_.GetNoArena();
}
inline void SignMessageRequest::set_keyid(const ::std::string& value) {
  
  keyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SignMessageRequest.keyId)
}
#if LANG_CXX11
inline void SignMessageRequest::set_keyid(::std::string&& value) {
  
  keyid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SignMessageRequest.keyId)
}
#endif
inline void SignMessageRequest::set_keyid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  keyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SignMessageRequest.keyId)
}
inline void SignMessageRequest::set_keyid(const char* value, size_t size) {
  
  keyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SignMessageRequest.keyId)
}
inline ::std::string* SignMessageRequest::mutable_keyid() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SignMessageRequest.keyId)
  return keyid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignMessageRequest::release_keyid() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SignMessageRequest.keyId)
  
  return keyid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignMessageRequest::set_allocated_keyid(::std::string* keyid) {
  if (keyid != NULL) {
    
  } else {
    
  }
  keyid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), keyid);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SignMessageRequest.keyId)
}

// .Catalyst.Protocol.Common.SigningContext signingContext = 3;
inline bool SignMessageRequest::has_signingcontext() const {
  return this != internal_default_instance() && signingcontext_ != NULL;
}
inline const ::Catalyst::Protocol::Common::SigningContext& SignMessageRequest::_internal_signingcontext() const {
  return *signingcontext_;
}
inline const ::Catalyst::Protocol::Common::SigningContext& SignMessageRequest::signingcontext() const {
  const ::Catalyst::Protocol::Common::SigningContext* p = signingcontext_;
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SignMessageRequest.signingContext)
  return p != NULL ? *p : *reinterpret_cast<const ::Catalyst::Protocol::Common::SigningContext*>(
      &::Catalyst::Protocol::Common::_SigningContext_default_instance_);
}
inline ::Catalyst::Protocol::Common::SigningContext* SignMessageRequest::release_signingcontext() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SignMessageRequest.signingContext)
  
  ::Catalyst::Protocol::Common::SigningContext* temp = signingcontext_;
  signingcontext_ = NULL;
  return temp;
}
inline ::Catalyst::Protocol::Common::SigningContext* SignMessageRequest::mutable_signingcontext() {
  
  if (signingcontext_ == NULL) {
    auto* p = CreateMaybeMessage<::Catalyst::Protocol::Common::SigningContext>(GetArenaNoVirtual());
    signingcontext_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SignMessageRequest.signingContext)
  return signingcontext_;
}
inline void SignMessageRequest::set_allocated_signingcontext(::Catalyst::Protocol::Common::SigningContext* signingcontext) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(signingcontext_);
  }
  if (signingcontext) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      signingcontext = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, signingcontext, submessage_arena);
    }
    
  } else {
    
  }
  signingcontext_ = signingcontext;
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SignMessageRequest.signingContext)
}

// -------------------------------------------------------------------

// SignMessageResponse

// bytes signature = 1;
inline void SignMessageResponse::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignMessageResponse::signature() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SignMessageResponse.signature)
  return signature_.GetNoArena();
}
inline void SignMessageResponse::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SignMessageResponse.signature)
}
#if LANG_CXX11
inline void SignMessageResponse::set_signature(::std::string&& value) {
  
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SignMessageResponse.signature)
}
#endif
inline void SignMessageResponse::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SignMessageResponse.signature)
}
inline void SignMessageResponse::set_signature(const void* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SignMessageResponse.signature)
}
inline ::std::string* SignMessageResponse::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SignMessageResponse.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignMessageResponse::release_signature() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SignMessageResponse.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignMessageResponse::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SignMessageResponse.signature)
}

// bytes publicKey = 2;
inline void SignMessageResponse::clear_publickey() {
  publickey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignMessageResponse::publickey() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SignMessageResponse.publicKey)
  return publickey_.GetNoArena();
}
inline void SignMessageResponse::set_publickey(const ::std::string& value) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SignMessageResponse.publicKey)
}
#if LANG_CXX11
inline void SignMessageResponse::set_publickey(::std::string&& value) {
  
  publickey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SignMessageResponse.publicKey)
}
#endif
inline void SignMessageResponse::set_publickey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SignMessageResponse.publicKey)
}
inline void SignMessageResponse::set_publickey(const void* value, size_t size) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SignMessageResponse.publicKey)
}
inline ::std::string* SignMessageResponse::mutable_publickey() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SignMessageResponse.publicKey)
  return publickey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignMessageResponse::release_publickey() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SignMessageResponse.publicKey)
  
  return publickey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignMessageResponse::set_allocated_publickey(::std::string* publickey) {
  if (publickey != NULL) {
    
  } else {
    
  }
  publickey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publickey);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SignMessageResponse.publicKey)
}

// bytes originalMessage = 3;
inline void SignMessageResponse::clear_originalmessage() {
  originalmessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignMessageResponse::originalmessage() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SignMessageResponse.originalMessage)
  return originalmessage_.GetNoArena();
}
inline void SignMessageResponse::set_originalmessage(const ::std::string& value) {
  
  originalmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SignMessageResponse.originalMessage)
}
#if LANG_CXX11
inline void SignMessageResponse::set_originalmessage(::std::string&& value) {
  
  originalmessage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SignMessageResponse.originalMessage)
}
#endif
inline void SignMessageResponse::set_originalmessage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  originalmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SignMessageResponse.originalMessage)
}
inline void SignMessageResponse::set_originalmessage(const void* value, size_t size) {
  
  originalmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SignMessageResponse.originalMessage)
}
inline ::std::string* SignMessageResponse::mutable_originalmessage() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SignMessageResponse.originalMessage)
  return originalmessage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignMessageResponse::release_originalmessage() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SignMessageResponse.originalMessage)
  
  return originalmessage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignMessageResponse::set_allocated_originalmessage(::std::string* originalmessage) {
  if (originalmessage != NULL) {
    
  } else {
    
  }
  originalmessage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), originalmessage);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SignMessageResponse.originalMessage)
}

// -------------------------------------------------------------------

// VerifyMessageRequest

// bytes signature = 1;
inline void VerifyMessageRequest::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VerifyMessageRequest::signature() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signature)
  return signature_.GetNoArena();
}
inline void VerifyMessageRequest::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signature)
}
#if LANG_CXX11
inline void VerifyMessageRequest::set_signature(::std::string&& value) {
  
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signature)
}
#endif
inline void VerifyMessageRequest::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signature)
}
inline void VerifyMessageRequest::set_signature(const void* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signature)
}
inline ::std::string* VerifyMessageRequest::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VerifyMessageRequest::release_signature() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyMessageRequest::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signature)
}

// bytes publicKey = 2;
inline void VerifyMessageRequest::clear_publickey() {
  publickey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VerifyMessageRequest::publickey() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.publicKey)
  return publickey_.GetNoArena();
}
inline void VerifyMessageRequest::set_publickey(const ::std::string& value) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.publicKey)
}
#if LANG_CXX11
inline void VerifyMessageRequest::set_publickey(::std::string&& value) {
  
  publickey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.publicKey)
}
#endif
inline void VerifyMessageRequest::set_publickey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.publicKey)
}
inline void VerifyMessageRequest::set_publickey(const void* value, size_t size) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.publicKey)
}
inline ::std::string* VerifyMessageRequest::mutable_publickey() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.publicKey)
  return publickey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VerifyMessageRequest::release_publickey() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.publicKey)
  
  return publickey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyMessageRequest::set_allocated_publickey(::std::string* publickey) {
  if (publickey != NULL) {
    
  } else {
    
  }
  publickey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publickey);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.publicKey)
}

// bytes message = 3;
inline void VerifyMessageRequest::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VerifyMessageRequest::message() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.message)
  return message_.GetNoArena();
}
inline void VerifyMessageRequest::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.message)
}
#if LANG_CXX11
inline void VerifyMessageRequest::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.message)
}
#endif
inline void VerifyMessageRequest::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.message)
}
inline void VerifyMessageRequest::set_message(const void* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.message)
}
inline ::std::string* VerifyMessageRequest::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VerifyMessageRequest::release_message() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyMessageRequest::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.message)
}

// .Catalyst.Protocol.Common.SigningContext signingContext = 4;
inline bool VerifyMessageRequest::has_signingcontext() const {
  return this != internal_default_instance() && signingcontext_ != NULL;
}
inline const ::Catalyst::Protocol::Common::SigningContext& VerifyMessageRequest::_internal_signingcontext() const {
  return *signingcontext_;
}
inline const ::Catalyst::Protocol::Common::SigningContext& VerifyMessageRequest::signingcontext() const {
  const ::Catalyst::Protocol::Common::SigningContext* p = signingcontext_;
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signingContext)
  return p != NULL ? *p : *reinterpret_cast<const ::Catalyst::Protocol::Common::SigningContext*>(
      &::Catalyst::Protocol::Common::_SigningContext_default_instance_);
}
inline ::Catalyst::Protocol::Common::SigningContext* VerifyMessageRequest::release_signingcontext() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signingContext)
  
  ::Catalyst::Protocol::Common::SigningContext* temp = signingcontext_;
  signingcontext_ = NULL;
  return temp;
}
inline ::Catalyst::Protocol::Common::SigningContext* VerifyMessageRequest::mutable_signingcontext() {
  
  if (signingcontext_ == NULL) {
    auto* p = CreateMaybeMessage<::Catalyst::Protocol::Common::SigningContext>(GetArenaNoVirtual());
    signingcontext_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signingContext)
  return signingcontext_;
}
inline void VerifyMessageRequest::set_allocated_signingcontext(::Catalyst::Protocol::Common::SigningContext* signingcontext) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(signingcontext_);
  }
  if (signingcontext) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      signingcontext = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, signingcontext, submessage_arena);
    }
    
  } else {
    
  }
  signingcontext_ = signingcontext;
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.VerifyMessageRequest.signingContext)
}

// -------------------------------------------------------------------

// VerifyMessageResponse

// bool isSignedByKey = 1;
inline void VerifyMessageResponse::clear_issignedbykey() {
  issignedbykey_ = false;
}
inline bool VerifyMessageResponse::issignedbykey() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.VerifyMessageResponse.isSignedByKey)
  return issignedbykey_;
}
inline void VerifyMessageResponse::set_issignedbykey(bool value) {
  
  issignedbykey_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.VerifyMessageResponse.isSignedByKey)
}

// -------------------------------------------------------------------

// ServiceStatusRequest

// bool query = 1;
inline void ServiceStatusRequest::clear_query() {
  query_ = false;
}
inline bool ServiceStatusRequest::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.ServiceStatusRequest.query)
  return query_;
}
inline void ServiceStatusRequest::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.ServiceStatusRequest.query)
}

// -------------------------------------------------------------------

// ServiceStatusResponse

// string query = 1;
inline void ServiceStatusResponse::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServiceStatusResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse.query)
  return query_.GetNoArena();
}
inline void ServiceStatusResponse::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse.query)
}
#if LANG_CXX11
inline void ServiceStatusResponse::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse.query)
}
#endif
inline void ServiceStatusResponse::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse.query)
}
inline void ServiceStatusResponse::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse.query)
}
inline ::std::string* ServiceStatusResponse::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceStatusResponse::release_query() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceStatusResponse::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.ServiceStatusResponse.query)
}

// -------------------------------------------------------------------

// AddFileToDfsRequest

// uint64 fileSize = 1;
inline void AddFileToDfsRequest::clear_filesize() {
  filesize_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AddFileToDfsRequest::filesize() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.fileSize)
  return filesize_;
}
inline void AddFileToDfsRequest::set_filesize(::google::protobuf::uint64 value) {
  
  filesize_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.fileSize)
}

// string fileName = 2;
inline void AddFileToDfsRequest::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddFileToDfsRequest::filename() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.fileName)
  return filename_.GetNoArena();
}
inline void AddFileToDfsRequest::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.fileName)
}
#if LANG_CXX11
inline void AddFileToDfsRequest::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.fileName)
}
#endif
inline void AddFileToDfsRequest::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.fileName)
}
inline void AddFileToDfsRequest::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.fileName)
}
inline ::std::string* AddFileToDfsRequest::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.fileName)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddFileToDfsRequest::release_filename() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.fileName)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddFileToDfsRequest::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.fileName)
}

// string node = 3;
inline void AddFileToDfsRequest::clear_node() {
  node_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddFileToDfsRequest::node() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.node)
  return node_.GetNoArena();
}
inline void AddFileToDfsRequest::set_node(const ::std::string& value) {
  
  node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.node)
}
#if LANG_CXX11
inline void AddFileToDfsRequest::set_node(::std::string&& value) {
  
  node_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.node)
}
#endif
inline void AddFileToDfsRequest::set_node(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.node)
}
inline void AddFileToDfsRequest::set_node(const char* value, size_t size) {
  
  node_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.node)
}
inline ::std::string* AddFileToDfsRequest::mutable_node() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.node)
  return node_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddFileToDfsRequest::release_node() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.node)
  
  return node_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddFileToDfsRequest::set_allocated_node(::std::string* node) {
  if (node != NULL) {
    
  } else {
    
  }
  node_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.AddFileToDfsRequest.node)
}

// -------------------------------------------------------------------

// AddFileToDfsResponse

// bytes responseCode = 1;
inline void AddFileToDfsResponse::clear_responsecode() {
  responsecode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddFileToDfsResponse::responsecode() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.responseCode)
  return responsecode_.GetNoArena();
}
inline void AddFileToDfsResponse::set_responsecode(const ::std::string& value) {
  
  responsecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.responseCode)
}
#if LANG_CXX11
inline void AddFileToDfsResponse::set_responsecode(::std::string&& value) {
  
  responsecode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.responseCode)
}
#endif
inline void AddFileToDfsResponse::set_responsecode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  responsecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.responseCode)
}
inline void AddFileToDfsResponse::set_responsecode(const void* value, size_t size) {
  
  responsecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.responseCode)
}
inline ::std::string* AddFileToDfsResponse::mutable_responsecode() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.responseCode)
  return responsecode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddFileToDfsResponse::release_responsecode() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.responseCode)
  
  return responsecode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddFileToDfsResponse::set_allocated_responsecode(::std::string* responsecode) {
  if (responsecode != NULL) {
    
  } else {
    
  }
  responsecode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), responsecode);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.responseCode)
}

// string dfsHash = 2;
inline void AddFileToDfsResponse::clear_dfshash() {
  dfshash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddFileToDfsResponse::dfshash() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.dfsHash)
  return dfshash_.GetNoArena();
}
inline void AddFileToDfsResponse::set_dfshash(const ::std::string& value) {
  
  dfshash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.dfsHash)
}
#if LANG_CXX11
inline void AddFileToDfsResponse::set_dfshash(::std::string&& value) {
  
  dfshash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.dfsHash)
}
#endif
inline void AddFileToDfsResponse::set_dfshash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dfshash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.dfsHash)
}
inline void AddFileToDfsResponse::set_dfshash(const char* value, size_t size) {
  
  dfshash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.dfsHash)
}
inline ::std::string* AddFileToDfsResponse::mutable_dfshash() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.dfsHash)
  return dfshash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddFileToDfsResponse::release_dfshash() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.dfsHash)
  
  return dfshash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddFileToDfsResponse::set_allocated_dfshash(::std::string* dfshash) {
  if (dfshash != NULL) {
    
  } else {
    
  }
  dfshash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dfshash);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.AddFileToDfsResponse.dfsHash)
}

// -------------------------------------------------------------------

// TransferFileBytesRequest

// uint32 chunkId = 1;
inline void TransferFileBytesRequest::clear_chunkid() {
  chunkid_ = 0u;
}
inline ::google::protobuf::uint32 TransferFileBytesRequest::chunkid() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.chunkId)
  return chunkid_;
}
inline void TransferFileBytesRequest::set_chunkid(::google::protobuf::uint32 value) {
  
  chunkid_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.chunkId)
}

// bytes chunkBytes = 2;
inline void TransferFileBytesRequest::clear_chunkbytes() {
  chunkbytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransferFileBytesRequest::chunkbytes() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.chunkBytes)
  return chunkbytes_.GetNoArena();
}
inline void TransferFileBytesRequest::set_chunkbytes(const ::std::string& value) {
  
  chunkbytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.chunkBytes)
}
#if LANG_CXX11
inline void TransferFileBytesRequest::set_chunkbytes(::std::string&& value) {
  
  chunkbytes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.chunkBytes)
}
#endif
inline void TransferFileBytesRequest::set_chunkbytes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  chunkbytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.chunkBytes)
}
inline void TransferFileBytesRequest::set_chunkbytes(const void* value, size_t size) {
  
  chunkbytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.chunkBytes)
}
inline ::std::string* TransferFileBytesRequest::mutable_chunkbytes() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.chunkBytes)
  return chunkbytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferFileBytesRequest::release_chunkbytes() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.chunkBytes)
  
  return chunkbytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferFileBytesRequest::set_allocated_chunkbytes(::std::string* chunkbytes) {
  if (chunkbytes != NULL) {
    
  } else {
    
  }
  chunkbytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chunkbytes);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.chunkBytes)
}

// bytes correlationFileName = 3;
inline void TransferFileBytesRequest::clear_correlationfilename() {
  correlationfilename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransferFileBytesRequest::correlationfilename() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.correlationFileName)
  return correlationfilename_.GetNoArena();
}
inline void TransferFileBytesRequest::set_correlationfilename(const ::std::string& value) {
  
  correlationfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.correlationFileName)
}
#if LANG_CXX11
inline void TransferFileBytesRequest::set_correlationfilename(::std::string&& value) {
  
  correlationfilename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.correlationFileName)
}
#endif
inline void TransferFileBytesRequest::set_correlationfilename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  correlationfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.correlationFileName)
}
inline void TransferFileBytesRequest::set_correlationfilename(const void* value, size_t size) {
  
  correlationfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.correlationFileName)
}
inline ::std::string* TransferFileBytesRequest::mutable_correlationfilename() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.correlationFileName)
  return correlationfilename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferFileBytesRequest::release_correlationfilename() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.correlationFileName)
  
  return correlationfilename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferFileBytesRequest::set_allocated_correlationfilename(::std::string* correlationfilename) {
  if (correlationfilename != NULL) {
    
  } else {
    
  }
  correlationfilename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), correlationfilename);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.TransferFileBytesRequest.correlationFileName)
}

// -------------------------------------------------------------------

// TransferFileBytesResponse

// bytes responseCode = 1;
inline void TransferFileBytesResponse::clear_responsecode() {
  responsecode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransferFileBytesResponse::responsecode() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse.responseCode)
  return responsecode_.GetNoArena();
}
inline void TransferFileBytesResponse::set_responsecode(const ::std::string& value) {
  
  responsecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse.responseCode)
}
#if LANG_CXX11
inline void TransferFileBytesResponse::set_responsecode(::std::string&& value) {
  
  responsecode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse.responseCode)
}
#endif
inline void TransferFileBytesResponse::set_responsecode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  responsecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse.responseCode)
}
inline void TransferFileBytesResponse::set_responsecode(const void* value, size_t size) {
  
  responsecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse.responseCode)
}
inline ::std::string* TransferFileBytesResponse::mutable_responsecode() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse.responseCode)
  return responsecode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferFileBytesResponse::release_responsecode() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse.responseCode)
  
  return responsecode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferFileBytesResponse::set_allocated_responsecode(::std::string* responsecode) {
  if (responsecode != NULL) {
    
  } else {
    
  }
  responsecode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), responsecode);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.TransferFileBytesResponse.responseCode)
}

// -------------------------------------------------------------------

// RemovePeerRequest

// bytes peerIp = 1;
inline void RemovePeerRequest::clear_peerip() {
  peerip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemovePeerRequest::peerip() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.peerIp)
  return peerip_.GetNoArena();
}
inline void RemovePeerRequest::set_peerip(const ::std::string& value) {
  
  peerip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.peerIp)
}
#if LANG_CXX11
inline void RemovePeerRequest::set_peerip(::std::string&& value) {
  
  peerip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.peerIp)
}
#endif
inline void RemovePeerRequest::set_peerip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  peerip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.peerIp)
}
inline void RemovePeerRequest::set_peerip(const void* value, size_t size) {
  
  peerip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.peerIp)
}
inline ::std::string* RemovePeerRequest::mutable_peerip() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.peerIp)
  return peerip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemovePeerRequest::release_peerip() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.peerIp)
  
  return peerip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemovePeerRequest::set_allocated_peerip(::std::string* peerip) {
  if (peerip != NULL) {
    
  } else {
    
  }
  peerip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peerip);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.peerIp)
}

// bytes publicKey = 2;
inline void RemovePeerRequest::clear_publickey() {
  publickey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemovePeerRequest::publickey() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.publicKey)
  return publickey_.GetNoArena();
}
inline void RemovePeerRequest::set_publickey(const ::std::string& value) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.publicKey)
}
#if LANG_CXX11
inline void RemovePeerRequest::set_publickey(::std::string&& value) {
  
  publickey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.publicKey)
}
#endif
inline void RemovePeerRequest::set_publickey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.publicKey)
}
inline void RemovePeerRequest::set_publickey(const void* value, size_t size) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.publicKey)
}
inline ::std::string* RemovePeerRequest::mutable_publickey() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.publicKey)
  return publickey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemovePeerRequest::release_publickey() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.publicKey)
  
  return publickey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemovePeerRequest::set_allocated_publickey(::std::string* publickey) {
  if (publickey != NULL) {
    
  } else {
    
  }
  publickey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publickey);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.RemovePeerRequest.publicKey)
}

// -------------------------------------------------------------------

// RemovePeerResponse

// uint32 deletedCount = 1;
inline void RemovePeerResponse::clear_deletedcount() {
  deletedcount_ = 0u;
}
inline ::google::protobuf::uint32 RemovePeerResponse::deletedcount() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.RemovePeerResponse.deletedCount)
  return deletedcount_;
}
inline void RemovePeerResponse::set_deletedcount(::google::protobuf::uint32 value) {
  
  deletedcount_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.RemovePeerResponse.deletedCount)
}

// -------------------------------------------------------------------

// GetPeerCountRequest

// -------------------------------------------------------------------

// GetPeerCountResponse

// int32 peerCount = 1;
inline void GetPeerCountResponse::clear_peercount() {
  peercount_ = 0;
}
inline ::google::protobuf::int32 GetPeerCountResponse::peercount() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetPeerCountResponse.peerCount)
  return peercount_;
}
inline void GetPeerCountResponse::set_peercount(::google::protobuf::int32 value) {
  
  peercount_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetPeerCountResponse.peerCount)
}

// -------------------------------------------------------------------

// GetFileFromDfsRequest

// string dfsHash = 1;
inline void GetFileFromDfsRequest::clear_dfshash() {
  dfshash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetFileFromDfsRequest::dfshash() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest.dfsHash)
  return dfshash_.GetNoArena();
}
inline void GetFileFromDfsRequest::set_dfshash(const ::std::string& value) {
  
  dfshash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest.dfsHash)
}
#if LANG_CXX11
inline void GetFileFromDfsRequest::set_dfshash(::std::string&& value) {
  
  dfshash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest.dfsHash)
}
#endif
inline void GetFileFromDfsRequest::set_dfshash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dfshash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest.dfsHash)
}
inline void GetFileFromDfsRequest::set_dfshash(const char* value, size_t size) {
  
  dfshash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest.dfsHash)
}
inline ::std::string* GetFileFromDfsRequest::mutable_dfshash() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest.dfsHash)
  return dfshash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetFileFromDfsRequest::release_dfshash() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest.dfsHash)
  
  return dfshash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetFileFromDfsRequest::set_allocated_dfshash(::std::string* dfshash) {
  if (dfshash != NULL) {
    
  } else {
    
  }
  dfshash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dfshash);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetFileFromDfsRequest.dfsHash)
}

// -------------------------------------------------------------------

// GetFileFromDfsResponse

// uint64 fileSize = 1;
inline void GetFileFromDfsResponse::clear_filesize() {
  filesize_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetFileFromDfsResponse::filesize() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse.fileSize)
  return filesize_;
}
inline void GetFileFromDfsResponse::set_filesize(::google::protobuf::uint64 value) {
  
  filesize_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse.fileSize)
}

// bytes responseCode = 2;
inline void GetFileFromDfsResponse::clear_responsecode() {
  responsecode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetFileFromDfsResponse::responsecode() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse.responseCode)
  return responsecode_.GetNoArena();
}
inline void GetFileFromDfsResponse::set_responsecode(const ::std::string& value) {
  
  responsecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse.responseCode)
}
#if LANG_CXX11
inline void GetFileFromDfsResponse::set_responsecode(::std::string&& value) {
  
  responsecode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse.responseCode)
}
#endif
inline void GetFileFromDfsResponse::set_responsecode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  responsecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse.responseCode)
}
inline void GetFileFromDfsResponse::set_responsecode(const void* value, size_t size) {
  
  responsecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse.responseCode)
}
inline ::std::string* GetFileFromDfsResponse::mutable_responsecode() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse.responseCode)
  return responsecode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetFileFromDfsResponse::release_responsecode() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse.responseCode)
  
  return responsecode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetFileFromDfsResponse::set_allocated_responsecode(::std::string* responsecode) {
  if (responsecode != NULL) {
    
  } else {
    
  }
  responsecode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), responsecode);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.GetFileFromDfsResponse.responseCode)
}

// -------------------------------------------------------------------

// SetPeerDataFolderRequest

// string datafolder = 1;
inline void SetPeerDataFolderRequest::clear_datafolder() {
  datafolder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetPeerDataFolderRequest::datafolder() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest.datafolder)
  return datafolder_.GetNoArena();
}
inline void SetPeerDataFolderRequest::set_datafolder(const ::std::string& value) {
  
  datafolder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest.datafolder)
}
#if LANG_CXX11
inline void SetPeerDataFolderRequest::set_datafolder(::std::string&& value) {
  
  datafolder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest.datafolder)
}
#endif
inline void SetPeerDataFolderRequest::set_datafolder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  datafolder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest.datafolder)
}
inline void SetPeerDataFolderRequest::set_datafolder(const char* value, size_t size) {
  
  datafolder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest.datafolder)
}
inline ::std::string* SetPeerDataFolderRequest::mutable_datafolder() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest.datafolder)
  return datafolder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetPeerDataFolderRequest::release_datafolder() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest.datafolder)
  
  return datafolder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetPeerDataFolderRequest::set_allocated_datafolder(::std::string* datafolder) {
  if (datafolder != NULL) {
    
  } else {
    
  }
  datafolder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), datafolder);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderRequest.datafolder)
}

// -------------------------------------------------------------------

// SetPeerDataFolderResponse

// bool query = 1;
inline void SetPeerDataFolderResponse::clear_query() {
  query_ = false;
}
inline bool SetPeerDataFolderResponse::query() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderResponse.query)
  return query_;
}
inline void SetPeerDataFolderResponse::set_query(bool value) {
  
  query_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Rpc.Node.SetPeerDataFolderResponse.query)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Node
}  // namespace Rpc
}  // namespace Protocol
}  // namespace Catalyst

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Catalyst::Protocol::Rpc::Node::ResponseCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Catalyst::Protocol::Rpc::Node::ResponseCode>() {
  return ::Catalyst::Protocol::Rpc::Node::ResponseCode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Rpc_2eproto
