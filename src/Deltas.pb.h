// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Deltas.proto

#ifndef PROTOBUF_INCLUDED_Deltas_2eproto
#define PROTOBUF_INCLUDED_Deltas_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Transaction.pb.h"
#include "Common.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Deltas_2eproto 

namespace protobuf_Deltas_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Deltas_2eproto
namespace Catalyst {
namespace Protocol {
namespace Deltas {
class CandidateDeltaBroadcast;
class CandidateDeltaBroadcastDefaultTypeInternal;
extern CandidateDeltaBroadcastDefaultTypeInternal _CandidateDeltaBroadcast_default_instance_;
class Delta;
class DeltaDefaultTypeInternal;
extern DeltaDefaultTypeInternal _Delta_default_instance_;
class DeltaDfsHashBroadcast;
class DeltaDfsHashBroadcastDefaultTypeInternal;
extern DeltaDfsHashBroadcastDefaultTypeInternal _DeltaDfsHashBroadcast_default_instance_;
class FavouriteDeltaBroadcast;
class FavouriteDeltaBroadcastDefaultTypeInternal;
extern FavouriteDeltaBroadcastDefaultTypeInternal _FavouriteDeltaBroadcast_default_instance_;
}  // namespace Deltas
}  // namespace Protocol
}  // namespace Catalyst
namespace google {
namespace protobuf {
template<> ::Catalyst::Protocol::Deltas::CandidateDeltaBroadcast* Arena::CreateMaybeMessage<::Catalyst::Protocol::Deltas::CandidateDeltaBroadcast>(Arena*);
template<> ::Catalyst::Protocol::Deltas::Delta* Arena::CreateMaybeMessage<::Catalyst::Protocol::Deltas::Delta>(Arena*);
template<> ::Catalyst::Protocol::Deltas::DeltaDfsHashBroadcast* Arena::CreateMaybeMessage<::Catalyst::Protocol::Deltas::DeltaDfsHashBroadcast>(Arena*);
template<> ::Catalyst::Protocol::Deltas::FavouriteDeltaBroadcast* Arena::CreateMaybeMessage<::Catalyst::Protocol::Deltas::FavouriteDeltaBroadcast>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Catalyst {
namespace Protocol {
namespace Deltas {

// ===================================================================

class Delta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Deltas.Delta) */ {
 public:
  Delta();
  virtual ~Delta();

  Delta(const Delta& from);

  inline Delta& operator=(const Delta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Delta(Delta&& from) noexcept
    : Delta() {
    *this = ::std::move(from);
  }

  inline Delta& operator=(Delta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Delta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Delta* internal_default_instance() {
    return reinterpret_cast<const Delta*>(
               &_Delta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Delta* other);
  friend void swap(Delta& a, Delta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Delta* New() const final {
    return CreateMaybeMessage<Delta>(NULL);
  }

  Delta* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Delta>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Delta& from);
  void MergeFrom(const Delta& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Delta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Catalyst.Protocol.Transaction.STTransactionEntry STEntries = 6;
  int stentries_size() const;
  void clear_stentries();
  static const int kSTEntriesFieldNumber = 6;
  ::Catalyst::Protocol::Transaction::STTransactionEntry* mutable_stentries(int index);
  ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::STTransactionEntry >*
      mutable_stentries();
  const ::Catalyst::Protocol::Transaction::STTransactionEntry& stentries(int index) const;
  ::Catalyst::Protocol::Transaction::STTransactionEntry* add_stentries();
  const ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::STTransactionEntry >&
      stentries() const;

  // repeated .Catalyst.Protocol.Transaction.CFTransactionEntry CFEntries = 7;
  int cfentries_size() const;
  void clear_cfentries();
  static const int kCFEntriesFieldNumber = 7;
  ::Catalyst::Protocol::Transaction::CFTransactionEntry* mutable_cfentries(int index);
  ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::CFTransactionEntry >*
      mutable_cfentries();
  const ::Catalyst::Protocol::Transaction::CFTransactionEntry& cfentries(int index) const;
  ::Catalyst::Protocol::Transaction::CFTransactionEntry* add_cfentries();
  const ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::CFTransactionEntry >&
      cfentries() const;

  // repeated .Catalyst.Protocol.Transaction.CoinbaseEntry CBEntries = 8;
  int cbentries_size() const;
  void clear_cbentries();
  static const int kCBEntriesFieldNumber = 8;
  ::Catalyst::Protocol::Transaction::CoinbaseEntry* mutable_cbentries(int index);
  ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::CoinbaseEntry >*
      mutable_cbentries();
  const ::Catalyst::Protocol::Transaction::CoinbaseEntry& cbentries(int index) const;
  ::Catalyst::Protocol::Transaction::CoinbaseEntry* add_cbentries();
  const ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::CoinbaseEntry >&
      cbentries() const;

  // bytes PreviousDeltaDfsHash = 2;
  void clear_previousdeltadfshash();
  static const int kPreviousDeltaDfsHashFieldNumber = 2;
  const ::std::string& previousdeltadfshash() const;
  void set_previousdeltadfshash(const ::std::string& value);
  #if LANG_CXX11
  void set_previousdeltadfshash(::std::string&& value);
  #endif
  void set_previousdeltadfshash(const char* value);
  void set_previousdeltadfshash(const void* value, size_t size);
  ::std::string* mutable_previousdeltadfshash();
  ::std::string* release_previousdeltadfshash();
  void set_allocated_previousdeltadfshash(::std::string* previousdeltadfshash);

  // bytes MerkleRoot = 3;
  void clear_merkleroot();
  static const int kMerkleRootFieldNumber = 3;
  const ::std::string& merkleroot() const;
  void set_merkleroot(const ::std::string& value);
  #if LANG_CXX11
  void set_merkleroot(::std::string&& value);
  #endif
  void set_merkleroot(const char* value);
  void set_merkleroot(const void* value, size_t size);
  ::std::string* mutable_merkleroot();
  ::std::string* release_merkleroot();
  void set_allocated_merkleroot(::std::string* merkleroot);

  // bytes MerklePoda = 4;
  void clear_merklepoda();
  static const int kMerklePodaFieldNumber = 4;
  const ::std::string& merklepoda() const;
  void set_merklepoda(const ::std::string& value);
  #if LANG_CXX11
  void set_merklepoda(::std::string&& value);
  #endif
  void set_merklepoda(const char* value);
  void set_merklepoda(const void* value, size_t size);
  ::std::string* mutable_merklepoda();
  ::std::string* release_merklepoda();
  void set_allocated_merklepoda(::std::string* merklepoda);

  // .google.protobuf.Timestamp TimeStamp = 5;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimeStampFieldNumber = 5;
  private:
  const ::google::protobuf::Timestamp& _internal_timestamp() const;
  public:
  const ::google::protobuf::Timestamp& timestamp() const;
  ::google::protobuf::Timestamp* release_timestamp();
  ::google::protobuf::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* timestamp);

  // uint32 Version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Deltas.Delta)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::STTransactionEntry > stentries_;
  ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::CFTransactionEntry > cfentries_;
  ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::CoinbaseEntry > cbentries_;
  ::google::protobuf::internal::ArenaStringPtr previousdeltadfshash_;
  ::google::protobuf::internal::ArenaStringPtr merkleroot_;
  ::google::protobuf::internal::ArenaStringPtr merklepoda_;
  ::google::protobuf::Timestamp* timestamp_;
  ::google::protobuf::uint32 version_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Deltas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CandidateDeltaBroadcast : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Deltas.CandidateDeltaBroadcast) */ {
 public:
  CandidateDeltaBroadcast();
  virtual ~CandidateDeltaBroadcast();

  CandidateDeltaBroadcast(const CandidateDeltaBroadcast& from);

  inline CandidateDeltaBroadcast& operator=(const CandidateDeltaBroadcast& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CandidateDeltaBroadcast(CandidateDeltaBroadcast&& from) noexcept
    : CandidateDeltaBroadcast() {
    *this = ::std::move(from);
  }

  inline CandidateDeltaBroadcast& operator=(CandidateDeltaBroadcast&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CandidateDeltaBroadcast& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CandidateDeltaBroadcast* internal_default_instance() {
    return reinterpret_cast<const CandidateDeltaBroadcast*>(
               &_CandidateDeltaBroadcast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CandidateDeltaBroadcast* other);
  friend void swap(CandidateDeltaBroadcast& a, CandidateDeltaBroadcast& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CandidateDeltaBroadcast* New() const final {
    return CreateMaybeMessage<CandidateDeltaBroadcast>(NULL);
  }

  CandidateDeltaBroadcast* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CandidateDeltaBroadcast>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CandidateDeltaBroadcast& from);
  void MergeFrom(const CandidateDeltaBroadcast& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CandidateDeltaBroadcast* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes Hash = 1;
  void clear_hash();
  static const int kHashFieldNumber = 1;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_hash(::std::string&& value);
  #endif
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);

  // bytes PreviousDeltaDfsHash = 3;
  void clear_previousdeltadfshash();
  static const int kPreviousDeltaDfsHashFieldNumber = 3;
  const ::std::string& previousdeltadfshash() const;
  void set_previousdeltadfshash(const ::std::string& value);
  #if LANG_CXX11
  void set_previousdeltadfshash(::std::string&& value);
  #endif
  void set_previousdeltadfshash(const char* value);
  void set_previousdeltadfshash(const void* value, size_t size);
  ::std::string* mutable_previousdeltadfshash();
  ::std::string* release_previousdeltadfshash();
  void set_allocated_previousdeltadfshash(::std::string* previousdeltadfshash);

  // .Catalyst.Protocol.Common.PeerId ProducerId = 2;
  bool has_producerid() const;
  void clear_producerid();
  static const int kProducerIdFieldNumber = 2;
  private:
  const ::Catalyst::Protocol::Common::PeerId& _internal_producerid() const;
  public:
  const ::Catalyst::Protocol::Common::PeerId& producerid() const;
  ::Catalyst::Protocol::Common::PeerId* release_producerid();
  ::Catalyst::Protocol::Common::PeerId* mutable_producerid();
  void set_allocated_producerid(::Catalyst::Protocol::Common::PeerId* producerid);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Deltas.CandidateDeltaBroadcast)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  ::google::protobuf::internal::ArenaStringPtr previousdeltadfshash_;
  ::Catalyst::Protocol::Common::PeerId* producerid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Deltas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FavouriteDeltaBroadcast : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Deltas.FavouriteDeltaBroadcast) */ {
 public:
  FavouriteDeltaBroadcast();
  virtual ~FavouriteDeltaBroadcast();

  FavouriteDeltaBroadcast(const FavouriteDeltaBroadcast& from);

  inline FavouriteDeltaBroadcast& operator=(const FavouriteDeltaBroadcast& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FavouriteDeltaBroadcast(FavouriteDeltaBroadcast&& from) noexcept
    : FavouriteDeltaBroadcast() {
    *this = ::std::move(from);
  }

  inline FavouriteDeltaBroadcast& operator=(FavouriteDeltaBroadcast&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FavouriteDeltaBroadcast& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FavouriteDeltaBroadcast* internal_default_instance() {
    return reinterpret_cast<const FavouriteDeltaBroadcast*>(
               &_FavouriteDeltaBroadcast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(FavouriteDeltaBroadcast* other);
  friend void swap(FavouriteDeltaBroadcast& a, FavouriteDeltaBroadcast& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FavouriteDeltaBroadcast* New() const final {
    return CreateMaybeMessage<FavouriteDeltaBroadcast>(NULL);
  }

  FavouriteDeltaBroadcast* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FavouriteDeltaBroadcast>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FavouriteDeltaBroadcast& from);
  void MergeFrom(const FavouriteDeltaBroadcast& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FavouriteDeltaBroadcast* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Catalyst.Protocol.Deltas.CandidateDeltaBroadcast Candidate = 1;
  bool has_candidate() const;
  void clear_candidate();
  static const int kCandidateFieldNumber = 1;
  private:
  const ::Catalyst::Protocol::Deltas::CandidateDeltaBroadcast& _internal_candidate() const;
  public:
  const ::Catalyst::Protocol::Deltas::CandidateDeltaBroadcast& candidate() const;
  ::Catalyst::Protocol::Deltas::CandidateDeltaBroadcast* release_candidate();
  ::Catalyst::Protocol::Deltas::CandidateDeltaBroadcast* mutable_candidate();
  void set_allocated_candidate(::Catalyst::Protocol::Deltas::CandidateDeltaBroadcast* candidate);

  // .Catalyst.Protocol.Common.PeerId VoterId = 2;
  bool has_voterid() const;
  void clear_voterid();
  static const int kVoterIdFieldNumber = 2;
  private:
  const ::Catalyst::Protocol::Common::PeerId& _internal_voterid() const;
  public:
  const ::Catalyst::Protocol::Common::PeerId& voterid() const;
  ::Catalyst::Protocol::Common::PeerId* release_voterid();
  ::Catalyst::Protocol::Common::PeerId* mutable_voterid();
  void set_allocated_voterid(::Catalyst::Protocol::Common::PeerId* voterid);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Deltas.FavouriteDeltaBroadcast)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Catalyst::Protocol::Deltas::CandidateDeltaBroadcast* candidate_;
  ::Catalyst::Protocol::Common::PeerId* voterid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Deltas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeltaDfsHashBroadcast : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Deltas.DeltaDfsHashBroadcast) */ {
 public:
  DeltaDfsHashBroadcast();
  virtual ~DeltaDfsHashBroadcast();

  DeltaDfsHashBroadcast(const DeltaDfsHashBroadcast& from);

  inline DeltaDfsHashBroadcast& operator=(const DeltaDfsHashBroadcast& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeltaDfsHashBroadcast(DeltaDfsHashBroadcast&& from) noexcept
    : DeltaDfsHashBroadcast() {
    *this = ::std::move(from);
  }

  inline DeltaDfsHashBroadcast& operator=(DeltaDfsHashBroadcast&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeltaDfsHashBroadcast& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeltaDfsHashBroadcast* internal_default_instance() {
    return reinterpret_cast<const DeltaDfsHashBroadcast*>(
               &_DeltaDfsHashBroadcast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(DeltaDfsHashBroadcast* other);
  friend void swap(DeltaDfsHashBroadcast& a, DeltaDfsHashBroadcast& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeltaDfsHashBroadcast* New() const final {
    return CreateMaybeMessage<DeltaDfsHashBroadcast>(NULL);
  }

  DeltaDfsHashBroadcast* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeltaDfsHashBroadcast>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeltaDfsHashBroadcast& from);
  void MergeFrom(const DeltaDfsHashBroadcast& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeltaDfsHashBroadcast* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes DeltaDfsHash = 1;
  void clear_deltadfshash();
  static const int kDeltaDfsHashFieldNumber = 1;
  const ::std::string& deltadfshash() const;
  void set_deltadfshash(const ::std::string& value);
  #if LANG_CXX11
  void set_deltadfshash(::std::string&& value);
  #endif
  void set_deltadfshash(const char* value);
  void set_deltadfshash(const void* value, size_t size);
  ::std::string* mutable_deltadfshash();
  ::std::string* release_deltadfshash();
  void set_allocated_deltadfshash(::std::string* deltadfshash);

  // bytes PreviousDeltaDfsHash = 2;
  void clear_previousdeltadfshash();
  static const int kPreviousDeltaDfsHashFieldNumber = 2;
  const ::std::string& previousdeltadfshash() const;
  void set_previousdeltadfshash(const ::std::string& value);
  #if LANG_CXX11
  void set_previousdeltadfshash(::std::string&& value);
  #endif
  void set_previousdeltadfshash(const char* value);
  void set_previousdeltadfshash(const void* value, size_t size);
  ::std::string* mutable_previousdeltadfshash();
  ::std::string* release_previousdeltadfshash();
  void set_allocated_previousdeltadfshash(::std::string* previousdeltadfshash);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Deltas.DeltaDfsHashBroadcast)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr deltadfshash_;
  ::google::protobuf::internal::ArenaStringPtr previousdeltadfshash_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Deltas_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Delta

// uint32 Version = 1;
inline void Delta::clear_version() {
  version_ = 0u;
}
inline ::google::protobuf::uint32 Delta::version() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Deltas.Delta.Version)
  return version_;
}
inline void Delta::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Deltas.Delta.Version)
}

// bytes PreviousDeltaDfsHash = 2;
inline void Delta::clear_previousdeltadfshash() {
  previousdeltadfshash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Delta::previousdeltadfshash() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Deltas.Delta.PreviousDeltaDfsHash)
  return previousdeltadfshash_.GetNoArena();
}
inline void Delta::set_previousdeltadfshash(const ::std::string& value) {
  
  previousdeltadfshash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Deltas.Delta.PreviousDeltaDfsHash)
}
#if LANG_CXX11
inline void Delta::set_previousdeltadfshash(::std::string&& value) {
  
  previousdeltadfshash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Deltas.Delta.PreviousDeltaDfsHash)
}
#endif
inline void Delta::set_previousdeltadfshash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  previousdeltadfshash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Deltas.Delta.PreviousDeltaDfsHash)
}
inline void Delta::set_previousdeltadfshash(const void* value, size_t size) {
  
  previousdeltadfshash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Deltas.Delta.PreviousDeltaDfsHash)
}
inline ::std::string* Delta::mutable_previousdeltadfshash() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Deltas.Delta.PreviousDeltaDfsHash)
  return previousdeltadfshash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Delta::release_previousdeltadfshash() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Deltas.Delta.PreviousDeltaDfsHash)
  
  return previousdeltadfshash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Delta::set_allocated_previousdeltadfshash(::std::string* previousdeltadfshash) {
  if (previousdeltadfshash != NULL) {
    
  } else {
    
  }
  previousdeltadfshash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), previousdeltadfshash);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Deltas.Delta.PreviousDeltaDfsHash)
}

// bytes MerkleRoot = 3;
inline void Delta::clear_merkleroot() {
  merkleroot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Delta::merkleroot() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Deltas.Delta.MerkleRoot)
  return merkleroot_.GetNoArena();
}
inline void Delta::set_merkleroot(const ::std::string& value) {
  
  merkleroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Deltas.Delta.MerkleRoot)
}
#if LANG_CXX11
inline void Delta::set_merkleroot(::std::string&& value) {
  
  merkleroot_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Deltas.Delta.MerkleRoot)
}
#endif
inline void Delta::set_merkleroot(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  merkleroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Deltas.Delta.MerkleRoot)
}
inline void Delta::set_merkleroot(const void* value, size_t size) {
  
  merkleroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Deltas.Delta.MerkleRoot)
}
inline ::std::string* Delta::mutable_merkleroot() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Deltas.Delta.MerkleRoot)
  return merkleroot_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Delta::release_merkleroot() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Deltas.Delta.MerkleRoot)
  
  return merkleroot_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Delta::set_allocated_merkleroot(::std::string* merkleroot) {
  if (merkleroot != NULL) {
    
  } else {
    
  }
  merkleroot_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), merkleroot);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Deltas.Delta.MerkleRoot)
}

// bytes MerklePoda = 4;
inline void Delta::clear_merklepoda() {
  merklepoda_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Delta::merklepoda() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Deltas.Delta.MerklePoda)
  return merklepoda_.GetNoArena();
}
inline void Delta::set_merklepoda(const ::std::string& value) {
  
  merklepoda_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Deltas.Delta.MerklePoda)
}
#if LANG_CXX11
inline void Delta::set_merklepoda(::std::string&& value) {
  
  merklepoda_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Deltas.Delta.MerklePoda)
}
#endif
inline void Delta::set_merklepoda(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  merklepoda_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Deltas.Delta.MerklePoda)
}
inline void Delta::set_merklepoda(const void* value, size_t size) {
  
  merklepoda_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Deltas.Delta.MerklePoda)
}
inline ::std::string* Delta::mutable_merklepoda() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Deltas.Delta.MerklePoda)
  return merklepoda_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Delta::release_merklepoda() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Deltas.Delta.MerklePoda)
  
  return merklepoda_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Delta::set_allocated_merklepoda(::std::string* merklepoda) {
  if (merklepoda != NULL) {
    
  } else {
    
  }
  merklepoda_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), merklepoda);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Deltas.Delta.MerklePoda)
}

// .google.protobuf.Timestamp TimeStamp = 5;
inline bool Delta::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
inline const ::google::protobuf::Timestamp& Delta::_internal_timestamp() const {
  return *timestamp_;
}
inline const ::google::protobuf::Timestamp& Delta::timestamp() const {
  const ::google::protobuf::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Deltas.Delta.TimeStamp)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Delta::release_timestamp() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Deltas.Delta.TimeStamp)
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Delta::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Deltas.Delta.TimeStamp)
  return timestamp_;
}
inline void Delta::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Deltas.Delta.TimeStamp)
}

// repeated .Catalyst.Protocol.Transaction.STTransactionEntry STEntries = 6;
inline int Delta::stentries_size() const {
  return stentries_.size();
}
inline ::Catalyst::Protocol::Transaction::STTransactionEntry* Delta::mutable_stentries(int index) {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Deltas.Delta.STEntries)
  return stentries_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::STTransactionEntry >*
Delta::mutable_stentries() {
  // @@protoc_insertion_point(field_mutable_list:Catalyst.Protocol.Deltas.Delta.STEntries)
  return &stentries_;
}
inline const ::Catalyst::Protocol::Transaction::STTransactionEntry& Delta::stentries(int index) const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Deltas.Delta.STEntries)
  return stentries_.Get(index);
}
inline ::Catalyst::Protocol::Transaction::STTransactionEntry* Delta::add_stentries() {
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Deltas.Delta.STEntries)
  return stentries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::STTransactionEntry >&
Delta::stentries() const {
  // @@protoc_insertion_point(field_list:Catalyst.Protocol.Deltas.Delta.STEntries)
  return stentries_;
}

// repeated .Catalyst.Protocol.Transaction.CFTransactionEntry CFEntries = 7;
inline int Delta::cfentries_size() const {
  return cfentries_.size();
}
inline ::Catalyst::Protocol::Transaction::CFTransactionEntry* Delta::mutable_cfentries(int index) {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Deltas.Delta.CFEntries)
  return cfentries_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::CFTransactionEntry >*
Delta::mutable_cfentries() {
  // @@protoc_insertion_point(field_mutable_list:Catalyst.Protocol.Deltas.Delta.CFEntries)
  return &cfentries_;
}
inline const ::Catalyst::Protocol::Transaction::CFTransactionEntry& Delta::cfentries(int index) const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Deltas.Delta.CFEntries)
  return cfentries_.Get(index);
}
inline ::Catalyst::Protocol::Transaction::CFTransactionEntry* Delta::add_cfentries() {
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Deltas.Delta.CFEntries)
  return cfentries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::CFTransactionEntry >&
Delta::cfentries() const {
  // @@protoc_insertion_point(field_list:Catalyst.Protocol.Deltas.Delta.CFEntries)
  return cfentries_;
}

// repeated .Catalyst.Protocol.Transaction.CoinbaseEntry CBEntries = 8;
inline int Delta::cbentries_size() const {
  return cbentries_.size();
}
inline ::Catalyst::Protocol::Transaction::CoinbaseEntry* Delta::mutable_cbentries(int index) {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Deltas.Delta.CBEntries)
  return cbentries_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::CoinbaseEntry >*
Delta::mutable_cbentries() {
  // @@protoc_insertion_point(field_mutable_list:Catalyst.Protocol.Deltas.Delta.CBEntries)
  return &cbentries_;
}
inline const ::Catalyst::Protocol::Transaction::CoinbaseEntry& Delta::cbentries(int index) const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Deltas.Delta.CBEntries)
  return cbentries_.Get(index);
}
inline ::Catalyst::Protocol::Transaction::CoinbaseEntry* Delta::add_cbentries() {
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Deltas.Delta.CBEntries)
  return cbentries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::CoinbaseEntry >&
Delta::cbentries() const {
  // @@protoc_insertion_point(field_list:Catalyst.Protocol.Deltas.Delta.CBEntries)
  return cbentries_;
}

// -------------------------------------------------------------------

// CandidateDeltaBroadcast

// bytes Hash = 1;
inline void CandidateDeltaBroadcast::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CandidateDeltaBroadcast::hash() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Deltas.CandidateDeltaBroadcast.Hash)
  return hash_.GetNoArena();
}
inline void CandidateDeltaBroadcast::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Deltas.CandidateDeltaBroadcast.Hash)
}
#if LANG_CXX11
inline void CandidateDeltaBroadcast::set_hash(::std::string&& value) {
  
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Deltas.CandidateDeltaBroadcast.Hash)
}
#endif
inline void CandidateDeltaBroadcast::set_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Deltas.CandidateDeltaBroadcast.Hash)
}
inline void CandidateDeltaBroadcast::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Deltas.CandidateDeltaBroadcast.Hash)
}
inline ::std::string* CandidateDeltaBroadcast::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Deltas.CandidateDeltaBroadcast.Hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CandidateDeltaBroadcast::release_hash() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Deltas.CandidateDeltaBroadcast.Hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CandidateDeltaBroadcast::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Deltas.CandidateDeltaBroadcast.Hash)
}

// .Catalyst.Protocol.Common.PeerId ProducerId = 2;
inline bool CandidateDeltaBroadcast::has_producerid() const {
  return this != internal_default_instance() && producerid_ != NULL;
}
inline const ::Catalyst::Protocol::Common::PeerId& CandidateDeltaBroadcast::_internal_producerid() const {
  return *producerid_;
}
inline const ::Catalyst::Protocol::Common::PeerId& CandidateDeltaBroadcast::producerid() const {
  const ::Catalyst::Protocol::Common::PeerId* p = producerid_;
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Deltas.CandidateDeltaBroadcast.ProducerId)
  return p != NULL ? *p : *reinterpret_cast<const ::Catalyst::Protocol::Common::PeerId*>(
      &::Catalyst::Protocol::Common::_PeerId_default_instance_);
}
inline ::Catalyst::Protocol::Common::PeerId* CandidateDeltaBroadcast::release_producerid() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Deltas.CandidateDeltaBroadcast.ProducerId)
  
  ::Catalyst::Protocol::Common::PeerId* temp = producerid_;
  producerid_ = NULL;
  return temp;
}
inline ::Catalyst::Protocol::Common::PeerId* CandidateDeltaBroadcast::mutable_producerid() {
  
  if (producerid_ == NULL) {
    auto* p = CreateMaybeMessage<::Catalyst::Protocol::Common::PeerId>(GetArenaNoVirtual());
    producerid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Deltas.CandidateDeltaBroadcast.ProducerId)
  return producerid_;
}
inline void CandidateDeltaBroadcast::set_allocated_producerid(::Catalyst::Protocol::Common::PeerId* producerid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(producerid_);
  }
  if (producerid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      producerid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, producerid, submessage_arena);
    }
    
  } else {
    
  }
  producerid_ = producerid;
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Deltas.CandidateDeltaBroadcast.ProducerId)
}

// bytes PreviousDeltaDfsHash = 3;
inline void CandidateDeltaBroadcast::clear_previousdeltadfshash() {
  previousdeltadfshash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CandidateDeltaBroadcast::previousdeltadfshash() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Deltas.CandidateDeltaBroadcast.PreviousDeltaDfsHash)
  return previousdeltadfshash_.GetNoArena();
}
inline void CandidateDeltaBroadcast::set_previousdeltadfshash(const ::std::string& value) {
  
  previousdeltadfshash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Deltas.CandidateDeltaBroadcast.PreviousDeltaDfsHash)
}
#if LANG_CXX11
inline void CandidateDeltaBroadcast::set_previousdeltadfshash(::std::string&& value) {
  
  previousdeltadfshash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Deltas.CandidateDeltaBroadcast.PreviousDeltaDfsHash)
}
#endif
inline void CandidateDeltaBroadcast::set_previousdeltadfshash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  previousdeltadfshash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Deltas.CandidateDeltaBroadcast.PreviousDeltaDfsHash)
}
inline void CandidateDeltaBroadcast::set_previousdeltadfshash(const void* value, size_t size) {
  
  previousdeltadfshash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Deltas.CandidateDeltaBroadcast.PreviousDeltaDfsHash)
}
inline ::std::string* CandidateDeltaBroadcast::mutable_previousdeltadfshash() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Deltas.CandidateDeltaBroadcast.PreviousDeltaDfsHash)
  return previousdeltadfshash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CandidateDeltaBroadcast::release_previousdeltadfshash() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Deltas.CandidateDeltaBroadcast.PreviousDeltaDfsHash)
  
  return previousdeltadfshash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CandidateDeltaBroadcast::set_allocated_previousdeltadfshash(::std::string* previousdeltadfshash) {
  if (previousdeltadfshash != NULL) {
    
  } else {
    
  }
  previousdeltadfshash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), previousdeltadfshash);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Deltas.CandidateDeltaBroadcast.PreviousDeltaDfsHash)
}

// -------------------------------------------------------------------

// FavouriteDeltaBroadcast

// .Catalyst.Protocol.Deltas.CandidateDeltaBroadcast Candidate = 1;
inline bool FavouriteDeltaBroadcast::has_candidate() const {
  return this != internal_default_instance() && candidate_ != NULL;
}
inline void FavouriteDeltaBroadcast::clear_candidate() {
  if (GetArenaNoVirtual() == NULL && candidate_ != NULL) {
    delete candidate_;
  }
  candidate_ = NULL;
}
inline const ::Catalyst::Protocol::Deltas::CandidateDeltaBroadcast& FavouriteDeltaBroadcast::_internal_candidate() const {
  return *candidate_;
}
inline const ::Catalyst::Protocol::Deltas::CandidateDeltaBroadcast& FavouriteDeltaBroadcast::candidate() const {
  const ::Catalyst::Protocol::Deltas::CandidateDeltaBroadcast* p = candidate_;
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Deltas.FavouriteDeltaBroadcast.Candidate)
  return p != NULL ? *p : *reinterpret_cast<const ::Catalyst::Protocol::Deltas::CandidateDeltaBroadcast*>(
      &::Catalyst::Protocol::Deltas::_CandidateDeltaBroadcast_default_instance_);
}
inline ::Catalyst::Protocol::Deltas::CandidateDeltaBroadcast* FavouriteDeltaBroadcast::release_candidate() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Deltas.FavouriteDeltaBroadcast.Candidate)
  
  ::Catalyst::Protocol::Deltas::CandidateDeltaBroadcast* temp = candidate_;
  candidate_ = NULL;
  return temp;
}
inline ::Catalyst::Protocol::Deltas::CandidateDeltaBroadcast* FavouriteDeltaBroadcast::mutable_candidate() {
  
  if (candidate_ == NULL) {
    auto* p = CreateMaybeMessage<::Catalyst::Protocol::Deltas::CandidateDeltaBroadcast>(GetArenaNoVirtual());
    candidate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Deltas.FavouriteDeltaBroadcast.Candidate)
  return candidate_;
}
inline void FavouriteDeltaBroadcast::set_allocated_candidate(::Catalyst::Protocol::Deltas::CandidateDeltaBroadcast* candidate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete candidate_;
  }
  if (candidate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      candidate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, candidate, submessage_arena);
    }
    
  } else {
    
  }
  candidate_ = candidate;
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Deltas.FavouriteDeltaBroadcast.Candidate)
}

// .Catalyst.Protocol.Common.PeerId VoterId = 2;
inline bool FavouriteDeltaBroadcast::has_voterid() const {
  return this != internal_default_instance() && voterid_ != NULL;
}
inline const ::Catalyst::Protocol::Common::PeerId& FavouriteDeltaBroadcast::_internal_voterid() const {
  return *voterid_;
}
inline const ::Catalyst::Protocol::Common::PeerId& FavouriteDeltaBroadcast::voterid() const {
  const ::Catalyst::Protocol::Common::PeerId* p = voterid_;
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Deltas.FavouriteDeltaBroadcast.VoterId)
  return p != NULL ? *p : *reinterpret_cast<const ::Catalyst::Protocol::Common::PeerId*>(
      &::Catalyst::Protocol::Common::_PeerId_default_instance_);
}
inline ::Catalyst::Protocol::Common::PeerId* FavouriteDeltaBroadcast::release_voterid() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Deltas.FavouriteDeltaBroadcast.VoterId)
  
  ::Catalyst::Protocol::Common::PeerId* temp = voterid_;
  voterid_ = NULL;
  return temp;
}
inline ::Catalyst::Protocol::Common::PeerId* FavouriteDeltaBroadcast::mutable_voterid() {
  
  if (voterid_ == NULL) {
    auto* p = CreateMaybeMessage<::Catalyst::Protocol::Common::PeerId>(GetArenaNoVirtual());
    voterid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Deltas.FavouriteDeltaBroadcast.VoterId)
  return voterid_;
}
inline void FavouriteDeltaBroadcast::set_allocated_voterid(::Catalyst::Protocol::Common::PeerId* voterid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(voterid_);
  }
  if (voterid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      voterid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, voterid, submessage_arena);
    }
    
  } else {
    
  }
  voterid_ = voterid;
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Deltas.FavouriteDeltaBroadcast.VoterId)
}

// -------------------------------------------------------------------

// DeltaDfsHashBroadcast

// bytes DeltaDfsHash = 1;
inline void DeltaDfsHashBroadcast::clear_deltadfshash() {
  deltadfshash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeltaDfsHashBroadcast::deltadfshash() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Deltas.DeltaDfsHashBroadcast.DeltaDfsHash)
  return deltadfshash_.GetNoArena();
}
inline void DeltaDfsHashBroadcast::set_deltadfshash(const ::std::string& value) {
  
  deltadfshash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Deltas.DeltaDfsHashBroadcast.DeltaDfsHash)
}
#if LANG_CXX11
inline void DeltaDfsHashBroadcast::set_deltadfshash(::std::string&& value) {
  
  deltadfshash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Deltas.DeltaDfsHashBroadcast.DeltaDfsHash)
}
#endif
inline void DeltaDfsHashBroadcast::set_deltadfshash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  deltadfshash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Deltas.DeltaDfsHashBroadcast.DeltaDfsHash)
}
inline void DeltaDfsHashBroadcast::set_deltadfshash(const void* value, size_t size) {
  
  deltadfshash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Deltas.DeltaDfsHashBroadcast.DeltaDfsHash)
}
inline ::std::string* DeltaDfsHashBroadcast::mutable_deltadfshash() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Deltas.DeltaDfsHashBroadcast.DeltaDfsHash)
  return deltadfshash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeltaDfsHashBroadcast::release_deltadfshash() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Deltas.DeltaDfsHashBroadcast.DeltaDfsHash)
  
  return deltadfshash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeltaDfsHashBroadcast::set_allocated_deltadfshash(::std::string* deltadfshash) {
  if (deltadfshash != NULL) {
    
  } else {
    
  }
  deltadfshash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deltadfshash);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Deltas.DeltaDfsHashBroadcast.DeltaDfsHash)
}

// bytes PreviousDeltaDfsHash = 2;
inline void DeltaDfsHashBroadcast::clear_previousdeltadfshash() {
  previousdeltadfshash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeltaDfsHashBroadcast::previousdeltadfshash() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Deltas.DeltaDfsHashBroadcast.PreviousDeltaDfsHash)
  return previousdeltadfshash_.GetNoArena();
}
inline void DeltaDfsHashBroadcast::set_previousdeltadfshash(const ::std::string& value) {
  
  previousdeltadfshash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Deltas.DeltaDfsHashBroadcast.PreviousDeltaDfsHash)
}
#if LANG_CXX11
inline void DeltaDfsHashBroadcast::set_previousdeltadfshash(::std::string&& value) {
  
  previousdeltadfshash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Deltas.DeltaDfsHashBroadcast.PreviousDeltaDfsHash)
}
#endif
inline void DeltaDfsHashBroadcast::set_previousdeltadfshash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  previousdeltadfshash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Deltas.DeltaDfsHashBroadcast.PreviousDeltaDfsHash)
}
inline void DeltaDfsHashBroadcast::set_previousdeltadfshash(const void* value, size_t size) {
  
  previousdeltadfshash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Deltas.DeltaDfsHashBroadcast.PreviousDeltaDfsHash)
}
inline ::std::string* DeltaDfsHashBroadcast::mutable_previousdeltadfshash() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Deltas.DeltaDfsHashBroadcast.PreviousDeltaDfsHash)
  return previousdeltadfshash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeltaDfsHashBroadcast::release_previousdeltadfshash() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Deltas.DeltaDfsHashBroadcast.PreviousDeltaDfsHash)
  
  return previousdeltadfshash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeltaDfsHashBroadcast::set_allocated_previousdeltadfshash(::std::string* previousdeltadfshash) {
  if (previousdeltadfshash != NULL) {
    
  } else {
    
  }
  previousdeltadfshash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), previousdeltadfshash);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Deltas.DeltaDfsHashBroadcast.PreviousDeltaDfsHash)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Deltas
}  // namespace Protocol
}  // namespace Catalyst

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Deltas_2eproto
