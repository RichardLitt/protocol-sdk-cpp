// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DfsMarketplace.proto

#ifndef PROTOBUF_INCLUDED_DfsMarketplace_2eproto
#define PROTOBUF_INCLUDED_DfsMarketplace_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Common.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_DfsMarketplace_2eproto 

namespace protobuf_DfsMarketplace_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_DfsMarketplace_2eproto
namespace Catalyst {
namespace Protocol {
namespace DfsMarketplace {
class BlockChallengeBroadcast;
class BlockChallengeBroadcastDefaultTypeInternal;
extern BlockChallengeBroadcastDefaultTypeInternal _BlockChallengeBroadcast_default_instance_;
class BlockChallengeRequest;
class BlockChallengeRequestDefaultTypeInternal;
extern BlockChallengeRequestDefaultTypeInternal _BlockChallengeRequest_default_instance_;
class BlockChallengeResponse;
class BlockChallengeResponseDefaultTypeInternal;
extern BlockChallengeResponseDefaultTypeInternal _BlockChallengeResponse_default_instance_;
}  // namespace DfsMarketplace
}  // namespace Protocol
}  // namespace Catalyst
namespace google {
namespace protobuf {
template<> ::Catalyst::Protocol::DfsMarketplace::BlockChallengeBroadcast* Arena::CreateMaybeMessage<::Catalyst::Protocol::DfsMarketplace::BlockChallengeBroadcast>(Arena*);
template<> ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest* Arena::CreateMaybeMessage<::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest>(Arena*);
template<> ::Catalyst::Protocol::DfsMarketplace::BlockChallengeResponse* Arena::CreateMaybeMessage<::Catalyst::Protocol::DfsMarketplace::BlockChallengeResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Catalyst {
namespace Protocol {
namespace DfsMarketplace {

// ===================================================================

class BlockChallengeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest) */ {
 public:
  BlockChallengeRequest();
  virtual ~BlockChallengeRequest();

  BlockChallengeRequest(const BlockChallengeRequest& from);

  inline BlockChallengeRequest& operator=(const BlockChallengeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BlockChallengeRequest(BlockChallengeRequest&& from) noexcept
    : BlockChallengeRequest() {
    *this = ::std::move(from);
  }

  inline BlockChallengeRequest& operator=(BlockChallengeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockChallengeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockChallengeRequest* internal_default_instance() {
    return reinterpret_cast<const BlockChallengeRequest*>(
               &_BlockChallengeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(BlockChallengeRequest* other);
  friend void swap(BlockChallengeRequest& a, BlockChallengeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BlockChallengeRequest* New() const final {
    return CreateMaybeMessage<BlockChallengeRequest>(NULL);
  }

  BlockChallengeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BlockChallengeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BlockChallengeRequest& from);
  void MergeFrom(const BlockChallengeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockChallengeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string challengeSalt = 1;
  void clear_challengesalt();
  static const int kChallengeSaltFieldNumber = 1;
  const ::std::string& challengesalt() const;
  void set_challengesalt(const ::std::string& value);
  #if LANG_CXX11
  void set_challengesalt(::std::string&& value);
  #endif
  void set_challengesalt(const char* value);
  void set_challengesalt(const char* value, size_t size);
  ::std::string* mutable_challengesalt();
  ::std::string* release_challengesalt();
  void set_allocated_challengesalt(::std::string* challengesalt);

  // string mainFileCid = 2;
  void clear_mainfilecid();
  static const int kMainFileCidFieldNumber = 2;
  const ::std::string& mainfilecid() const;
  void set_mainfilecid(const ::std::string& value);
  #if LANG_CXX11
  void set_mainfilecid(::std::string&& value);
  #endif
  void set_mainfilecid(const char* value);
  void set_mainfilecid(const char* value, size_t size);
  ::std::string* mutable_mainfilecid();
  ::std::string* release_mainfilecid();
  void set_allocated_mainfilecid(::std::string* mainfilecid);

  // bytes blockIdxRandomGuid = 3;
  void clear_blockidxrandomguid();
  static const int kBlockIdxRandomGuidFieldNumber = 3;
  const ::std::string& blockidxrandomguid() const;
  void set_blockidxrandomguid(const ::std::string& value);
  #if LANG_CXX11
  void set_blockidxrandomguid(::std::string&& value);
  #endif
  void set_blockidxrandomguid(const char* value);
  void set_blockidxrandomguid(const void* value, size_t size);
  ::std::string* mutable_blockidxrandomguid();
  ::std::string* release_blockidxrandomguid();
  void set_allocated_blockidxrandomguid(::std::string* blockidxrandomguid);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr challengesalt_;
  ::google::protobuf::internal::ArenaStringPtr mainfilecid_;
  ::google::protobuf::internal::ArenaStringPtr blockidxrandomguid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DfsMarketplace_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BlockChallengeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse) */ {
 public:
  BlockChallengeResponse();
  virtual ~BlockChallengeResponse();

  BlockChallengeResponse(const BlockChallengeResponse& from);

  inline BlockChallengeResponse& operator=(const BlockChallengeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BlockChallengeResponse(BlockChallengeResponse&& from) noexcept
    : BlockChallengeResponse() {
    *this = ::std::move(from);
  }

  inline BlockChallengeResponse& operator=(BlockChallengeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockChallengeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockChallengeResponse* internal_default_instance() {
    return reinterpret_cast<const BlockChallengeResponse*>(
               &_BlockChallengeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(BlockChallengeResponse* other);
  friend void swap(BlockChallengeResponse& a, BlockChallengeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BlockChallengeResponse* New() const final {
    return CreateMaybeMessage<BlockChallengeResponse>(NULL);
  }

  BlockChallengeResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BlockChallengeResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BlockChallengeResponse& from);
  void MergeFrom(const BlockChallengeResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockChallengeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string answer = 1;
  void clear_answer();
  static const int kAnswerFieldNumber = 1;
  const ::std::string& answer() const;
  void set_answer(const ::std::string& value);
  #if LANG_CXX11
  void set_answer(::std::string&& value);
  #endif
  void set_answer(const char* value);
  void set_answer(const char* value, size_t size);
  ::std::string* mutable_answer();
  ::std::string* release_answer();
  void set_allocated_answer(::std::string* answer);

  // string blockChallengeRequestHash = 2;
  void clear_blockchallengerequesthash();
  static const int kBlockChallengeRequestHashFieldNumber = 2;
  const ::std::string& blockchallengerequesthash() const;
  void set_blockchallengerequesthash(const ::std::string& value);
  #if LANG_CXX11
  void set_blockchallengerequesthash(::std::string&& value);
  #endif
  void set_blockchallengerequesthash(const char* value);
  void set_blockchallengerequesthash(const char* value, size_t size);
  ::std::string* mutable_blockchallengerequesthash();
  ::std::string* release_blockchallengerequesthash();
  void set_allocated_blockchallengerequesthash(::std::string* blockchallengerequesthash);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr answer_;
  ::google::protobuf::internal::ArenaStringPtr blockchallengerequesthash_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DfsMarketplace_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BlockChallengeBroadcast : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast) */ {
 public:
  BlockChallengeBroadcast();
  virtual ~BlockChallengeBroadcast();

  BlockChallengeBroadcast(const BlockChallengeBroadcast& from);

  inline BlockChallengeBroadcast& operator=(const BlockChallengeBroadcast& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BlockChallengeBroadcast(BlockChallengeBroadcast&& from) noexcept
    : BlockChallengeBroadcast() {
    *this = ::std::move(from);
  }

  inline BlockChallengeBroadcast& operator=(BlockChallengeBroadcast&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockChallengeBroadcast& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockChallengeBroadcast* internal_default_instance() {
    return reinterpret_cast<const BlockChallengeBroadcast*>(
               &_BlockChallengeBroadcast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(BlockChallengeBroadcast* other);
  friend void swap(BlockChallengeBroadcast& a, BlockChallengeBroadcast& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BlockChallengeBroadcast* New() const final {
    return CreateMaybeMessage<BlockChallengeBroadcast>(NULL);
  }

  BlockChallengeBroadcast* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BlockChallengeBroadcast>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BlockChallengeBroadcast& from);
  void MergeFrom(const BlockChallengeBroadcast& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockChallengeBroadcast* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string answer = 2;
  void clear_answer();
  static const int kAnswerFieldNumber = 2;
  const ::std::string& answer() const;
  void set_answer(const ::std::string& value);
  #if LANG_CXX11
  void set_answer(::std::string&& value);
  #endif
  void set_answer(const char* value);
  void set_answer(const char* value, size_t size);
  ::std::string* mutable_answer();
  ::std::string* release_answer();
  void set_allocated_answer(::std::string* answer);

  // .Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest originalChallenge = 1;
  bool has_originalchallenge() const;
  void clear_originalchallenge();
  static const int kOriginalChallengeFieldNumber = 1;
  private:
  const ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest& _internal_originalchallenge() const;
  public:
  const ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest& originalchallenge() const;
  ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest* release_originalchallenge();
  ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest* mutable_originalchallenge();
  void set_allocated_originalchallenge(::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest* originalchallenge);

  // .Catalyst.Protocol.Common.PeerId challengedPeer = 3;
  bool has_challengedpeer() const;
  void clear_challengedpeer();
  static const int kChallengedPeerFieldNumber = 3;
  private:
  const ::Catalyst::Protocol::Common::PeerId& _internal_challengedpeer() const;
  public:
  const ::Catalyst::Protocol::Common::PeerId& challengedpeer() const;
  ::Catalyst::Protocol::Common::PeerId* release_challengedpeer();
  ::Catalyst::Protocol::Common::PeerId* mutable_challengedpeer();
  void set_allocated_challengedpeer(::Catalyst::Protocol::Common::PeerId* challengedpeer);

  // .Catalyst.Protocol.Common.PeerId challengedBy = 4;
  bool has_challengedby() const;
  void clear_challengedby();
  static const int kChallengedByFieldNumber = 4;
  private:
  const ::Catalyst::Protocol::Common::PeerId& _internal_challengedby() const;
  public:
  const ::Catalyst::Protocol::Common::PeerId& challengedby() const;
  ::Catalyst::Protocol::Common::PeerId* release_challengedby();
  ::Catalyst::Protocol::Common::PeerId* mutable_challengedby();
  void set_allocated_challengedby(::Catalyst::Protocol::Common::PeerId* challengedby);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr answer_;
  ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest* originalchallenge_;
  ::Catalyst::Protocol::Common::PeerId* challengedpeer_;
  ::Catalyst::Protocol::Common::PeerId* challengedby_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_DfsMarketplace_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BlockChallengeRequest

// string challengeSalt = 1;
inline void BlockChallengeRequest::clear_challengesalt() {
  challengesalt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlockChallengeRequest::challengesalt() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.challengeSalt)
  return challengesalt_.GetNoArena();
}
inline void BlockChallengeRequest::set_challengesalt(const ::std::string& value) {
  
  challengesalt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.challengeSalt)
}
#if LANG_CXX11
inline void BlockChallengeRequest::set_challengesalt(::std::string&& value) {
  
  challengesalt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.challengeSalt)
}
#endif
inline void BlockChallengeRequest::set_challengesalt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  challengesalt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.challengeSalt)
}
inline void BlockChallengeRequest::set_challengesalt(const char* value, size_t size) {
  
  challengesalt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.challengeSalt)
}
inline ::std::string* BlockChallengeRequest::mutable_challengesalt() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.challengeSalt)
  return challengesalt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockChallengeRequest::release_challengesalt() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.challengeSalt)
  
  return challengesalt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockChallengeRequest::set_allocated_challengesalt(::std::string* challengesalt) {
  if (challengesalt != NULL) {
    
  } else {
    
  }
  challengesalt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), challengesalt);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.challengeSalt)
}

// string mainFileCid = 2;
inline void BlockChallengeRequest::clear_mainfilecid() {
  mainfilecid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlockChallengeRequest::mainfilecid() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.mainFileCid)
  return mainfilecid_.GetNoArena();
}
inline void BlockChallengeRequest::set_mainfilecid(const ::std::string& value) {
  
  mainfilecid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.mainFileCid)
}
#if LANG_CXX11
inline void BlockChallengeRequest::set_mainfilecid(::std::string&& value) {
  
  mainfilecid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.mainFileCid)
}
#endif
inline void BlockChallengeRequest::set_mainfilecid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mainfilecid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.mainFileCid)
}
inline void BlockChallengeRequest::set_mainfilecid(const char* value, size_t size) {
  
  mainfilecid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.mainFileCid)
}
inline ::std::string* BlockChallengeRequest::mutable_mainfilecid() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.mainFileCid)
  return mainfilecid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockChallengeRequest::release_mainfilecid() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.mainFileCid)
  
  return mainfilecid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockChallengeRequest::set_allocated_mainfilecid(::std::string* mainfilecid) {
  if (mainfilecid != NULL) {
    
  } else {
    
  }
  mainfilecid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mainfilecid);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.mainFileCid)
}

// bytes blockIdxRandomGuid = 3;
inline void BlockChallengeRequest::clear_blockidxrandomguid() {
  blockidxrandomguid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlockChallengeRequest::blockidxrandomguid() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.blockIdxRandomGuid)
  return blockidxrandomguid_.GetNoArena();
}
inline void BlockChallengeRequest::set_blockidxrandomguid(const ::std::string& value) {
  
  blockidxrandomguid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.blockIdxRandomGuid)
}
#if LANG_CXX11
inline void BlockChallengeRequest::set_blockidxrandomguid(::std::string&& value) {
  
  blockidxrandomguid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.blockIdxRandomGuid)
}
#endif
inline void BlockChallengeRequest::set_blockidxrandomguid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  blockidxrandomguid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.blockIdxRandomGuid)
}
inline void BlockChallengeRequest::set_blockidxrandomguid(const void* value, size_t size) {
  
  blockidxrandomguid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.blockIdxRandomGuid)
}
inline ::std::string* BlockChallengeRequest::mutable_blockidxrandomguid() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.blockIdxRandomGuid)
  return blockidxrandomguid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockChallengeRequest::release_blockidxrandomguid() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.blockIdxRandomGuid)
  
  return blockidxrandomguid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockChallengeRequest::set_allocated_blockidxrandomguid(::std::string* blockidxrandomguid) {
  if (blockidxrandomguid != NULL) {
    
  } else {
    
  }
  blockidxrandomguid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), blockidxrandomguid);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.blockIdxRandomGuid)
}

// -------------------------------------------------------------------

// BlockChallengeResponse

// string answer = 1;
inline void BlockChallengeResponse::clear_answer() {
  answer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlockChallengeResponse::answer() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.answer)
  return answer_.GetNoArena();
}
inline void BlockChallengeResponse::set_answer(const ::std::string& value) {
  
  answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.answer)
}
#if LANG_CXX11
inline void BlockChallengeResponse::set_answer(::std::string&& value) {
  
  answer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.answer)
}
#endif
inline void BlockChallengeResponse::set_answer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.answer)
}
inline void BlockChallengeResponse::set_answer(const char* value, size_t size) {
  
  answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.answer)
}
inline ::std::string* BlockChallengeResponse::mutable_answer() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.answer)
  return answer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockChallengeResponse::release_answer() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.answer)
  
  return answer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockChallengeResponse::set_allocated_answer(::std::string* answer) {
  if (answer != NULL) {
    
  } else {
    
  }
  answer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), answer);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.answer)
}

// string blockChallengeRequestHash = 2;
inline void BlockChallengeResponse::clear_blockchallengerequesthash() {
  blockchallengerequesthash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlockChallengeResponse::blockchallengerequesthash() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.blockChallengeRequestHash)
  return blockchallengerequesthash_.GetNoArena();
}
inline void BlockChallengeResponse::set_blockchallengerequesthash(const ::std::string& value) {
  
  blockchallengerequesthash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.blockChallengeRequestHash)
}
#if LANG_CXX11
inline void BlockChallengeResponse::set_blockchallengerequesthash(::std::string&& value) {
  
  blockchallengerequesthash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.blockChallengeRequestHash)
}
#endif
inline void BlockChallengeResponse::set_blockchallengerequesthash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  blockchallengerequesthash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.blockChallengeRequestHash)
}
inline void BlockChallengeResponse::set_blockchallengerequesthash(const char* value, size_t size) {
  
  blockchallengerequesthash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.blockChallengeRequestHash)
}
inline ::std::string* BlockChallengeResponse::mutable_blockchallengerequesthash() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.blockChallengeRequestHash)
  return blockchallengerequesthash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockChallengeResponse::release_blockchallengerequesthash() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.blockChallengeRequestHash)
  
  return blockchallengerequesthash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockChallengeResponse::set_allocated_blockchallengerequesthash(::std::string* blockchallengerequesthash) {
  if (blockchallengerequesthash != NULL) {
    
  } else {
    
  }
  blockchallengerequesthash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), blockchallengerequesthash);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.blockChallengeRequestHash)
}

// -------------------------------------------------------------------

// BlockChallengeBroadcast

// .Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest originalChallenge = 1;
inline bool BlockChallengeBroadcast::has_originalchallenge() const {
  return this != internal_default_instance() && originalchallenge_ != NULL;
}
inline void BlockChallengeBroadcast::clear_originalchallenge() {
  if (GetArenaNoVirtual() == NULL && originalchallenge_ != NULL) {
    delete originalchallenge_;
  }
  originalchallenge_ = NULL;
}
inline const ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest& BlockChallengeBroadcast::_internal_originalchallenge() const {
  return *originalchallenge_;
}
inline const ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest& BlockChallengeBroadcast::originalchallenge() const {
  const ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest* p = originalchallenge_;
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.originalChallenge)
  return p != NULL ? *p : *reinterpret_cast<const ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest*>(
      &::Catalyst::Protocol::DfsMarketplace::_BlockChallengeRequest_default_instance_);
}
inline ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest* BlockChallengeBroadcast::release_originalchallenge() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.originalChallenge)
  
  ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest* temp = originalchallenge_;
  originalchallenge_ = NULL;
  return temp;
}
inline ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest* BlockChallengeBroadcast::mutable_originalchallenge() {
  
  if (originalchallenge_ == NULL) {
    auto* p = CreateMaybeMessage<::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest>(GetArenaNoVirtual());
    originalchallenge_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.originalChallenge)
  return originalchallenge_;
}
inline void BlockChallengeBroadcast::set_allocated_originalchallenge(::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest* originalchallenge) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete originalchallenge_;
  }
  if (originalchallenge) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      originalchallenge = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, originalchallenge, submessage_arena);
    }
    
  } else {
    
  }
  originalchallenge_ = originalchallenge;
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.originalChallenge)
}

// string answer = 2;
inline void BlockChallengeBroadcast::clear_answer() {
  answer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlockChallengeBroadcast::answer() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.answer)
  return answer_.GetNoArena();
}
inline void BlockChallengeBroadcast::set_answer(const ::std::string& value) {
  
  answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.answer)
}
#if LANG_CXX11
inline void BlockChallengeBroadcast::set_answer(::std::string&& value) {
  
  answer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.answer)
}
#endif
inline void BlockChallengeBroadcast::set_answer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.answer)
}
inline void BlockChallengeBroadcast::set_answer(const char* value, size_t size) {
  
  answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.answer)
}
inline ::std::string* BlockChallengeBroadcast::mutable_answer() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.answer)
  return answer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockChallengeBroadcast::release_answer() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.answer)
  
  return answer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockChallengeBroadcast::set_allocated_answer(::std::string* answer) {
  if (answer != NULL) {
    
  } else {
    
  }
  answer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), answer);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.answer)
}

// .Catalyst.Protocol.Common.PeerId challengedPeer = 3;
inline bool BlockChallengeBroadcast::has_challengedpeer() const {
  return this != internal_default_instance() && challengedpeer_ != NULL;
}
inline const ::Catalyst::Protocol::Common::PeerId& BlockChallengeBroadcast::_internal_challengedpeer() const {
  return *challengedpeer_;
}
inline const ::Catalyst::Protocol::Common::PeerId& BlockChallengeBroadcast::challengedpeer() const {
  const ::Catalyst::Protocol::Common::PeerId* p = challengedpeer_;
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.challengedPeer)
  return p != NULL ? *p : *reinterpret_cast<const ::Catalyst::Protocol::Common::PeerId*>(
      &::Catalyst::Protocol::Common::_PeerId_default_instance_);
}
inline ::Catalyst::Protocol::Common::PeerId* BlockChallengeBroadcast::release_challengedpeer() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.challengedPeer)
  
  ::Catalyst::Protocol::Common::PeerId* temp = challengedpeer_;
  challengedpeer_ = NULL;
  return temp;
}
inline ::Catalyst::Protocol::Common::PeerId* BlockChallengeBroadcast::mutable_challengedpeer() {
  
  if (challengedpeer_ == NULL) {
    auto* p = CreateMaybeMessage<::Catalyst::Protocol::Common::PeerId>(GetArenaNoVirtual());
    challengedpeer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.challengedPeer)
  return challengedpeer_;
}
inline void BlockChallengeBroadcast::set_allocated_challengedpeer(::Catalyst::Protocol::Common::PeerId* challengedpeer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(challengedpeer_);
  }
  if (challengedpeer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      challengedpeer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, challengedpeer, submessage_arena);
    }
    
  } else {
    
  }
  challengedpeer_ = challengedpeer;
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.challengedPeer)
}

// .Catalyst.Protocol.Common.PeerId challengedBy = 4;
inline bool BlockChallengeBroadcast::has_challengedby() const {
  return this != internal_default_instance() && challengedby_ != NULL;
}
inline const ::Catalyst::Protocol::Common::PeerId& BlockChallengeBroadcast::_internal_challengedby() const {
  return *challengedby_;
}
inline const ::Catalyst::Protocol::Common::PeerId& BlockChallengeBroadcast::challengedby() const {
  const ::Catalyst::Protocol::Common::PeerId* p = challengedby_;
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.challengedBy)
  return p != NULL ? *p : *reinterpret_cast<const ::Catalyst::Protocol::Common::PeerId*>(
      &::Catalyst::Protocol::Common::_PeerId_default_instance_);
}
inline ::Catalyst::Protocol::Common::PeerId* BlockChallengeBroadcast::release_challengedby() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.challengedBy)
  
  ::Catalyst::Protocol::Common::PeerId* temp = challengedby_;
  challengedby_ = NULL;
  return temp;
}
inline ::Catalyst::Protocol::Common::PeerId* BlockChallengeBroadcast::mutable_challengedby() {
  
  if (challengedby_ == NULL) {
    auto* p = CreateMaybeMessage<::Catalyst::Protocol::Common::PeerId>(GetArenaNoVirtual());
    challengedby_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.challengedBy)
  return challengedby_;
}
inline void BlockChallengeBroadcast::set_allocated_challengedby(::Catalyst::Protocol::Common::PeerId* challengedby) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(challengedby_);
  }
  if (challengedby) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      challengedby = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, challengedby, submessage_arena);
    }
    
  } else {
    
  }
  challengedby_ = challengedby;
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.challengedBy)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DfsMarketplace
}  // namespace Protocol
}  // namespace Catalyst

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_DfsMarketplace_2eproto
