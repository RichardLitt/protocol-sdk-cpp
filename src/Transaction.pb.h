// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Transaction.proto

#ifndef PROTOBUF_INCLUDED_Transaction_2eproto
#define PROTOBUF_INCLUDED_Transaction_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Transaction_2eproto 

namespace protobuf_Transaction_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Transaction_2eproto
namespace Catalyst {
namespace Protocol {
namespace Transaction {
class CFTransactionEntry;
class CFTransactionEntryDefaultTypeInternal;
extern CFTransactionEntryDefaultTypeInternal _CFTransactionEntry_default_instance_;
class CoinbaseEntry;
class CoinbaseEntryDefaultTypeInternal;
extern CoinbaseEntryDefaultTypeInternal _CoinbaseEntry_default_instance_;
class EntryRangeProof;
class EntryRangeProofDefaultTypeInternal;
extern EntryRangeProofDefaultTypeInternal _EntryRangeProof_default_instance_;
class STTransactionEntry;
class STTransactionEntryDefaultTypeInternal;
extern STTransactionEntryDefaultTypeInternal _STTransactionEntry_default_instance_;
class TransactionBroadcast;
class TransactionBroadcastDefaultTypeInternal;
extern TransactionBroadcastDefaultTypeInternal _TransactionBroadcast_default_instance_;
}  // namespace Transaction
}  // namespace Protocol
}  // namespace Catalyst
namespace google {
namespace protobuf {
template<> ::Catalyst::Protocol::Transaction::CFTransactionEntry* Arena::CreateMaybeMessage<::Catalyst::Protocol::Transaction::CFTransactionEntry>(Arena*);
template<> ::Catalyst::Protocol::Transaction::CoinbaseEntry* Arena::CreateMaybeMessage<::Catalyst::Protocol::Transaction::CoinbaseEntry>(Arena*);
template<> ::Catalyst::Protocol::Transaction::EntryRangeProof* Arena::CreateMaybeMessage<::Catalyst::Protocol::Transaction::EntryRangeProof>(Arena*);
template<> ::Catalyst::Protocol::Transaction::STTransactionEntry* Arena::CreateMaybeMessage<::Catalyst::Protocol::Transaction::STTransactionEntry>(Arena*);
template<> ::Catalyst::Protocol::Transaction::TransactionBroadcast* Arena::CreateMaybeMessage<::Catalyst::Protocol::Transaction::TransactionBroadcast>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Catalyst {
namespace Protocol {
namespace Transaction {

enum TransactionType {
  NORMAL = 0,
  CONFIDENTIAL = 1,
  TransactionType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TransactionType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TransactionType_IsValid(int value);
const TransactionType TransactionType_MIN = NORMAL;
const TransactionType TransactionType_MAX = CONFIDENTIAL;
const int TransactionType_ARRAYSIZE = TransactionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TransactionType_descriptor();
inline const ::std::string& TransactionType_Name(TransactionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TransactionType_descriptor(), value);
}
inline bool TransactionType_Parse(
    const ::std::string& name, TransactionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TransactionType>(
    TransactionType_descriptor(), name, value);
}
// ===================================================================

class TransactionBroadcast : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Transaction.TransactionBroadcast) */ {
 public:
  TransactionBroadcast();
  virtual ~TransactionBroadcast();

  TransactionBroadcast(const TransactionBroadcast& from);

  inline TransactionBroadcast& operator=(const TransactionBroadcast& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransactionBroadcast(TransactionBroadcast&& from) noexcept
    : TransactionBroadcast() {
    *this = ::std::move(from);
  }

  inline TransactionBroadcast& operator=(TransactionBroadcast&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransactionBroadcast& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionBroadcast* internal_default_instance() {
    return reinterpret_cast<const TransactionBroadcast*>(
               &_TransactionBroadcast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TransactionBroadcast* other);
  friend void swap(TransactionBroadcast& a, TransactionBroadcast& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransactionBroadcast* New() const final {
    return CreateMaybeMessage<TransactionBroadcast>(NULL);
  }

  TransactionBroadcast* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TransactionBroadcast>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TransactionBroadcast& from);
  void MergeFrom(const TransactionBroadcast& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionBroadcast* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Catalyst.Protocol.Transaction.STTransactionEntry STEntries = 5;
  int stentries_size() const;
  void clear_stentries();
  static const int kSTEntriesFieldNumber = 5;
  ::Catalyst::Protocol::Transaction::STTransactionEntry* mutable_stentries(int index);
  ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::STTransactionEntry >*
      mutable_stentries();
  const ::Catalyst::Protocol::Transaction::STTransactionEntry& stentries(int index) const;
  ::Catalyst::Protocol::Transaction::STTransactionEntry* add_stentries();
  const ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::STTransactionEntry >&
      stentries() const;

  // repeated .Catalyst.Protocol.Transaction.CFTransactionEntry CFEntries = 6;
  int cfentries_size() const;
  void clear_cfentries();
  static const int kCFEntriesFieldNumber = 6;
  ::Catalyst::Protocol::Transaction::CFTransactionEntry* mutable_cfentries(int index);
  ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::CFTransactionEntry >*
      mutable_cfentries();
  const ::Catalyst::Protocol::Transaction::CFTransactionEntry& cfentries(int index) const;
  ::Catalyst::Protocol::Transaction::CFTransactionEntry* add_cfentries();
  const ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::CFTransactionEntry >&
      cfentries() const;

  // bytes Signature = 7;
  void clear_signature();
  static const int kSignatureFieldNumber = 7;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // bytes Init = 9;
  void clear_init();
  static const int kInitFieldNumber = 9;
  const ::std::string& init() const;
  void set_init(const ::std::string& value);
  #if LANG_CXX11
  void set_init(::std::string&& value);
  #endif
  void set_init(const char* value);
  void set_init(const void* value, size_t size);
  ::std::string* mutable_init();
  ::std::string* release_init();
  void set_allocated_init(::std::string* init);

  // bytes Data = 10;
  void clear_data();
  static const int kDataFieldNumber = 10;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // bytes From = 11;
  void clear_from();
  static const int kFromFieldNumber = 11;
  const ::std::string& from() const;
  void set_from(const ::std::string& value);
  #if LANG_CXX11
  void set_from(::std::string&& value);
  #endif
  void set_from(const char* value);
  void set_from(const void* value, size_t size);
  ::std::string* mutable_from();
  ::std::string* release_from();
  void set_allocated_from(::std::string* from);

  // .google.protobuf.Timestamp TimeStamp = 2;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimeStampFieldNumber = 2;
  private:
  const ::google::protobuf::Timestamp& _internal_timestamp() const;
  public:
  const ::google::protobuf::Timestamp& timestamp() const;
  ::google::protobuf::Timestamp* release_timestamp();
  ::google::protobuf::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* timestamp);

  // uint64 TransactionFees = 3;
  void clear_transactionfees();
  static const int kTransactionFeesFieldNumber = 3;
  ::google::protobuf::uint64 transactionfees() const;
  void set_transactionfees(::google::protobuf::uint64 value);

  // uint64 LockTime = 4;
  void clear_locktime();
  static const int kLockTimeFieldNumber = 4;
  ::google::protobuf::uint64 locktime() const;
  void set_locktime(::google::protobuf::uint64 value);

  // .Catalyst.Protocol.Transaction.TransactionType TransactionType = 1;
  void clear_transactiontype();
  static const int kTransactionTypeFieldNumber = 1;
  ::Catalyst::Protocol::Transaction::TransactionType transactiontype() const;
  void set_transactiontype(::Catalyst::Protocol::Transaction::TransactionType value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Transaction.TransactionBroadcast)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::STTransactionEntry > stentries_;
  ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::CFTransactionEntry > cfentries_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::internal::ArenaStringPtr init_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr from_;
  ::google::protobuf::Timestamp* timestamp_;
  ::google::protobuf::uint64 transactionfees_;
  ::google::protobuf::uint64 locktime_;
  int transactiontype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Transaction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class STTransactionEntry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Transaction.STTransactionEntry) */ {
 public:
  STTransactionEntry();
  virtual ~STTransactionEntry();

  STTransactionEntry(const STTransactionEntry& from);

  inline STTransactionEntry& operator=(const STTransactionEntry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  STTransactionEntry(STTransactionEntry&& from) noexcept
    : STTransactionEntry() {
    *this = ::std::move(from);
  }

  inline STTransactionEntry& operator=(STTransactionEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const STTransactionEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const STTransactionEntry* internal_default_instance() {
    return reinterpret_cast<const STTransactionEntry*>(
               &_STTransactionEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(STTransactionEntry* other);
  friend void swap(STTransactionEntry& a, STTransactionEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline STTransactionEntry* New() const final {
    return CreateMaybeMessage<STTransactionEntry>(NULL);
  }

  STTransactionEntry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<STTransactionEntry>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const STTransactionEntry& from);
  void MergeFrom(const STTransactionEntry& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(STTransactionEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes PubKey = 1;
  void clear_pubkey();
  static const int kPubKeyFieldNumber = 1;
  const ::std::string& pubkey() const;
  void set_pubkey(const ::std::string& value);
  #if LANG_CXX11
  void set_pubkey(::std::string&& value);
  #endif
  void set_pubkey(const char* value);
  void set_pubkey(const void* value, size_t size);
  ::std::string* mutable_pubkey();
  ::std::string* release_pubkey();
  void set_allocated_pubkey(::std::string* pubkey);

  // uint64 Amount = 2;
  void clear_amount();
  static const int kAmountFieldNumber = 2;
  ::google::protobuf::uint64 amount() const;
  void set_amount(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Transaction.STTransactionEntry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pubkey_;
  ::google::protobuf::uint64 amount_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Transaction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CFTransactionEntry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Transaction.CFTransactionEntry) */ {
 public:
  CFTransactionEntry();
  virtual ~CFTransactionEntry();

  CFTransactionEntry(const CFTransactionEntry& from);

  inline CFTransactionEntry& operator=(const CFTransactionEntry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CFTransactionEntry(CFTransactionEntry&& from) noexcept
    : CFTransactionEntry() {
    *this = ::std::move(from);
  }

  inline CFTransactionEntry& operator=(CFTransactionEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CFTransactionEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CFTransactionEntry* internal_default_instance() {
    return reinterpret_cast<const CFTransactionEntry*>(
               &_CFTransactionEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CFTransactionEntry* other);
  friend void swap(CFTransactionEntry& a, CFTransactionEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CFTransactionEntry* New() const final {
    return CreateMaybeMessage<CFTransactionEntry>(NULL);
  }

  CFTransactionEntry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CFTransactionEntry>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CFTransactionEntry& from);
  void MergeFrom(const CFTransactionEntry& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CFTransactionEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes PubKey = 1;
  void clear_pubkey();
  static const int kPubKeyFieldNumber = 1;
  const ::std::string& pubkey() const;
  void set_pubkey(const ::std::string& value);
  #if LANG_CXX11
  void set_pubkey(::std::string&& value);
  #endif
  void set_pubkey(const char* value);
  void set_pubkey(const void* value, size_t size);
  ::std::string* mutable_pubkey();
  ::std::string* release_pubkey();
  void set_allocated_pubkey(::std::string* pubkey);

  // bytes PedersenCommit = 2;
  void clear_pedersencommit();
  static const int kPedersenCommitFieldNumber = 2;
  const ::std::string& pedersencommit() const;
  void set_pedersencommit(const ::std::string& value);
  #if LANG_CXX11
  void set_pedersencommit(::std::string&& value);
  #endif
  void set_pedersencommit(const char* value);
  void set_pedersencommit(const void* value, size_t size);
  ::std::string* mutable_pedersencommit();
  ::std::string* release_pedersencommit();
  void set_allocated_pedersencommit(::std::string* pedersencommit);

  // .Catalyst.Protocol.Transaction.EntryRangeProof EntryRangeProofs = 3;
  bool has_entryrangeproofs() const;
  void clear_entryrangeproofs();
  static const int kEntryRangeProofsFieldNumber = 3;
  private:
  const ::Catalyst::Protocol::Transaction::EntryRangeProof& _internal_entryrangeproofs() const;
  public:
  const ::Catalyst::Protocol::Transaction::EntryRangeProof& entryrangeproofs() const;
  ::Catalyst::Protocol::Transaction::EntryRangeProof* release_entryrangeproofs();
  ::Catalyst::Protocol::Transaction::EntryRangeProof* mutable_entryrangeproofs();
  void set_allocated_entryrangeproofs(::Catalyst::Protocol::Transaction::EntryRangeProof* entryrangeproofs);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Transaction.CFTransactionEntry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pubkey_;
  ::google::protobuf::internal::ArenaStringPtr pedersencommit_;
  ::Catalyst::Protocol::Transaction::EntryRangeProof* entryrangeproofs_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Transaction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EntryRangeProof : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Transaction.EntryRangeProof) */ {
 public:
  EntryRangeProof();
  virtual ~EntryRangeProof();

  EntryRangeProof(const EntryRangeProof& from);

  inline EntryRangeProof& operator=(const EntryRangeProof& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EntryRangeProof(EntryRangeProof&& from) noexcept
    : EntryRangeProof() {
    *this = ::std::move(from);
  }

  inline EntryRangeProof& operator=(EntryRangeProof&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EntryRangeProof& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntryRangeProof* internal_default_instance() {
    return reinterpret_cast<const EntryRangeProof*>(
               &_EntryRangeProof_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(EntryRangeProof* other);
  friend void swap(EntryRangeProof& a, EntryRangeProof& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EntryRangeProof* New() const final {
    return CreateMaybeMessage<EntryRangeProof>(NULL);
  }

  EntryRangeProof* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EntryRangeProof>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EntryRangeProof& from);
  void MergeFrom(const EntryRangeProof& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntryRangeProof* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes V = 1;
  int v_size() const;
  void clear_v();
  static const int kVFieldNumber = 1;
  const ::std::string& v(int index) const;
  ::std::string* mutable_v(int index);
  void set_v(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_v(int index, ::std::string&& value);
  #endif
  void set_v(int index, const char* value);
  void set_v(int index, const void* value, size_t size);
  ::std::string* add_v();
  void add_v(const ::std::string& value);
  #if LANG_CXX11
  void add_v(::std::string&& value);
  #endif
  void add_v(const char* value);
  void add_v(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& v() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_v();

  // repeated bytes L = 8;
  int l_size() const;
  void clear_l();
  static const int kLFieldNumber = 8;
  const ::std::string& l(int index) const;
  ::std::string* mutable_l(int index);
  void set_l(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_l(int index, ::std::string&& value);
  #endif
  void set_l(int index, const char* value);
  void set_l(int index, const void* value, size_t size);
  ::std::string* add_l();
  void add_l(const ::std::string& value);
  #if LANG_CXX11
  void add_l(::std::string&& value);
  #endif
  void add_l(const char* value);
  void add_l(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& l() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_l();

  // repeated bytes R = 9;
  int r_size() const;
  void clear_r();
  static const int kRFieldNumber = 9;
  const ::std::string& r(int index) const;
  ::std::string* mutable_r(int index);
  void set_r(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_r(int index, ::std::string&& value);
  #endif
  void set_r(int index, const char* value);
  void set_r(int index, const void* value, size_t size);
  ::std::string* add_r();
  void add_r(const ::std::string& value);
  #if LANG_CXX11
  void add_r(::std::string&& value);
  #endif
  void add_r(const char* value);
  void add_r(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& r() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_r();

  // bytes A = 2;
  void clear_a();
  static const int kAFieldNumber = 2;
  const ::std::string& a() const;
  void set_a(const ::std::string& value);
  #if LANG_CXX11
  void set_a(::std::string&& value);
  #endif
  void set_a(const char* value);
  void set_a(const void* value, size_t size);
  ::std::string* mutable_a();
  ::std::string* release_a();
  void set_allocated_a(::std::string* a);

  // bytes S = 3;
  void clear_s();
  static const int kSFieldNumber = 3;
  const ::std::string& s() const;
  void set_s(const ::std::string& value);
  #if LANG_CXX11
  void set_s(::std::string&& value);
  #endif
  void set_s(const char* value);
  void set_s(const void* value, size_t size);
  ::std::string* mutable_s();
  ::std::string* release_s();
  void set_allocated_s(::std::string* s);

  // bytes T1 = 4;
  void clear_t1();
  static const int kT1FieldNumber = 4;
  const ::std::string& t1() const;
  void set_t1(const ::std::string& value);
  #if LANG_CXX11
  void set_t1(::std::string&& value);
  #endif
  void set_t1(const char* value);
  void set_t1(const void* value, size_t size);
  ::std::string* mutable_t1();
  ::std::string* release_t1();
  void set_allocated_t1(::std::string* t1);

  // bytes T2 = 5;
  void clear_t2();
  static const int kT2FieldNumber = 5;
  const ::std::string& t2() const;
  void set_t2(const ::std::string& value);
  #if LANG_CXX11
  void set_t2(::std::string&& value);
  #endif
  void set_t2(const char* value);
  void set_t2(const void* value, size_t size);
  ::std::string* mutable_t2();
  ::std::string* release_t2();
  void set_allocated_t2(::std::string* t2);

  // bytes TAU = 6;
  void clear_tau();
  static const int kTAUFieldNumber = 6;
  const ::std::string& tau() const;
  void set_tau(const ::std::string& value);
  #if LANG_CXX11
  void set_tau(::std::string&& value);
  #endif
  void set_tau(const char* value);
  void set_tau(const void* value, size_t size);
  ::std::string* mutable_tau();
  ::std::string* release_tau();
  void set_allocated_tau(::std::string* tau);

  // bytes MU = 7;
  void clear_mu();
  static const int kMUFieldNumber = 7;
  const ::std::string& mu() const;
  void set_mu(const ::std::string& value);
  #if LANG_CXX11
  void set_mu(::std::string&& value);
  #endif
  void set_mu(const char* value);
  void set_mu(const void* value, size_t size);
  ::std::string* mutable_mu();
  ::std::string* release_mu();
  void set_allocated_mu(::std::string* mu);

  // bytes APrime0 = 10;
  void clear_aprime0();
  static const int kAPrime0FieldNumber = 10;
  const ::std::string& aprime0() const;
  void set_aprime0(const ::std::string& value);
  #if LANG_CXX11
  void set_aprime0(::std::string&& value);
  #endif
  void set_aprime0(const char* value);
  void set_aprime0(const void* value, size_t size);
  ::std::string* mutable_aprime0();
  ::std::string* release_aprime0();
  void set_allocated_aprime0(::std::string* aprime0);

  // bytes BPrime0 = 11;
  void clear_bprime0();
  static const int kBPrime0FieldNumber = 11;
  const ::std::string& bprime0() const;
  void set_bprime0(const ::std::string& value);
  #if LANG_CXX11
  void set_bprime0(::std::string&& value);
  #endif
  void set_bprime0(const char* value);
  void set_bprime0(const void* value, size_t size);
  ::std::string* mutable_bprime0();
  ::std::string* release_bprime0();
  void set_allocated_bprime0(::std::string* bprime0);

  // bytes t = 12;
  void clear_t();
  static const int kTFieldNumber = 12;
  const ::std::string& t() const;
  void set_t(const ::std::string& value);
  #if LANG_CXX11
  void set_t(::std::string&& value);
  #endif
  void set_t(const char* value);
  void set_t(const void* value, size_t size);
  ::std::string* mutable_t();
  ::std::string* release_t();
  void set_allocated_t(::std::string* t);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Transaction.EntryRangeProof)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> v_;
  ::google::protobuf::RepeatedPtrField< ::std::string> l_;
  ::google::protobuf::RepeatedPtrField< ::std::string> r_;
  ::google::protobuf::internal::ArenaStringPtr a_;
  ::google::protobuf::internal::ArenaStringPtr s_;
  ::google::protobuf::internal::ArenaStringPtr t1_;
  ::google::protobuf::internal::ArenaStringPtr t2_;
  ::google::protobuf::internal::ArenaStringPtr tau_;
  ::google::protobuf::internal::ArenaStringPtr mu_;
  ::google::protobuf::internal::ArenaStringPtr aprime0_;
  ::google::protobuf::internal::ArenaStringPtr bprime0_;
  ::google::protobuf::internal::ArenaStringPtr t_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Transaction_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CoinbaseEntry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Catalyst.Protocol.Transaction.CoinbaseEntry) */ {
 public:
  CoinbaseEntry();
  virtual ~CoinbaseEntry();

  CoinbaseEntry(const CoinbaseEntry& from);

  inline CoinbaseEntry& operator=(const CoinbaseEntry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CoinbaseEntry(CoinbaseEntry&& from) noexcept
    : CoinbaseEntry() {
    *this = ::std::move(from);
  }

  inline CoinbaseEntry& operator=(CoinbaseEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CoinbaseEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CoinbaseEntry* internal_default_instance() {
    return reinterpret_cast<const CoinbaseEntry*>(
               &_CoinbaseEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CoinbaseEntry* other);
  friend void swap(CoinbaseEntry& a, CoinbaseEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CoinbaseEntry* New() const final {
    return CreateMaybeMessage<CoinbaseEntry>(NULL);
  }

  CoinbaseEntry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CoinbaseEntry>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CoinbaseEntry& from);
  void MergeFrom(const CoinbaseEntry& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CoinbaseEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes PubKey = 2;
  void clear_pubkey();
  static const int kPubKeyFieldNumber = 2;
  const ::std::string& pubkey() const;
  void set_pubkey(const ::std::string& value);
  #if LANG_CXX11
  void set_pubkey(::std::string&& value);
  #endif
  void set_pubkey(const char* value);
  void set_pubkey(const void* value, size_t size);
  ::std::string* mutable_pubkey();
  ::std::string* release_pubkey();
  void set_allocated_pubkey(::std::string* pubkey);

  // uint64 Amount = 3;
  void clear_amount();
  static const int kAmountFieldNumber = 3;
  ::google::protobuf::uint64 amount() const;
  void set_amount(::google::protobuf::uint64 value);

  // uint32 Version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Catalyst.Protocol.Transaction.CoinbaseEntry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pubkey_;
  ::google::protobuf::uint64 amount_;
  ::google::protobuf::uint32 version_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Transaction_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TransactionBroadcast

// .Catalyst.Protocol.Transaction.TransactionType TransactionType = 1;
inline void TransactionBroadcast::clear_transactiontype() {
  transactiontype_ = 0;
}
inline ::Catalyst::Protocol::Transaction::TransactionType TransactionBroadcast::transactiontype() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.TransactionBroadcast.TransactionType)
  return static_cast< ::Catalyst::Protocol::Transaction::TransactionType >(transactiontype_);
}
inline void TransactionBroadcast::set_transactiontype(::Catalyst::Protocol::Transaction::TransactionType value) {
  
  transactiontype_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.TransactionBroadcast.TransactionType)
}

// .google.protobuf.Timestamp TimeStamp = 2;
inline bool TransactionBroadcast::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
inline const ::google::protobuf::Timestamp& TransactionBroadcast::_internal_timestamp() const {
  return *timestamp_;
}
inline const ::google::protobuf::Timestamp& TransactionBroadcast::timestamp() const {
  const ::google::protobuf::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.TransactionBroadcast.TimeStamp)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* TransactionBroadcast::release_timestamp() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.TransactionBroadcast.TimeStamp)
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* TransactionBroadcast::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.TransactionBroadcast.TimeStamp)
  return timestamp_;
}
inline void TransactionBroadcast::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.TransactionBroadcast.TimeStamp)
}

// uint64 TransactionFees = 3;
inline void TransactionBroadcast::clear_transactionfees() {
  transactionfees_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TransactionBroadcast::transactionfees() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.TransactionBroadcast.TransactionFees)
  return transactionfees_;
}
inline void TransactionBroadcast::set_transactionfees(::google::protobuf::uint64 value) {
  
  transactionfees_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.TransactionBroadcast.TransactionFees)
}

// uint64 LockTime = 4;
inline void TransactionBroadcast::clear_locktime() {
  locktime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TransactionBroadcast::locktime() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.TransactionBroadcast.LockTime)
  return locktime_;
}
inline void TransactionBroadcast::set_locktime(::google::protobuf::uint64 value) {
  
  locktime_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.TransactionBroadcast.LockTime)
}

// repeated .Catalyst.Protocol.Transaction.STTransactionEntry STEntries = 5;
inline int TransactionBroadcast::stentries_size() const {
  return stentries_.size();
}
inline void TransactionBroadcast::clear_stentries() {
  stentries_.Clear();
}
inline ::Catalyst::Protocol::Transaction::STTransactionEntry* TransactionBroadcast::mutable_stentries(int index) {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.TransactionBroadcast.STEntries)
  return stentries_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::STTransactionEntry >*
TransactionBroadcast::mutable_stentries() {
  // @@protoc_insertion_point(field_mutable_list:Catalyst.Protocol.Transaction.TransactionBroadcast.STEntries)
  return &stentries_;
}
inline const ::Catalyst::Protocol::Transaction::STTransactionEntry& TransactionBroadcast::stentries(int index) const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.TransactionBroadcast.STEntries)
  return stentries_.Get(index);
}
inline ::Catalyst::Protocol::Transaction::STTransactionEntry* TransactionBroadcast::add_stentries() {
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Transaction.TransactionBroadcast.STEntries)
  return stentries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::STTransactionEntry >&
TransactionBroadcast::stentries() const {
  // @@protoc_insertion_point(field_list:Catalyst.Protocol.Transaction.TransactionBroadcast.STEntries)
  return stentries_;
}

// repeated .Catalyst.Protocol.Transaction.CFTransactionEntry CFEntries = 6;
inline int TransactionBroadcast::cfentries_size() const {
  return cfentries_.size();
}
inline void TransactionBroadcast::clear_cfentries() {
  cfentries_.Clear();
}
inline ::Catalyst::Protocol::Transaction::CFTransactionEntry* TransactionBroadcast::mutable_cfentries(int index) {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.TransactionBroadcast.CFEntries)
  return cfentries_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::CFTransactionEntry >*
TransactionBroadcast::mutable_cfentries() {
  // @@protoc_insertion_point(field_mutable_list:Catalyst.Protocol.Transaction.TransactionBroadcast.CFEntries)
  return &cfentries_;
}
inline const ::Catalyst::Protocol::Transaction::CFTransactionEntry& TransactionBroadcast::cfentries(int index) const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.TransactionBroadcast.CFEntries)
  return cfentries_.Get(index);
}
inline ::Catalyst::Protocol::Transaction::CFTransactionEntry* TransactionBroadcast::add_cfentries() {
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Transaction.TransactionBroadcast.CFEntries)
  return cfentries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Catalyst::Protocol::Transaction::CFTransactionEntry >&
TransactionBroadcast::cfentries() const {
  // @@protoc_insertion_point(field_list:Catalyst.Protocol.Transaction.TransactionBroadcast.CFEntries)
  return cfentries_;
}

// bytes Signature = 7;
inline void TransactionBroadcast::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransactionBroadcast::signature() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.TransactionBroadcast.Signature)
  return signature_.GetNoArena();
}
inline void TransactionBroadcast::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.TransactionBroadcast.Signature)
}
#if LANG_CXX11
inline void TransactionBroadcast::set_signature(::std::string&& value) {
  
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.TransactionBroadcast.Signature)
}
#endif
inline void TransactionBroadcast::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.TransactionBroadcast.Signature)
}
inline void TransactionBroadcast::set_signature(const void* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.TransactionBroadcast.Signature)
}
inline ::std::string* TransactionBroadcast::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.TransactionBroadcast.Signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransactionBroadcast::release_signature() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.TransactionBroadcast.Signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionBroadcast::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.TransactionBroadcast.Signature)
}

// bytes Init = 9;
inline void TransactionBroadcast::clear_init() {
  init_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransactionBroadcast::init() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.TransactionBroadcast.Init)
  return init_.GetNoArena();
}
inline void TransactionBroadcast::set_init(const ::std::string& value) {
  
  init_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.TransactionBroadcast.Init)
}
#if LANG_CXX11
inline void TransactionBroadcast::set_init(::std::string&& value) {
  
  init_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.TransactionBroadcast.Init)
}
#endif
inline void TransactionBroadcast::set_init(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  init_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.TransactionBroadcast.Init)
}
inline void TransactionBroadcast::set_init(const void* value, size_t size) {
  
  init_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.TransactionBroadcast.Init)
}
inline ::std::string* TransactionBroadcast::mutable_init() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.TransactionBroadcast.Init)
  return init_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransactionBroadcast::release_init() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.TransactionBroadcast.Init)
  
  return init_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionBroadcast::set_allocated_init(::std::string* init) {
  if (init != NULL) {
    
  } else {
    
  }
  init_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), init);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.TransactionBroadcast.Init)
}

// bytes Data = 10;
inline void TransactionBroadcast::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransactionBroadcast::data() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.TransactionBroadcast.Data)
  return data_.GetNoArena();
}
inline void TransactionBroadcast::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.TransactionBroadcast.Data)
}
#if LANG_CXX11
inline void TransactionBroadcast::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.TransactionBroadcast.Data)
}
#endif
inline void TransactionBroadcast::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.TransactionBroadcast.Data)
}
inline void TransactionBroadcast::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.TransactionBroadcast.Data)
}
inline ::std::string* TransactionBroadcast::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.TransactionBroadcast.Data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransactionBroadcast::release_data() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.TransactionBroadcast.Data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionBroadcast::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.TransactionBroadcast.Data)
}

// bytes From = 11;
inline void TransactionBroadcast::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransactionBroadcast::from() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.TransactionBroadcast.From)
  return from_.GetNoArena();
}
inline void TransactionBroadcast::set_from(const ::std::string& value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.TransactionBroadcast.From)
}
#if LANG_CXX11
inline void TransactionBroadcast::set_from(::std::string&& value) {
  
  from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.TransactionBroadcast.From)
}
#endif
inline void TransactionBroadcast::set_from(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.TransactionBroadcast.From)
}
inline void TransactionBroadcast::set_from(const void* value, size_t size) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.TransactionBroadcast.From)
}
inline ::std::string* TransactionBroadcast::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.TransactionBroadcast.From)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransactionBroadcast::release_from() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.TransactionBroadcast.From)
  
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionBroadcast::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.TransactionBroadcast.From)
}

// -------------------------------------------------------------------

// STTransactionEntry

// bytes PubKey = 1;
inline void STTransactionEntry::clear_pubkey() {
  pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& STTransactionEntry::pubkey() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.STTransactionEntry.PubKey)
  return pubkey_.GetNoArena();
}
inline void STTransactionEntry::set_pubkey(const ::std::string& value) {
  
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.STTransactionEntry.PubKey)
}
#if LANG_CXX11
inline void STTransactionEntry::set_pubkey(::std::string&& value) {
  
  pubkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.STTransactionEntry.PubKey)
}
#endif
inline void STTransactionEntry::set_pubkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.STTransactionEntry.PubKey)
}
inline void STTransactionEntry::set_pubkey(const void* value, size_t size) {
  
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.STTransactionEntry.PubKey)
}
inline ::std::string* STTransactionEntry::mutable_pubkey() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.STTransactionEntry.PubKey)
  return pubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* STTransactionEntry::release_pubkey() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.STTransactionEntry.PubKey)
  
  return pubkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void STTransactionEntry::set_allocated_pubkey(::std::string* pubkey) {
  if (pubkey != NULL) {
    
  } else {
    
  }
  pubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pubkey);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.STTransactionEntry.PubKey)
}

// uint64 Amount = 2;
inline void STTransactionEntry::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 STTransactionEntry::amount() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.STTransactionEntry.Amount)
  return amount_;
}
inline void STTransactionEntry::set_amount(::google::protobuf::uint64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.STTransactionEntry.Amount)
}

// -------------------------------------------------------------------

// CFTransactionEntry

// bytes PubKey = 1;
inline void CFTransactionEntry::clear_pubkey() {
  pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CFTransactionEntry::pubkey() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.CFTransactionEntry.PubKey)
  return pubkey_.GetNoArena();
}
inline void CFTransactionEntry::set_pubkey(const ::std::string& value) {
  
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.CFTransactionEntry.PubKey)
}
#if LANG_CXX11
inline void CFTransactionEntry::set_pubkey(::std::string&& value) {
  
  pubkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.CFTransactionEntry.PubKey)
}
#endif
inline void CFTransactionEntry::set_pubkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.CFTransactionEntry.PubKey)
}
inline void CFTransactionEntry::set_pubkey(const void* value, size_t size) {
  
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.CFTransactionEntry.PubKey)
}
inline ::std::string* CFTransactionEntry::mutable_pubkey() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.CFTransactionEntry.PubKey)
  return pubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CFTransactionEntry::release_pubkey() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.CFTransactionEntry.PubKey)
  
  return pubkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CFTransactionEntry::set_allocated_pubkey(::std::string* pubkey) {
  if (pubkey != NULL) {
    
  } else {
    
  }
  pubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pubkey);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.CFTransactionEntry.PubKey)
}

// bytes PedersenCommit = 2;
inline void CFTransactionEntry::clear_pedersencommit() {
  pedersencommit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CFTransactionEntry::pedersencommit() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.CFTransactionEntry.PedersenCommit)
  return pedersencommit_.GetNoArena();
}
inline void CFTransactionEntry::set_pedersencommit(const ::std::string& value) {
  
  pedersencommit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.CFTransactionEntry.PedersenCommit)
}
#if LANG_CXX11
inline void CFTransactionEntry::set_pedersencommit(::std::string&& value) {
  
  pedersencommit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.CFTransactionEntry.PedersenCommit)
}
#endif
inline void CFTransactionEntry::set_pedersencommit(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pedersencommit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.CFTransactionEntry.PedersenCommit)
}
inline void CFTransactionEntry::set_pedersencommit(const void* value, size_t size) {
  
  pedersencommit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.CFTransactionEntry.PedersenCommit)
}
inline ::std::string* CFTransactionEntry::mutable_pedersencommit() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.CFTransactionEntry.PedersenCommit)
  return pedersencommit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CFTransactionEntry::release_pedersencommit() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.CFTransactionEntry.PedersenCommit)
  
  return pedersencommit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CFTransactionEntry::set_allocated_pedersencommit(::std::string* pedersencommit) {
  if (pedersencommit != NULL) {
    
  } else {
    
  }
  pedersencommit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pedersencommit);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.CFTransactionEntry.PedersenCommit)
}

// .Catalyst.Protocol.Transaction.EntryRangeProof EntryRangeProofs = 3;
inline bool CFTransactionEntry::has_entryrangeproofs() const {
  return this != internal_default_instance() && entryrangeproofs_ != NULL;
}
inline void CFTransactionEntry::clear_entryrangeproofs() {
  if (GetArenaNoVirtual() == NULL && entryrangeproofs_ != NULL) {
    delete entryrangeproofs_;
  }
  entryrangeproofs_ = NULL;
}
inline const ::Catalyst::Protocol::Transaction::EntryRangeProof& CFTransactionEntry::_internal_entryrangeproofs() const {
  return *entryrangeproofs_;
}
inline const ::Catalyst::Protocol::Transaction::EntryRangeProof& CFTransactionEntry::entryrangeproofs() const {
  const ::Catalyst::Protocol::Transaction::EntryRangeProof* p = entryrangeproofs_;
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.CFTransactionEntry.EntryRangeProofs)
  return p != NULL ? *p : *reinterpret_cast<const ::Catalyst::Protocol::Transaction::EntryRangeProof*>(
      &::Catalyst::Protocol::Transaction::_EntryRangeProof_default_instance_);
}
inline ::Catalyst::Protocol::Transaction::EntryRangeProof* CFTransactionEntry::release_entryrangeproofs() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.CFTransactionEntry.EntryRangeProofs)
  
  ::Catalyst::Protocol::Transaction::EntryRangeProof* temp = entryrangeproofs_;
  entryrangeproofs_ = NULL;
  return temp;
}
inline ::Catalyst::Protocol::Transaction::EntryRangeProof* CFTransactionEntry::mutable_entryrangeproofs() {
  
  if (entryrangeproofs_ == NULL) {
    auto* p = CreateMaybeMessage<::Catalyst::Protocol::Transaction::EntryRangeProof>(GetArenaNoVirtual());
    entryrangeproofs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.CFTransactionEntry.EntryRangeProofs)
  return entryrangeproofs_;
}
inline void CFTransactionEntry::set_allocated_entryrangeproofs(::Catalyst::Protocol::Transaction::EntryRangeProof* entryrangeproofs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete entryrangeproofs_;
  }
  if (entryrangeproofs) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      entryrangeproofs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, entryrangeproofs, submessage_arena);
    }
    
  } else {
    
  }
  entryrangeproofs_ = entryrangeproofs;
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.CFTransactionEntry.EntryRangeProofs)
}

// -------------------------------------------------------------------

// EntryRangeProof

// repeated bytes V = 1;
inline int EntryRangeProof::v_size() const {
  return v_.size();
}
inline void EntryRangeProof::clear_v() {
  v_.Clear();
}
inline const ::std::string& EntryRangeProof::v(int index) const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.EntryRangeProof.V)
  return v_.Get(index);
}
inline ::std::string* EntryRangeProof::mutable_v(int index) {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.EntryRangeProof.V)
  return v_.Mutable(index);
}
inline void EntryRangeProof::set_v(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.EntryRangeProof.V)
  v_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void EntryRangeProof::set_v(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.EntryRangeProof.V)
  v_.Mutable(index)->assign(std::move(value));
}
#endif
inline void EntryRangeProof::set_v(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  v_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.EntryRangeProof.V)
}
inline void EntryRangeProof::set_v(int index, const void* value, size_t size) {
  v_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.EntryRangeProof.V)
}
inline ::std::string* EntryRangeProof::add_v() {
  // @@protoc_insertion_point(field_add_mutable:Catalyst.Protocol.Transaction.EntryRangeProof.V)
  return v_.Add();
}
inline void EntryRangeProof::add_v(const ::std::string& value) {
  v_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Transaction.EntryRangeProof.V)
}
#if LANG_CXX11
inline void EntryRangeProof::add_v(::std::string&& value) {
  v_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Transaction.EntryRangeProof.V)
}
#endif
inline void EntryRangeProof::add_v(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  v_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Catalyst.Protocol.Transaction.EntryRangeProof.V)
}
inline void EntryRangeProof::add_v(const void* value, size_t size) {
  v_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Catalyst.Protocol.Transaction.EntryRangeProof.V)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
EntryRangeProof::v() const {
  // @@protoc_insertion_point(field_list:Catalyst.Protocol.Transaction.EntryRangeProof.V)
  return v_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
EntryRangeProof::mutable_v() {
  // @@protoc_insertion_point(field_mutable_list:Catalyst.Protocol.Transaction.EntryRangeProof.V)
  return &v_;
}

// bytes A = 2;
inline void EntryRangeProof::clear_a() {
  a_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EntryRangeProof::a() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.EntryRangeProof.A)
  return a_.GetNoArena();
}
inline void EntryRangeProof::set_a(const ::std::string& value) {
  
  a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.EntryRangeProof.A)
}
#if LANG_CXX11
inline void EntryRangeProof::set_a(::std::string&& value) {
  
  a_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.EntryRangeProof.A)
}
#endif
inline void EntryRangeProof::set_a(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.EntryRangeProof.A)
}
inline void EntryRangeProof::set_a(const void* value, size_t size) {
  
  a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.EntryRangeProof.A)
}
inline ::std::string* EntryRangeProof::mutable_a() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.EntryRangeProof.A)
  return a_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EntryRangeProof::release_a() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.EntryRangeProof.A)
  
  return a_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EntryRangeProof::set_allocated_a(::std::string* a) {
  if (a != NULL) {
    
  } else {
    
  }
  a_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), a);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.EntryRangeProof.A)
}

// bytes S = 3;
inline void EntryRangeProof::clear_s() {
  s_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EntryRangeProof::s() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.EntryRangeProof.S)
  return s_.GetNoArena();
}
inline void EntryRangeProof::set_s(const ::std::string& value) {
  
  s_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.EntryRangeProof.S)
}
#if LANG_CXX11
inline void EntryRangeProof::set_s(::std::string&& value) {
  
  s_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.EntryRangeProof.S)
}
#endif
inline void EntryRangeProof::set_s(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  s_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.EntryRangeProof.S)
}
inline void EntryRangeProof::set_s(const void* value, size_t size) {
  
  s_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.EntryRangeProof.S)
}
inline ::std::string* EntryRangeProof::mutable_s() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.EntryRangeProof.S)
  return s_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EntryRangeProof::release_s() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.EntryRangeProof.S)
  
  return s_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EntryRangeProof::set_allocated_s(::std::string* s) {
  if (s != NULL) {
    
  } else {
    
  }
  s_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), s);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.EntryRangeProof.S)
}

// bytes T1 = 4;
inline void EntryRangeProof::clear_t1() {
  t1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EntryRangeProof::t1() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.EntryRangeProof.T1)
  return t1_.GetNoArena();
}
inline void EntryRangeProof::set_t1(const ::std::string& value) {
  
  t1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.EntryRangeProof.T1)
}
#if LANG_CXX11
inline void EntryRangeProof::set_t1(::std::string&& value) {
  
  t1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.EntryRangeProof.T1)
}
#endif
inline void EntryRangeProof::set_t1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  t1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.EntryRangeProof.T1)
}
inline void EntryRangeProof::set_t1(const void* value, size_t size) {
  
  t1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.EntryRangeProof.T1)
}
inline ::std::string* EntryRangeProof::mutable_t1() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.EntryRangeProof.T1)
  return t1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EntryRangeProof::release_t1() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.EntryRangeProof.T1)
  
  return t1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EntryRangeProof::set_allocated_t1(::std::string* t1) {
  if (t1 != NULL) {
    
  } else {
    
  }
  t1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), t1);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.EntryRangeProof.T1)
}

// bytes T2 = 5;
inline void EntryRangeProof::clear_t2() {
  t2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EntryRangeProof::t2() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.EntryRangeProof.T2)
  return t2_.GetNoArena();
}
inline void EntryRangeProof::set_t2(const ::std::string& value) {
  
  t2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.EntryRangeProof.T2)
}
#if LANG_CXX11
inline void EntryRangeProof::set_t2(::std::string&& value) {
  
  t2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.EntryRangeProof.T2)
}
#endif
inline void EntryRangeProof::set_t2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  t2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.EntryRangeProof.T2)
}
inline void EntryRangeProof::set_t2(const void* value, size_t size) {
  
  t2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.EntryRangeProof.T2)
}
inline ::std::string* EntryRangeProof::mutable_t2() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.EntryRangeProof.T2)
  return t2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EntryRangeProof::release_t2() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.EntryRangeProof.T2)
  
  return t2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EntryRangeProof::set_allocated_t2(::std::string* t2) {
  if (t2 != NULL) {
    
  } else {
    
  }
  t2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), t2);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.EntryRangeProof.T2)
}

// bytes TAU = 6;
inline void EntryRangeProof::clear_tau() {
  tau_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EntryRangeProof::tau() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.EntryRangeProof.TAU)
  return tau_.GetNoArena();
}
inline void EntryRangeProof::set_tau(const ::std::string& value) {
  
  tau_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.EntryRangeProof.TAU)
}
#if LANG_CXX11
inline void EntryRangeProof::set_tau(::std::string&& value) {
  
  tau_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.EntryRangeProof.TAU)
}
#endif
inline void EntryRangeProof::set_tau(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tau_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.EntryRangeProof.TAU)
}
inline void EntryRangeProof::set_tau(const void* value, size_t size) {
  
  tau_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.EntryRangeProof.TAU)
}
inline ::std::string* EntryRangeProof::mutable_tau() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.EntryRangeProof.TAU)
  return tau_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EntryRangeProof::release_tau() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.EntryRangeProof.TAU)
  
  return tau_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EntryRangeProof::set_allocated_tau(::std::string* tau) {
  if (tau != NULL) {
    
  } else {
    
  }
  tau_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tau);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.EntryRangeProof.TAU)
}

// bytes MU = 7;
inline void EntryRangeProof::clear_mu() {
  mu_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EntryRangeProof::mu() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.EntryRangeProof.MU)
  return mu_.GetNoArena();
}
inline void EntryRangeProof::set_mu(const ::std::string& value) {
  
  mu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.EntryRangeProof.MU)
}
#if LANG_CXX11
inline void EntryRangeProof::set_mu(::std::string&& value) {
  
  mu_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.EntryRangeProof.MU)
}
#endif
inline void EntryRangeProof::set_mu(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.EntryRangeProof.MU)
}
inline void EntryRangeProof::set_mu(const void* value, size_t size) {
  
  mu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.EntryRangeProof.MU)
}
inline ::std::string* EntryRangeProof::mutable_mu() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.EntryRangeProof.MU)
  return mu_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EntryRangeProof::release_mu() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.EntryRangeProof.MU)
  
  return mu_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EntryRangeProof::set_allocated_mu(::std::string* mu) {
  if (mu != NULL) {
    
  } else {
    
  }
  mu_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mu);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.EntryRangeProof.MU)
}

// repeated bytes L = 8;
inline int EntryRangeProof::l_size() const {
  return l_.size();
}
inline void EntryRangeProof::clear_l() {
  l_.Clear();
}
inline const ::std::string& EntryRangeProof::l(int index) const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.EntryRangeProof.L)
  return l_.Get(index);
}
inline ::std::string* EntryRangeProof::mutable_l(int index) {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.EntryRangeProof.L)
  return l_.Mutable(index);
}
inline void EntryRangeProof::set_l(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.EntryRangeProof.L)
  l_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void EntryRangeProof::set_l(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.EntryRangeProof.L)
  l_.Mutable(index)->assign(std::move(value));
}
#endif
inline void EntryRangeProof::set_l(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  l_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.EntryRangeProof.L)
}
inline void EntryRangeProof::set_l(int index, const void* value, size_t size) {
  l_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.EntryRangeProof.L)
}
inline ::std::string* EntryRangeProof::add_l() {
  // @@protoc_insertion_point(field_add_mutable:Catalyst.Protocol.Transaction.EntryRangeProof.L)
  return l_.Add();
}
inline void EntryRangeProof::add_l(const ::std::string& value) {
  l_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Transaction.EntryRangeProof.L)
}
#if LANG_CXX11
inline void EntryRangeProof::add_l(::std::string&& value) {
  l_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Transaction.EntryRangeProof.L)
}
#endif
inline void EntryRangeProof::add_l(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  l_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Catalyst.Protocol.Transaction.EntryRangeProof.L)
}
inline void EntryRangeProof::add_l(const void* value, size_t size) {
  l_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Catalyst.Protocol.Transaction.EntryRangeProof.L)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
EntryRangeProof::l() const {
  // @@protoc_insertion_point(field_list:Catalyst.Protocol.Transaction.EntryRangeProof.L)
  return l_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
EntryRangeProof::mutable_l() {
  // @@protoc_insertion_point(field_mutable_list:Catalyst.Protocol.Transaction.EntryRangeProof.L)
  return &l_;
}

// repeated bytes R = 9;
inline int EntryRangeProof::r_size() const {
  return r_.size();
}
inline void EntryRangeProof::clear_r() {
  r_.Clear();
}
inline const ::std::string& EntryRangeProof::r(int index) const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.EntryRangeProof.R)
  return r_.Get(index);
}
inline ::std::string* EntryRangeProof::mutable_r(int index) {
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.EntryRangeProof.R)
  return r_.Mutable(index);
}
inline void EntryRangeProof::set_r(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.EntryRangeProof.R)
  r_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void EntryRangeProof::set_r(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.EntryRangeProof.R)
  r_.Mutable(index)->assign(std::move(value));
}
#endif
inline void EntryRangeProof::set_r(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  r_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.EntryRangeProof.R)
}
inline void EntryRangeProof::set_r(int index, const void* value, size_t size) {
  r_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.EntryRangeProof.R)
}
inline ::std::string* EntryRangeProof::add_r() {
  // @@protoc_insertion_point(field_add_mutable:Catalyst.Protocol.Transaction.EntryRangeProof.R)
  return r_.Add();
}
inline void EntryRangeProof::add_r(const ::std::string& value) {
  r_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Transaction.EntryRangeProof.R)
}
#if LANG_CXX11
inline void EntryRangeProof::add_r(::std::string&& value) {
  r_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Catalyst.Protocol.Transaction.EntryRangeProof.R)
}
#endif
inline void EntryRangeProof::add_r(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  r_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Catalyst.Protocol.Transaction.EntryRangeProof.R)
}
inline void EntryRangeProof::add_r(const void* value, size_t size) {
  r_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Catalyst.Protocol.Transaction.EntryRangeProof.R)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
EntryRangeProof::r() const {
  // @@protoc_insertion_point(field_list:Catalyst.Protocol.Transaction.EntryRangeProof.R)
  return r_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
EntryRangeProof::mutable_r() {
  // @@protoc_insertion_point(field_mutable_list:Catalyst.Protocol.Transaction.EntryRangeProof.R)
  return &r_;
}

// bytes APrime0 = 10;
inline void EntryRangeProof::clear_aprime0() {
  aprime0_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EntryRangeProof::aprime0() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.EntryRangeProof.APrime0)
  return aprime0_.GetNoArena();
}
inline void EntryRangeProof::set_aprime0(const ::std::string& value) {
  
  aprime0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.EntryRangeProof.APrime0)
}
#if LANG_CXX11
inline void EntryRangeProof::set_aprime0(::std::string&& value) {
  
  aprime0_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.EntryRangeProof.APrime0)
}
#endif
inline void EntryRangeProof::set_aprime0(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  aprime0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.EntryRangeProof.APrime0)
}
inline void EntryRangeProof::set_aprime0(const void* value, size_t size) {
  
  aprime0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.EntryRangeProof.APrime0)
}
inline ::std::string* EntryRangeProof::mutable_aprime0() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.EntryRangeProof.APrime0)
  return aprime0_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EntryRangeProof::release_aprime0() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.EntryRangeProof.APrime0)
  
  return aprime0_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EntryRangeProof::set_allocated_aprime0(::std::string* aprime0) {
  if (aprime0 != NULL) {
    
  } else {
    
  }
  aprime0_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), aprime0);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.EntryRangeProof.APrime0)
}

// bytes BPrime0 = 11;
inline void EntryRangeProof::clear_bprime0() {
  bprime0_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EntryRangeProof::bprime0() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.EntryRangeProof.BPrime0)
  return bprime0_.GetNoArena();
}
inline void EntryRangeProof::set_bprime0(const ::std::string& value) {
  
  bprime0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.EntryRangeProof.BPrime0)
}
#if LANG_CXX11
inline void EntryRangeProof::set_bprime0(::std::string&& value) {
  
  bprime0_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.EntryRangeProof.BPrime0)
}
#endif
inline void EntryRangeProof::set_bprime0(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bprime0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.EntryRangeProof.BPrime0)
}
inline void EntryRangeProof::set_bprime0(const void* value, size_t size) {
  
  bprime0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.EntryRangeProof.BPrime0)
}
inline ::std::string* EntryRangeProof::mutable_bprime0() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.EntryRangeProof.BPrime0)
  return bprime0_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EntryRangeProof::release_bprime0() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.EntryRangeProof.BPrime0)
  
  return bprime0_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EntryRangeProof::set_allocated_bprime0(::std::string* bprime0) {
  if (bprime0 != NULL) {
    
  } else {
    
  }
  bprime0_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bprime0);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.EntryRangeProof.BPrime0)
}

// bytes t = 12;
inline void EntryRangeProof::clear_t() {
  t_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EntryRangeProof::t() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.EntryRangeProof.t)
  return t_.GetNoArena();
}
inline void EntryRangeProof::set_t(const ::std::string& value) {
  
  t_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.EntryRangeProof.t)
}
#if LANG_CXX11
inline void EntryRangeProof::set_t(::std::string&& value) {
  
  t_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.EntryRangeProof.t)
}
#endif
inline void EntryRangeProof::set_t(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  t_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.EntryRangeProof.t)
}
inline void EntryRangeProof::set_t(const void* value, size_t size) {
  
  t_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.EntryRangeProof.t)
}
inline ::std::string* EntryRangeProof::mutable_t() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.EntryRangeProof.t)
  return t_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EntryRangeProof::release_t() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.EntryRangeProof.t)
  
  return t_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EntryRangeProof::set_allocated_t(::std::string* t) {
  if (t != NULL) {
    
  } else {
    
  }
  t_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), t);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.EntryRangeProof.t)
}

// -------------------------------------------------------------------

// CoinbaseEntry

// uint32 Version = 1;
inline void CoinbaseEntry::clear_version() {
  version_ = 0u;
}
inline ::google::protobuf::uint32 CoinbaseEntry::version() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.CoinbaseEntry.Version)
  return version_;
}
inline void CoinbaseEntry::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.CoinbaseEntry.Version)
}

// bytes PubKey = 2;
inline void CoinbaseEntry::clear_pubkey() {
  pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CoinbaseEntry::pubkey() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.CoinbaseEntry.PubKey)
  return pubkey_.GetNoArena();
}
inline void CoinbaseEntry::set_pubkey(const ::std::string& value) {
  
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.CoinbaseEntry.PubKey)
}
#if LANG_CXX11
inline void CoinbaseEntry::set_pubkey(::std::string&& value) {
  
  pubkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Catalyst.Protocol.Transaction.CoinbaseEntry.PubKey)
}
#endif
inline void CoinbaseEntry::set_pubkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Catalyst.Protocol.Transaction.CoinbaseEntry.PubKey)
}
inline void CoinbaseEntry::set_pubkey(const void* value, size_t size) {
  
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Catalyst.Protocol.Transaction.CoinbaseEntry.PubKey)
}
inline ::std::string* CoinbaseEntry::mutable_pubkey() {
  
  // @@protoc_insertion_point(field_mutable:Catalyst.Protocol.Transaction.CoinbaseEntry.PubKey)
  return pubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CoinbaseEntry::release_pubkey() {
  // @@protoc_insertion_point(field_release:Catalyst.Protocol.Transaction.CoinbaseEntry.PubKey)
  
  return pubkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CoinbaseEntry::set_allocated_pubkey(::std::string* pubkey) {
  if (pubkey != NULL) {
    
  } else {
    
  }
  pubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pubkey);
  // @@protoc_insertion_point(field_set_allocated:Catalyst.Protocol.Transaction.CoinbaseEntry.PubKey)
}

// uint64 Amount = 3;
inline void CoinbaseEntry::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CoinbaseEntry::amount() const {
  // @@protoc_insertion_point(field_get:Catalyst.Protocol.Transaction.CoinbaseEntry.Amount)
  return amount_;
}
inline void CoinbaseEntry::set_amount(::google::protobuf::uint64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:Catalyst.Protocol.Transaction.CoinbaseEntry.Amount)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Transaction
}  // namespace Protocol
}  // namespace Catalyst

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Catalyst::Protocol::Transaction::TransactionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Catalyst::Protocol::Transaction::TransactionType>() {
  return ::Catalyst::Protocol::Transaction::TransactionType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Transaction_2eproto
