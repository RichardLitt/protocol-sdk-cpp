// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DfsMarketplace.proto

#include "DfsMarketplace.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_Common_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PeerId;
}  // namespace protobuf_Common_2eproto
namespace protobuf_DfsMarketplace_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_DfsMarketplace_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BlockChallengeRequest;
}  // namespace protobuf_DfsMarketplace_2eproto
namespace Catalyst {
namespace Protocol {
namespace DfsMarketplace {
class BlockChallengeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BlockChallengeRequest>
      _instance;
} _BlockChallengeRequest_default_instance_;
class BlockChallengeResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BlockChallengeResponse>
      _instance;
} _BlockChallengeResponse_default_instance_;
class BlockChallengeBroadcastDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BlockChallengeBroadcast>
      _instance;
} _BlockChallengeBroadcast_default_instance_;
}  // namespace DfsMarketplace
}  // namespace Protocol
}  // namespace Catalyst
namespace protobuf_DfsMarketplace_2eproto {
static void InitDefaultsBlockChallengeRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::DfsMarketplace::_BlockChallengeRequest_default_instance_;
    new (ptr) ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BlockChallengeRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBlockChallengeRequest}, {}};

static void InitDefaultsBlockChallengeResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::DfsMarketplace::_BlockChallengeResponse_default_instance_;
    new (ptr) ::Catalyst::Protocol::DfsMarketplace::BlockChallengeResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::DfsMarketplace::BlockChallengeResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BlockChallengeResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBlockChallengeResponse}, {}};

static void InitDefaultsBlockChallengeBroadcast() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::DfsMarketplace::_BlockChallengeBroadcast_default_instance_;
    new (ptr) ::Catalyst::Protocol::DfsMarketplace::BlockChallengeBroadcast();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::DfsMarketplace::BlockChallengeBroadcast::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_BlockChallengeBroadcast =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsBlockChallengeBroadcast}, {
      &protobuf_DfsMarketplace_2eproto::scc_info_BlockChallengeRequest.base,
      &protobuf_Common_2eproto::scc_info_PeerId.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_BlockChallengeRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BlockChallengeResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BlockChallengeBroadcast.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest, challengesalt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest, mainfilecid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest, blockidxrandomguid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::DfsMarketplace::BlockChallengeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::DfsMarketplace::BlockChallengeResponse, answer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::DfsMarketplace::BlockChallengeResponse, blockchallengerequesthash_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::DfsMarketplace::BlockChallengeBroadcast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::DfsMarketplace::BlockChallengeBroadcast, originalchallenge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::DfsMarketplace::BlockChallengeBroadcast, answer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::DfsMarketplace::BlockChallengeBroadcast, challengedpeer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::DfsMarketplace::BlockChallengeBroadcast, challengedby_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest)},
  { 8, -1, sizeof(::Catalyst::Protocol::DfsMarketplace::BlockChallengeResponse)},
  { 15, -1, sizeof(::Catalyst::Protocol::DfsMarketplace::BlockChallengeBroadcast)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Catalyst::Protocol::DfsMarketplace::_BlockChallengeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Catalyst::Protocol::DfsMarketplace::_BlockChallengeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Catalyst::Protocol::DfsMarketplace::_BlockChallengeBroadcast_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "DfsMarketplace.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024DfsMarketplace.proto\022 Catalyst.Protoco"
      "l.DfsMarketplace\032\014Common.proto\"_\n\025BlockC"
      "hallengeRequest\022\025\n\rchallengeSalt\030\001 \001(\t\022\023"
      "\n\013mainFileCid\030\002 \001(\t\022\032\n\022blockIdxRandomGui"
      "d\030\003 \001(\014\"K\n\026BlockChallengeResponse\022\016\n\006ans"
      "wer\030\001 \001(\t\022!\n\031blockChallengeRequestHash\030\002"
      " \001(\t\"\357\001\n\027BlockChallengeBroadcast\022R\n\021orig"
      "inalChallenge\030\001 \001(\01327.Catalyst.Protocol."
      "DfsMarketplace.BlockChallengeRequest\022\016\n\006"
      "answer\030\002 \001(\t\0228\n\016challengedPeer\030\003 \001(\0132 .C"
      "atalyst.Protocol.Common.PeerId\0226\n\014challe"
      "ngedBy\030\004 \001(\0132 .Catalyst.Protocol.Common."
      "PeerIdB\002P\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 498);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DfsMarketplace.proto", &protobuf_RegisterTypes);
  ::protobuf_Common_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_DfsMarketplace_2eproto
namespace Catalyst {
namespace Protocol {
namespace DfsMarketplace {

// ===================================================================

void BlockChallengeRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlockChallengeRequest::kChallengeSaltFieldNumber;
const int BlockChallengeRequest::kMainFileCidFieldNumber;
const int BlockChallengeRequest::kBlockIdxRandomGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockChallengeRequest::BlockChallengeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DfsMarketplace_2eproto::scc_info_BlockChallengeRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
}
BlockChallengeRequest::BlockChallengeRequest(const BlockChallengeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  challengesalt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.challengesalt().size() > 0) {
    challengesalt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.challengesalt_);
  }
  mainfilecid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mainfilecid().size() > 0) {
    mainfilecid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mainfilecid_);
  }
  blockidxrandomguid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.blockidxrandomguid().size() > 0) {
    blockidxrandomguid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blockidxrandomguid_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
}

void BlockChallengeRequest::SharedCtor() {
  challengesalt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mainfilecid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blockidxrandomguid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BlockChallengeRequest::~BlockChallengeRequest() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
  SharedDtor();
}

void BlockChallengeRequest::SharedDtor() {
  challengesalt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mainfilecid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blockidxrandomguid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BlockChallengeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BlockChallengeRequest::descriptor() {
  ::protobuf_DfsMarketplace_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DfsMarketplace_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BlockChallengeRequest& BlockChallengeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DfsMarketplace_2eproto::scc_info_BlockChallengeRequest.base);
  return *internal_default_instance();
}


void BlockChallengeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  challengesalt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mainfilecid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blockidxrandomguid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool BlockChallengeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string challengeSalt = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_challengesalt()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->challengesalt().data(), static_cast<int>(this->challengesalt().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.challengeSalt"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mainFileCid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mainfilecid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mainfilecid().data(), static_cast<int>(this->mainfilecid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.mainFileCid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes blockIdxRandomGuid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_blockidxrandomguid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
  return false;
#undef DO_
}

void BlockChallengeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string challengeSalt = 1;
  if (this->challengesalt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->challengesalt().data(), static_cast<int>(this->challengesalt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.challengeSalt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->challengesalt(), output);
  }

  // string mainFileCid = 2;
  if (this->mainfilecid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mainfilecid().data(), static_cast<int>(this->mainfilecid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.mainFileCid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mainfilecid(), output);
  }

  // bytes blockIdxRandomGuid = 3;
  if (this->blockidxrandomguid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->blockidxrandomguid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
}

::google::protobuf::uint8* BlockChallengeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string challengeSalt = 1;
  if (this->challengesalt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->challengesalt().data(), static_cast<int>(this->challengesalt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.challengeSalt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->challengesalt(), target);
  }

  // string mainFileCid = 2;
  if (this->mainfilecid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mainfilecid().data(), static_cast<int>(this->mainfilecid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest.mainFileCid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mainfilecid(), target);
  }

  // bytes blockIdxRandomGuid = 3;
  if (this->blockidxrandomguid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->blockidxrandomguid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
  return target;
}

size_t BlockChallengeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string challengeSalt = 1;
  if (this->challengesalt().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->challengesalt());
  }

  // string mainFileCid = 2;
  if (this->mainfilecid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mainfilecid());
  }

  // bytes blockIdxRandomGuid = 3;
  if (this->blockidxrandomguid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->blockidxrandomguid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockChallengeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockChallengeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlockChallengeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
    MergeFrom(*source);
  }
}

void BlockChallengeRequest::MergeFrom(const BlockChallengeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.challengesalt().size() > 0) {

    challengesalt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.challengesalt_);
  }
  if (from.mainfilecid().size() > 0) {

    mainfilecid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mainfilecid_);
  }
  if (from.blockidxrandomguid().size() > 0) {

    blockidxrandomguid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blockidxrandomguid_);
  }
}

void BlockChallengeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockChallengeRequest::CopyFrom(const BlockChallengeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockChallengeRequest::IsInitialized() const {
  return true;
}

void BlockChallengeRequest::Swap(BlockChallengeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockChallengeRequest::InternalSwap(BlockChallengeRequest* other) {
  using std::swap;
  challengesalt_.Swap(&other->challengesalt_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mainfilecid_.Swap(&other->mainfilecid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  blockidxrandomguid_.Swap(&other->blockidxrandomguid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BlockChallengeRequest::GetMetadata() const {
  protobuf_DfsMarketplace_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DfsMarketplace_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BlockChallengeResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlockChallengeResponse::kAnswerFieldNumber;
const int BlockChallengeResponse::kBlockChallengeRequestHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockChallengeResponse::BlockChallengeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DfsMarketplace_2eproto::scc_info_BlockChallengeResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
}
BlockChallengeResponse::BlockChallengeResponse(const BlockChallengeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  answer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.answer().size() > 0) {
    answer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.answer_);
  }
  blockchallengerequesthash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.blockchallengerequesthash().size() > 0) {
    blockchallengerequesthash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blockchallengerequesthash_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
}

void BlockChallengeResponse::SharedCtor() {
  answer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blockchallengerequesthash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BlockChallengeResponse::~BlockChallengeResponse() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
  SharedDtor();
}

void BlockChallengeResponse::SharedDtor() {
  answer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blockchallengerequesthash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BlockChallengeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BlockChallengeResponse::descriptor() {
  ::protobuf_DfsMarketplace_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DfsMarketplace_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BlockChallengeResponse& BlockChallengeResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DfsMarketplace_2eproto::scc_info_BlockChallengeResponse.base);
  return *internal_default_instance();
}


void BlockChallengeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  answer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blockchallengerequesthash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool BlockChallengeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string answer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_answer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->answer().data(), static_cast<int>(this->answer().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.answer"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string blockChallengeRequestHash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_blockchallengerequesthash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->blockchallengerequesthash().data(), static_cast<int>(this->blockchallengerequesthash().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.blockChallengeRequestHash"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
  return false;
#undef DO_
}

void BlockChallengeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string answer = 1;
  if (this->answer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->answer().data(), static_cast<int>(this->answer().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.answer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->answer(), output);
  }

  // string blockChallengeRequestHash = 2;
  if (this->blockchallengerequesthash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->blockchallengerequesthash().data(), static_cast<int>(this->blockchallengerequesthash().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.blockChallengeRequestHash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->blockchallengerequesthash(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
}

::google::protobuf::uint8* BlockChallengeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string answer = 1;
  if (this->answer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->answer().data(), static_cast<int>(this->answer().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.answer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->answer(), target);
  }

  // string blockChallengeRequestHash = 2;
  if (this->blockchallengerequesthash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->blockchallengerequesthash().data(), static_cast<int>(this->blockchallengerequesthash().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse.blockChallengeRequestHash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->blockchallengerequesthash(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
  return target;
}

size_t BlockChallengeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string answer = 1;
  if (this->answer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->answer());
  }

  // string blockChallengeRequestHash = 2;
  if (this->blockchallengerequesthash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->blockchallengerequesthash());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockChallengeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockChallengeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlockChallengeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
    MergeFrom(*source);
  }
}

void BlockChallengeResponse::MergeFrom(const BlockChallengeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.answer().size() > 0) {

    answer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.answer_);
  }
  if (from.blockchallengerequesthash().size() > 0) {

    blockchallengerequesthash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blockchallengerequesthash_);
  }
}

void BlockChallengeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockChallengeResponse::CopyFrom(const BlockChallengeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockChallengeResponse::IsInitialized() const {
  return true;
}

void BlockChallengeResponse::Swap(BlockChallengeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockChallengeResponse::InternalSwap(BlockChallengeResponse* other) {
  using std::swap;
  answer_.Swap(&other->answer_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  blockchallengerequesthash_.Swap(&other->blockchallengerequesthash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BlockChallengeResponse::GetMetadata() const {
  protobuf_DfsMarketplace_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DfsMarketplace_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BlockChallengeBroadcast::InitAsDefaultInstance() {
  ::Catalyst::Protocol::DfsMarketplace::_BlockChallengeBroadcast_default_instance_._instance.get_mutable()->originalchallenge_ = const_cast< ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest*>(
      ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest::internal_default_instance());
  ::Catalyst::Protocol::DfsMarketplace::_BlockChallengeBroadcast_default_instance_._instance.get_mutable()->challengedpeer_ = const_cast< ::Catalyst::Protocol::Common::PeerId*>(
      ::Catalyst::Protocol::Common::PeerId::internal_default_instance());
  ::Catalyst::Protocol::DfsMarketplace::_BlockChallengeBroadcast_default_instance_._instance.get_mutable()->challengedby_ = const_cast< ::Catalyst::Protocol::Common::PeerId*>(
      ::Catalyst::Protocol::Common::PeerId::internal_default_instance());
}
void BlockChallengeBroadcast::clear_challengedpeer() {
  if (GetArenaNoVirtual() == NULL && challengedpeer_ != NULL) {
    delete challengedpeer_;
  }
  challengedpeer_ = NULL;
}
void BlockChallengeBroadcast::clear_challengedby() {
  if (GetArenaNoVirtual() == NULL && challengedby_ != NULL) {
    delete challengedby_;
  }
  challengedby_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlockChallengeBroadcast::kOriginalChallengeFieldNumber;
const int BlockChallengeBroadcast::kAnswerFieldNumber;
const int BlockChallengeBroadcast::kChallengedPeerFieldNumber;
const int BlockChallengeBroadcast::kChallengedByFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockChallengeBroadcast::BlockChallengeBroadcast()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DfsMarketplace_2eproto::scc_info_BlockChallengeBroadcast.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
}
BlockChallengeBroadcast::BlockChallengeBroadcast(const BlockChallengeBroadcast& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  answer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.answer().size() > 0) {
    answer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.answer_);
  }
  if (from.has_originalchallenge()) {
    originalchallenge_ = new ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest(*from.originalchallenge_);
  } else {
    originalchallenge_ = NULL;
  }
  if (from.has_challengedpeer()) {
    challengedpeer_ = new ::Catalyst::Protocol::Common::PeerId(*from.challengedpeer_);
  } else {
    challengedpeer_ = NULL;
  }
  if (from.has_challengedby()) {
    challengedby_ = new ::Catalyst::Protocol::Common::PeerId(*from.challengedby_);
  } else {
    challengedby_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
}

void BlockChallengeBroadcast::SharedCtor() {
  answer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&originalchallenge_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&challengedby_) -
      reinterpret_cast<char*>(&originalchallenge_)) + sizeof(challengedby_));
}

BlockChallengeBroadcast::~BlockChallengeBroadcast() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
  SharedDtor();
}

void BlockChallengeBroadcast::SharedDtor() {
  answer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete originalchallenge_;
  if (this != internal_default_instance()) delete challengedpeer_;
  if (this != internal_default_instance()) delete challengedby_;
}

void BlockChallengeBroadcast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BlockChallengeBroadcast::descriptor() {
  ::protobuf_DfsMarketplace_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DfsMarketplace_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BlockChallengeBroadcast& BlockChallengeBroadcast::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_DfsMarketplace_2eproto::scc_info_BlockChallengeBroadcast.base);
  return *internal_default_instance();
}


void BlockChallengeBroadcast::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  answer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && originalchallenge_ != NULL) {
    delete originalchallenge_;
  }
  originalchallenge_ = NULL;
  if (GetArenaNoVirtual() == NULL && challengedpeer_ != NULL) {
    delete challengedpeer_;
  }
  challengedpeer_ = NULL;
  if (GetArenaNoVirtual() == NULL && challengedby_ != NULL) {
    delete challengedby_;
  }
  challengedby_ = NULL;
  _internal_metadata_.Clear();
}

bool BlockChallengeBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest originalChallenge = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_originalchallenge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string answer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_answer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->answer().data(), static_cast<int>(this->answer().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.answer"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Catalyst.Protocol.Common.PeerId challengedPeer = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_challengedpeer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Catalyst.Protocol.Common.PeerId challengedBy = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_challengedby()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
  return false;
#undef DO_
}

void BlockChallengeBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest originalChallenge = 1;
  if (this->has_originalchallenge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_originalchallenge(), output);
  }

  // string answer = 2;
  if (this->answer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->answer().data(), static_cast<int>(this->answer().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.answer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->answer(), output);
  }

  // .Catalyst.Protocol.Common.PeerId challengedPeer = 3;
  if (this->has_challengedpeer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_challengedpeer(), output);
  }

  // .Catalyst.Protocol.Common.PeerId challengedBy = 4;
  if (this->has_challengedby()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_challengedby(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
}

::google::protobuf::uint8* BlockChallengeBroadcast::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest originalChallenge = 1;
  if (this->has_originalchallenge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_originalchallenge(), deterministic, target);
  }

  // string answer = 2;
  if (this->answer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->answer().data(), static_cast<int>(this->answer().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast.answer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->answer(), target);
  }

  // .Catalyst.Protocol.Common.PeerId challengedPeer = 3;
  if (this->has_challengedpeer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_challengedpeer(), deterministic, target);
  }

  // .Catalyst.Protocol.Common.PeerId challengedBy = 4;
  if (this->has_challengedby()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_challengedby(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
  return target;
}

size_t BlockChallengeBroadcast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string answer = 2;
  if (this->answer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->answer());
  }

  // .Catalyst.Protocol.DfsMarketplace.BlockChallengeRequest originalChallenge = 1;
  if (this->has_originalchallenge()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *originalchallenge_);
  }

  // .Catalyst.Protocol.Common.PeerId challengedPeer = 3;
  if (this->has_challengedpeer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *challengedpeer_);
  }

  // .Catalyst.Protocol.Common.PeerId challengedBy = 4;
  if (this->has_challengedby()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *challengedby_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockChallengeBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockChallengeBroadcast* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlockChallengeBroadcast>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
    MergeFrom(*source);
  }
}

void BlockChallengeBroadcast::MergeFrom(const BlockChallengeBroadcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.answer().size() > 0) {

    answer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.answer_);
  }
  if (from.has_originalchallenge()) {
    mutable_originalchallenge()->::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest::MergeFrom(from.originalchallenge());
  }
  if (from.has_challengedpeer()) {
    mutable_challengedpeer()->::Catalyst::Protocol::Common::PeerId::MergeFrom(from.challengedpeer());
  }
  if (from.has_challengedby()) {
    mutable_challengedby()->::Catalyst::Protocol::Common::PeerId::MergeFrom(from.challengedby());
  }
}

void BlockChallengeBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockChallengeBroadcast::CopyFrom(const BlockChallengeBroadcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.DfsMarketplace.BlockChallengeBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockChallengeBroadcast::IsInitialized() const {
  return true;
}

void BlockChallengeBroadcast::Swap(BlockChallengeBroadcast* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockChallengeBroadcast::InternalSwap(BlockChallengeBroadcast* other) {
  using std::swap;
  answer_.Swap(&other->answer_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(originalchallenge_, other->originalchallenge_);
  swap(challengedpeer_, other->challengedpeer_);
  swap(challengedby_, other->challengedby_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BlockChallengeBroadcast::GetMetadata() const {
  protobuf_DfsMarketplace_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DfsMarketplace_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace DfsMarketplace
}  // namespace Protocol
}  // namespace Catalyst
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest* Arena::CreateMaybeMessage< ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::DfsMarketplace::BlockChallengeRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Catalyst::Protocol::DfsMarketplace::BlockChallengeResponse* Arena::CreateMaybeMessage< ::Catalyst::Protocol::DfsMarketplace::BlockChallengeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::DfsMarketplace::BlockChallengeResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Catalyst::Protocol::DfsMarketplace::BlockChallengeBroadcast* Arena::CreateMaybeMessage< ::Catalyst::Protocol::DfsMarketplace::BlockChallengeBroadcast >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::DfsMarketplace::BlockChallengeBroadcast >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
