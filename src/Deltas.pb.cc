// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Deltas.proto

#include "Deltas.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_Common_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PeerId;
}  // namespace protobuf_Common_2eproto
namespace protobuf_Deltas_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Deltas_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CandidateDeltaBroadcast;
}  // namespace protobuf_Deltas_2eproto
namespace protobuf_Transaction_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Transaction_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CoinbaseEntry;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Transaction_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_STTransactionEntry;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Transaction_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CFTransactionEntry;
}  // namespace protobuf_Transaction_2eproto
namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp;
}  // namespace protobuf_google_2fprotobuf_2ftimestamp_2eproto
namespace Catalyst {
namespace Protocol {
namespace Deltas {
class DeltaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Delta>
      _instance;
} _Delta_default_instance_;
class CandidateDeltaBroadcastDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CandidateDeltaBroadcast>
      _instance;
} _CandidateDeltaBroadcast_default_instance_;
class FavouriteDeltaBroadcastDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FavouriteDeltaBroadcast>
      _instance;
} _FavouriteDeltaBroadcast_default_instance_;
class DeltaDfsHashBroadcastDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeltaDfsHashBroadcast>
      _instance;
} _DeltaDfsHashBroadcast_default_instance_;
}  // namespace Deltas
}  // namespace Protocol
}  // namespace Catalyst
namespace protobuf_Deltas_2eproto {
static void InitDefaultsDelta() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Deltas::_Delta_default_instance_;
    new (ptr) ::Catalyst::Protocol::Deltas::Delta();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Deltas::Delta::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_Delta =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsDelta}, {
      &protobuf_google_2fprotobuf_2ftimestamp_2eproto::scc_info_Timestamp.base,
      &protobuf_Transaction_2eproto::scc_info_STTransactionEntry.base,
      &protobuf_Transaction_2eproto::scc_info_CFTransactionEntry.base,
      &protobuf_Transaction_2eproto::scc_info_CoinbaseEntry.base,}};

static void InitDefaultsCandidateDeltaBroadcast() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Deltas::_CandidateDeltaBroadcast_default_instance_;
    new (ptr) ::Catalyst::Protocol::Deltas::CandidateDeltaBroadcast();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Deltas::CandidateDeltaBroadcast::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CandidateDeltaBroadcast =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCandidateDeltaBroadcast}, {
      &protobuf_Common_2eproto::scc_info_PeerId.base,}};

static void InitDefaultsFavouriteDeltaBroadcast() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Deltas::_FavouriteDeltaBroadcast_default_instance_;
    new (ptr) ::Catalyst::Protocol::Deltas::FavouriteDeltaBroadcast();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Deltas::FavouriteDeltaBroadcast::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_FavouriteDeltaBroadcast =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsFavouriteDeltaBroadcast}, {
      &protobuf_Deltas_2eproto::scc_info_CandidateDeltaBroadcast.base,
      &protobuf_Common_2eproto::scc_info_PeerId.base,}};

static void InitDefaultsDeltaDfsHashBroadcast() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Catalyst::Protocol::Deltas::_DeltaDfsHashBroadcast_default_instance_;
    new (ptr) ::Catalyst::Protocol::Deltas::DeltaDfsHashBroadcast();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Catalyst::Protocol::Deltas::DeltaDfsHashBroadcast::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeltaDfsHashBroadcast =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeltaDfsHashBroadcast}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Delta.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CandidateDeltaBroadcast.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FavouriteDeltaBroadcast.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeltaDfsHashBroadcast.base);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Deltas::Delta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Deltas::Delta, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Deltas::Delta, previousdeltadfshash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Deltas::Delta, merkleroot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Deltas::Delta, merklepoda_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Deltas::Delta, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Deltas::Delta, stentries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Deltas::Delta, cfentries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Deltas::Delta, cbentries_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Deltas::CandidateDeltaBroadcast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Deltas::CandidateDeltaBroadcast, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Deltas::CandidateDeltaBroadcast, producerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Deltas::CandidateDeltaBroadcast, previousdeltadfshash_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Deltas::FavouriteDeltaBroadcast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Deltas::FavouriteDeltaBroadcast, candidate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Deltas::FavouriteDeltaBroadcast, voterid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Deltas::DeltaDfsHashBroadcast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Deltas::DeltaDfsHashBroadcast, deltadfshash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Catalyst::Protocol::Deltas::DeltaDfsHashBroadcast, previousdeltadfshash_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Catalyst::Protocol::Deltas::Delta)},
  { 13, -1, sizeof(::Catalyst::Protocol::Deltas::CandidateDeltaBroadcast)},
  { 21, -1, sizeof(::Catalyst::Protocol::Deltas::FavouriteDeltaBroadcast)},
  { 28, -1, sizeof(::Catalyst::Protocol::Deltas::DeltaDfsHashBroadcast)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Catalyst::Protocol::Deltas::_Delta_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Catalyst::Protocol::Deltas::_CandidateDeltaBroadcast_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Catalyst::Protocol::Deltas::_FavouriteDeltaBroadcast_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Catalyst::Protocol::Deltas::_DeltaDfsHashBroadcast_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "Deltas.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014Deltas.proto\022\030Catalyst.Protocol.Deltas"
      "\032\021Transaction.proto\032\014Common.proto\032\037googl"
      "e/protobuf/timestamp.proto\"\332\002\n\005Delta\022\017\n\007"
      "Version\030\001 \001(\r\022\034\n\024PreviousDeltaDfsHash\030\002 "
      "\001(\014\022\022\n\nMerkleRoot\030\003 \001(\014\022\022\n\nMerklePoda\030\004 "
      "\001(\014\022-\n\tTimeStamp\030\005 \001(\0132\032.google.protobuf"
      ".Timestamp\022D\n\tSTEntries\030\006 \003(\01321.Catalyst"
      ".Protocol.Transaction.STTransactionEntry"
      "\022D\n\tCFEntries\030\007 \003(\01321.Catalyst.Protocol."
      "Transaction.CFTransactionEntry\022\?\n\tCBEntr"
      "ies\030\010 \003(\0132,.Catalyst.Protocol.Transactio"
      "n.CoinbaseEntry\"{\n\027CandidateDeltaBroadca"
      "st\022\014\n\004Hash\030\001 \001(\014\0224\n\nProducerId\030\002 \001(\0132 .C"
      "atalyst.Protocol.Common.PeerId\022\034\n\024Previo"
      "usDeltaDfsHash\030\003 \001(\014\"\222\001\n\027FavouriteDeltaB"
      "roadcast\022D\n\tCandidate\030\001 \001(\01321.Catalyst.P"
      "rotocol.Deltas.CandidateDeltaBroadcast\0221"
      "\n\007VoterId\030\002 \001(\0132 .Catalyst.Protocol.Comm"
      "on.PeerId\"K\n\025DeltaDfsHashBroadcast\022\024\n\014De"
      "ltaDfsHash\030\001 \001(\014\022\034\n\024PreviousDeltaDfsHash"
      "\030\002 \001(\014B\002P\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 818);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Deltas.proto", &protobuf_RegisterTypes);
  ::protobuf_Transaction_2eproto::AddDescriptors();
  ::protobuf_Common_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Deltas_2eproto
namespace Catalyst {
namespace Protocol {
namespace Deltas {

// ===================================================================

void Delta::InitAsDefaultInstance() {
  ::Catalyst::Protocol::Deltas::_Delta_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void Delta::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
}
void Delta::clear_stentries() {
  stentries_.Clear();
}
void Delta::clear_cfentries() {
  cfentries_.Clear();
}
void Delta::clear_cbentries() {
  cbentries_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Delta::kVersionFieldNumber;
const int Delta::kPreviousDeltaDfsHashFieldNumber;
const int Delta::kMerkleRootFieldNumber;
const int Delta::kMerklePodaFieldNumber;
const int Delta::kTimeStampFieldNumber;
const int Delta::kSTEntriesFieldNumber;
const int Delta::kCFEntriesFieldNumber;
const int Delta::kCBEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Delta::Delta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Deltas_2eproto::scc_info_Delta.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Deltas.Delta)
}
Delta::Delta(const Delta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      stentries_(from.stentries_),
      cfentries_(from.cfentries_),
      cbentries_(from.cbentries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  previousdeltadfshash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.previousdeltadfshash().size() > 0) {
    previousdeltadfshash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.previousdeltadfshash_);
  }
  merkleroot_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.merkleroot().size() > 0) {
    merkleroot_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.merkleroot_);
  }
  merklepoda_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.merklepoda().size() > 0) {
    merklepoda_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.merklepoda_);
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::google::protobuf::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Deltas.Delta)
}

void Delta::SharedCtor() {
  previousdeltadfshash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  merkleroot_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  merklepoda_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(version_));
}

Delta::~Delta() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Deltas.Delta)
  SharedDtor();
}

void Delta::SharedDtor() {
  previousdeltadfshash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  merkleroot_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  merklepoda_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
}

void Delta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Delta::descriptor() {
  ::protobuf_Deltas_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Deltas_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Delta& Delta::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Deltas_2eproto::scc_info_Delta.base);
  return *internal_default_instance();
}


void Delta::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Deltas.Delta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stentries_.Clear();
  cfentries_.Clear();
  cbentries_.Clear();
  previousdeltadfshash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  merkleroot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  merklepoda_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  version_ = 0u;
  _internal_metadata_.Clear();
}

bool Delta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Deltas.Delta)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 Version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes PreviousDeltaDfsHash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_previousdeltadfshash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes MerkleRoot = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_merkleroot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes MerklePoda = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_merklepoda()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp TimeStamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Catalyst.Protocol.Transaction.STTransactionEntry STEntries = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stentries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Catalyst.Protocol.Transaction.CFTransactionEntry CFEntries = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_cfentries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Catalyst.Protocol.Transaction.CoinbaseEntry CBEntries = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_cbentries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Deltas.Delta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Deltas.Delta)
  return false;
#undef DO_
}

void Delta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Deltas.Delta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Version = 1;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // bytes PreviousDeltaDfsHash = 2;
  if (this->previousdeltadfshash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->previousdeltadfshash(), output);
  }

  // bytes MerkleRoot = 3;
  if (this->merkleroot().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->merkleroot(), output);
  }

  // bytes MerklePoda = 4;
  if (this->merklepoda().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->merklepoda(), output);
  }

  // .google.protobuf.Timestamp TimeStamp = 5;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_timestamp(), output);
  }

  // repeated .Catalyst.Protocol.Transaction.STTransactionEntry STEntries = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stentries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->stentries(static_cast<int>(i)),
      output);
  }

  // repeated .Catalyst.Protocol.Transaction.CFTransactionEntry CFEntries = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cfentries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->cfentries(static_cast<int>(i)),
      output);
  }

  // repeated .Catalyst.Protocol.Transaction.CoinbaseEntry CBEntries = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cbentries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->cbentries(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Deltas.Delta)
}

::google::protobuf::uint8* Delta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Deltas.Delta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Version = 1;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // bytes PreviousDeltaDfsHash = 2;
  if (this->previousdeltadfshash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->previousdeltadfshash(), target);
  }

  // bytes MerkleRoot = 3;
  if (this->merkleroot().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->merkleroot(), target);
  }

  // bytes MerklePoda = 4;
  if (this->merklepoda().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->merklepoda(), target);
  }

  // .google.protobuf.Timestamp TimeStamp = 5;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_timestamp(), deterministic, target);
  }

  // repeated .Catalyst.Protocol.Transaction.STTransactionEntry STEntries = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stentries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->stentries(static_cast<int>(i)), deterministic, target);
  }

  // repeated .Catalyst.Protocol.Transaction.CFTransactionEntry CFEntries = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cfentries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->cfentries(static_cast<int>(i)), deterministic, target);
  }

  // repeated .Catalyst.Protocol.Transaction.CoinbaseEntry CBEntries = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cbentries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->cbentries(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Deltas.Delta)
  return target;
}

size_t Delta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Deltas.Delta)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Catalyst.Protocol.Transaction.STTransactionEntry STEntries = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->stentries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stentries(static_cast<int>(i)));
    }
  }

  // repeated .Catalyst.Protocol.Transaction.CFTransactionEntry CFEntries = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->cfentries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cfentries(static_cast<int>(i)));
    }
  }

  // repeated .Catalyst.Protocol.Transaction.CoinbaseEntry CBEntries = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->cbentries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cbentries(static_cast<int>(i)));
    }
  }

  // bytes PreviousDeltaDfsHash = 2;
  if (this->previousdeltadfshash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->previousdeltadfshash());
  }

  // bytes MerkleRoot = 3;
  if (this->merkleroot().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->merkleroot());
  }

  // bytes MerklePoda = 4;
  if (this->merklepoda().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->merklepoda());
  }

  // .google.protobuf.Timestamp TimeStamp = 5;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // uint32 Version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Delta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Deltas.Delta)
  GOOGLE_DCHECK_NE(&from, this);
  const Delta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Delta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Deltas.Delta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Deltas.Delta)
    MergeFrom(*source);
  }
}

void Delta::MergeFrom(const Delta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Deltas.Delta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stentries_.MergeFrom(from.stentries_);
  cfentries_.MergeFrom(from.cfentries_);
  cbentries_.MergeFrom(from.cbentries_);
  if (from.previousdeltadfshash().size() > 0) {

    previousdeltadfshash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.previousdeltadfshash_);
  }
  if (from.merkleroot().size() > 0) {

    merkleroot_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.merkleroot_);
  }
  if (from.merklepoda().size() > 0) {

    merklepoda_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.merklepoda_);
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
}

void Delta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Deltas.Delta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Delta::CopyFrom(const Delta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Deltas.Delta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Delta::IsInitialized() const {
  return true;
}

void Delta::Swap(Delta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Delta::InternalSwap(Delta* other) {
  using std::swap;
  CastToBase(&stentries_)->InternalSwap(CastToBase(&other->stentries_));
  CastToBase(&cfentries_)->InternalSwap(CastToBase(&other->cfentries_));
  CastToBase(&cbentries_)->InternalSwap(CastToBase(&other->cbentries_));
  previousdeltadfshash_.Swap(&other->previousdeltadfshash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  merkleroot_.Swap(&other->merkleroot_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  merklepoda_.Swap(&other->merklepoda_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(version_, other->version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Delta::GetMetadata() const {
  protobuf_Deltas_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Deltas_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CandidateDeltaBroadcast::InitAsDefaultInstance() {
  ::Catalyst::Protocol::Deltas::_CandidateDeltaBroadcast_default_instance_._instance.get_mutable()->producerid_ = const_cast< ::Catalyst::Protocol::Common::PeerId*>(
      ::Catalyst::Protocol::Common::PeerId::internal_default_instance());
}
void CandidateDeltaBroadcast::clear_producerid() {
  if (GetArenaNoVirtual() == NULL && producerid_ != NULL) {
    delete producerid_;
  }
  producerid_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CandidateDeltaBroadcast::kHashFieldNumber;
const int CandidateDeltaBroadcast::kProducerIdFieldNumber;
const int CandidateDeltaBroadcast::kPreviousDeltaDfsHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CandidateDeltaBroadcast::CandidateDeltaBroadcast()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Deltas_2eproto::scc_info_CandidateDeltaBroadcast.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Deltas.CandidateDeltaBroadcast)
}
CandidateDeltaBroadcast::CandidateDeltaBroadcast(const CandidateDeltaBroadcast& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hash().size() > 0) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  previousdeltadfshash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.previousdeltadfshash().size() > 0) {
    previousdeltadfshash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.previousdeltadfshash_);
  }
  if (from.has_producerid()) {
    producerid_ = new ::Catalyst::Protocol::Common::PeerId(*from.producerid_);
  } else {
    producerid_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Deltas.CandidateDeltaBroadcast)
}

void CandidateDeltaBroadcast::SharedCtor() {
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  previousdeltadfshash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  producerid_ = NULL;
}

CandidateDeltaBroadcast::~CandidateDeltaBroadcast() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Deltas.CandidateDeltaBroadcast)
  SharedDtor();
}

void CandidateDeltaBroadcast::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  previousdeltadfshash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete producerid_;
}

void CandidateDeltaBroadcast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CandidateDeltaBroadcast::descriptor() {
  ::protobuf_Deltas_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Deltas_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CandidateDeltaBroadcast& CandidateDeltaBroadcast::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Deltas_2eproto::scc_info_CandidateDeltaBroadcast.base);
  return *internal_default_instance();
}


void CandidateDeltaBroadcast::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Deltas.CandidateDeltaBroadcast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  previousdeltadfshash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && producerid_ != NULL) {
    delete producerid_;
  }
  producerid_ = NULL;
  _internal_metadata_.Clear();
}

bool CandidateDeltaBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Deltas.CandidateDeltaBroadcast)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes Hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Catalyst.Protocol.Common.PeerId ProducerId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_producerid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes PreviousDeltaDfsHash = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_previousdeltadfshash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Deltas.CandidateDeltaBroadcast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Deltas.CandidateDeltaBroadcast)
  return false;
#undef DO_
}

void CandidateDeltaBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Deltas.CandidateDeltaBroadcast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Hash = 1;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->hash(), output);
  }

  // .Catalyst.Protocol.Common.PeerId ProducerId = 2;
  if (this->has_producerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_producerid(), output);
  }

  // bytes PreviousDeltaDfsHash = 3;
  if (this->previousdeltadfshash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->previousdeltadfshash(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Deltas.CandidateDeltaBroadcast)
}

::google::protobuf::uint8* CandidateDeltaBroadcast::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Deltas.CandidateDeltaBroadcast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Hash = 1;
  if (this->hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->hash(), target);
  }

  // .Catalyst.Protocol.Common.PeerId ProducerId = 2;
  if (this->has_producerid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_producerid(), deterministic, target);
  }

  // bytes PreviousDeltaDfsHash = 3;
  if (this->previousdeltadfshash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->previousdeltadfshash(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Deltas.CandidateDeltaBroadcast)
  return target;
}

size_t CandidateDeltaBroadcast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Deltas.CandidateDeltaBroadcast)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes Hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());
  }

  // bytes PreviousDeltaDfsHash = 3;
  if (this->previousdeltadfshash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->previousdeltadfshash());
  }

  // .Catalyst.Protocol.Common.PeerId ProducerId = 2;
  if (this->has_producerid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *producerid_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CandidateDeltaBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Deltas.CandidateDeltaBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  const CandidateDeltaBroadcast* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CandidateDeltaBroadcast>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Deltas.CandidateDeltaBroadcast)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Deltas.CandidateDeltaBroadcast)
    MergeFrom(*source);
  }
}

void CandidateDeltaBroadcast::MergeFrom(const CandidateDeltaBroadcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Deltas.CandidateDeltaBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.previousdeltadfshash().size() > 0) {

    previousdeltadfshash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.previousdeltadfshash_);
  }
  if (from.has_producerid()) {
    mutable_producerid()->::Catalyst::Protocol::Common::PeerId::MergeFrom(from.producerid());
  }
}

void CandidateDeltaBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Deltas.CandidateDeltaBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CandidateDeltaBroadcast::CopyFrom(const CandidateDeltaBroadcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Deltas.CandidateDeltaBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CandidateDeltaBroadcast::IsInitialized() const {
  return true;
}

void CandidateDeltaBroadcast::Swap(CandidateDeltaBroadcast* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CandidateDeltaBroadcast::InternalSwap(CandidateDeltaBroadcast* other) {
  using std::swap;
  hash_.Swap(&other->hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  previousdeltadfshash_.Swap(&other->previousdeltadfshash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(producerid_, other->producerid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CandidateDeltaBroadcast::GetMetadata() const {
  protobuf_Deltas_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Deltas_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FavouriteDeltaBroadcast::InitAsDefaultInstance() {
  ::Catalyst::Protocol::Deltas::_FavouriteDeltaBroadcast_default_instance_._instance.get_mutable()->candidate_ = const_cast< ::Catalyst::Protocol::Deltas::CandidateDeltaBroadcast*>(
      ::Catalyst::Protocol::Deltas::CandidateDeltaBroadcast::internal_default_instance());
  ::Catalyst::Protocol::Deltas::_FavouriteDeltaBroadcast_default_instance_._instance.get_mutable()->voterid_ = const_cast< ::Catalyst::Protocol::Common::PeerId*>(
      ::Catalyst::Protocol::Common::PeerId::internal_default_instance());
}
void FavouriteDeltaBroadcast::clear_voterid() {
  if (GetArenaNoVirtual() == NULL && voterid_ != NULL) {
    delete voterid_;
  }
  voterid_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FavouriteDeltaBroadcast::kCandidateFieldNumber;
const int FavouriteDeltaBroadcast::kVoterIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FavouriteDeltaBroadcast::FavouriteDeltaBroadcast()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Deltas_2eproto::scc_info_FavouriteDeltaBroadcast.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Deltas.FavouriteDeltaBroadcast)
}
FavouriteDeltaBroadcast::FavouriteDeltaBroadcast(const FavouriteDeltaBroadcast& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_candidate()) {
    candidate_ = new ::Catalyst::Protocol::Deltas::CandidateDeltaBroadcast(*from.candidate_);
  } else {
    candidate_ = NULL;
  }
  if (from.has_voterid()) {
    voterid_ = new ::Catalyst::Protocol::Common::PeerId(*from.voterid_);
  } else {
    voterid_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Deltas.FavouriteDeltaBroadcast)
}

void FavouriteDeltaBroadcast::SharedCtor() {
  ::memset(&candidate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&voterid_) -
      reinterpret_cast<char*>(&candidate_)) + sizeof(voterid_));
}

FavouriteDeltaBroadcast::~FavouriteDeltaBroadcast() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Deltas.FavouriteDeltaBroadcast)
  SharedDtor();
}

void FavouriteDeltaBroadcast::SharedDtor() {
  if (this != internal_default_instance()) delete candidate_;
  if (this != internal_default_instance()) delete voterid_;
}

void FavouriteDeltaBroadcast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FavouriteDeltaBroadcast::descriptor() {
  ::protobuf_Deltas_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Deltas_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FavouriteDeltaBroadcast& FavouriteDeltaBroadcast::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Deltas_2eproto::scc_info_FavouriteDeltaBroadcast.base);
  return *internal_default_instance();
}


void FavouriteDeltaBroadcast::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Deltas.FavouriteDeltaBroadcast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && candidate_ != NULL) {
    delete candidate_;
  }
  candidate_ = NULL;
  if (GetArenaNoVirtual() == NULL && voterid_ != NULL) {
    delete voterid_;
  }
  voterid_ = NULL;
  _internal_metadata_.Clear();
}

bool FavouriteDeltaBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Deltas.FavouriteDeltaBroadcast)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Catalyst.Protocol.Deltas.CandidateDeltaBroadcast Candidate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_candidate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Catalyst.Protocol.Common.PeerId VoterId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_voterid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Deltas.FavouriteDeltaBroadcast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Deltas.FavouriteDeltaBroadcast)
  return false;
#undef DO_
}

void FavouriteDeltaBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Deltas.FavouriteDeltaBroadcast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Catalyst.Protocol.Deltas.CandidateDeltaBroadcast Candidate = 1;
  if (this->has_candidate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_candidate(), output);
  }

  // .Catalyst.Protocol.Common.PeerId VoterId = 2;
  if (this->has_voterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_voterid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Deltas.FavouriteDeltaBroadcast)
}

::google::protobuf::uint8* FavouriteDeltaBroadcast::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Deltas.FavouriteDeltaBroadcast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Catalyst.Protocol.Deltas.CandidateDeltaBroadcast Candidate = 1;
  if (this->has_candidate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_candidate(), deterministic, target);
  }

  // .Catalyst.Protocol.Common.PeerId VoterId = 2;
  if (this->has_voterid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_voterid(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Deltas.FavouriteDeltaBroadcast)
  return target;
}

size_t FavouriteDeltaBroadcast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Deltas.FavouriteDeltaBroadcast)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Catalyst.Protocol.Deltas.CandidateDeltaBroadcast Candidate = 1;
  if (this->has_candidate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *candidate_);
  }

  // .Catalyst.Protocol.Common.PeerId VoterId = 2;
  if (this->has_voterid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *voterid_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FavouriteDeltaBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Deltas.FavouriteDeltaBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  const FavouriteDeltaBroadcast* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FavouriteDeltaBroadcast>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Deltas.FavouriteDeltaBroadcast)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Deltas.FavouriteDeltaBroadcast)
    MergeFrom(*source);
  }
}

void FavouriteDeltaBroadcast::MergeFrom(const FavouriteDeltaBroadcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Deltas.FavouriteDeltaBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_candidate()) {
    mutable_candidate()->::Catalyst::Protocol::Deltas::CandidateDeltaBroadcast::MergeFrom(from.candidate());
  }
  if (from.has_voterid()) {
    mutable_voterid()->::Catalyst::Protocol::Common::PeerId::MergeFrom(from.voterid());
  }
}

void FavouriteDeltaBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Deltas.FavouriteDeltaBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FavouriteDeltaBroadcast::CopyFrom(const FavouriteDeltaBroadcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Deltas.FavouriteDeltaBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FavouriteDeltaBroadcast::IsInitialized() const {
  return true;
}

void FavouriteDeltaBroadcast::Swap(FavouriteDeltaBroadcast* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FavouriteDeltaBroadcast::InternalSwap(FavouriteDeltaBroadcast* other) {
  using std::swap;
  swap(candidate_, other->candidate_);
  swap(voterid_, other->voterid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FavouriteDeltaBroadcast::GetMetadata() const {
  protobuf_Deltas_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Deltas_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeltaDfsHashBroadcast::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeltaDfsHashBroadcast::kDeltaDfsHashFieldNumber;
const int DeltaDfsHashBroadcast::kPreviousDeltaDfsHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeltaDfsHashBroadcast::DeltaDfsHashBroadcast()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Deltas_2eproto::scc_info_DeltaDfsHashBroadcast.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Catalyst.Protocol.Deltas.DeltaDfsHashBroadcast)
}
DeltaDfsHashBroadcast::DeltaDfsHashBroadcast(const DeltaDfsHashBroadcast& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deltadfshash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.deltadfshash().size() > 0) {
    deltadfshash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deltadfshash_);
  }
  previousdeltadfshash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.previousdeltadfshash().size() > 0) {
    previousdeltadfshash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.previousdeltadfshash_);
  }
  // @@protoc_insertion_point(copy_constructor:Catalyst.Protocol.Deltas.DeltaDfsHashBroadcast)
}

void DeltaDfsHashBroadcast::SharedCtor() {
  deltadfshash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  previousdeltadfshash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DeltaDfsHashBroadcast::~DeltaDfsHashBroadcast() {
  // @@protoc_insertion_point(destructor:Catalyst.Protocol.Deltas.DeltaDfsHashBroadcast)
  SharedDtor();
}

void DeltaDfsHashBroadcast::SharedDtor() {
  deltadfshash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  previousdeltadfshash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeltaDfsHashBroadcast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DeltaDfsHashBroadcast::descriptor() {
  ::protobuf_Deltas_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Deltas_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeltaDfsHashBroadcast& DeltaDfsHashBroadcast::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Deltas_2eproto::scc_info_DeltaDfsHashBroadcast.base);
  return *internal_default_instance();
}


void DeltaDfsHashBroadcast::Clear() {
// @@protoc_insertion_point(message_clear_start:Catalyst.Protocol.Deltas.DeltaDfsHashBroadcast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deltadfshash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  previousdeltadfshash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool DeltaDfsHashBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Catalyst.Protocol.Deltas.DeltaDfsHashBroadcast)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes DeltaDfsHash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_deltadfshash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes PreviousDeltaDfsHash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_previousdeltadfshash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Catalyst.Protocol.Deltas.DeltaDfsHashBroadcast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Catalyst.Protocol.Deltas.DeltaDfsHashBroadcast)
  return false;
#undef DO_
}

void DeltaDfsHashBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Catalyst.Protocol.Deltas.DeltaDfsHashBroadcast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes DeltaDfsHash = 1;
  if (this->deltadfshash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->deltadfshash(), output);
  }

  // bytes PreviousDeltaDfsHash = 2;
  if (this->previousdeltadfshash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->previousdeltadfshash(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Catalyst.Protocol.Deltas.DeltaDfsHashBroadcast)
}

::google::protobuf::uint8* DeltaDfsHashBroadcast::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Catalyst.Protocol.Deltas.DeltaDfsHashBroadcast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes DeltaDfsHash = 1;
  if (this->deltadfshash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->deltadfshash(), target);
  }

  // bytes PreviousDeltaDfsHash = 2;
  if (this->previousdeltadfshash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->previousdeltadfshash(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Catalyst.Protocol.Deltas.DeltaDfsHashBroadcast)
  return target;
}

size_t DeltaDfsHashBroadcast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Catalyst.Protocol.Deltas.DeltaDfsHashBroadcast)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes DeltaDfsHash = 1;
  if (this->deltadfshash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->deltadfshash());
  }

  // bytes PreviousDeltaDfsHash = 2;
  if (this->previousdeltadfshash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->previousdeltadfshash());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeltaDfsHashBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Catalyst.Protocol.Deltas.DeltaDfsHashBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  const DeltaDfsHashBroadcast* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeltaDfsHashBroadcast>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Catalyst.Protocol.Deltas.DeltaDfsHashBroadcast)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Catalyst.Protocol.Deltas.DeltaDfsHashBroadcast)
    MergeFrom(*source);
  }
}

void DeltaDfsHashBroadcast::MergeFrom(const DeltaDfsHashBroadcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Catalyst.Protocol.Deltas.DeltaDfsHashBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.deltadfshash().size() > 0) {

    deltadfshash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deltadfshash_);
  }
  if (from.previousdeltadfshash().size() > 0) {

    previousdeltadfshash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.previousdeltadfshash_);
  }
}

void DeltaDfsHashBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Catalyst.Protocol.Deltas.DeltaDfsHashBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeltaDfsHashBroadcast::CopyFrom(const DeltaDfsHashBroadcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Catalyst.Protocol.Deltas.DeltaDfsHashBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeltaDfsHashBroadcast::IsInitialized() const {
  return true;
}

void DeltaDfsHashBroadcast::Swap(DeltaDfsHashBroadcast* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeltaDfsHashBroadcast::InternalSwap(DeltaDfsHashBroadcast* other) {
  using std::swap;
  deltadfshash_.Swap(&other->deltadfshash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  previousdeltadfshash_.Swap(&other->previousdeltadfshash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DeltaDfsHashBroadcast::GetMetadata() const {
  protobuf_Deltas_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Deltas_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Deltas
}  // namespace Protocol
}  // namespace Catalyst
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Catalyst::Protocol::Deltas::Delta* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Deltas::Delta >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Deltas::Delta >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Catalyst::Protocol::Deltas::CandidateDeltaBroadcast* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Deltas::CandidateDeltaBroadcast >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Deltas::CandidateDeltaBroadcast >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Catalyst::Protocol::Deltas::FavouriteDeltaBroadcast* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Deltas::FavouriteDeltaBroadcast >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Deltas::FavouriteDeltaBroadcast >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Catalyst::Protocol::Deltas::DeltaDfsHashBroadcast* Arena::CreateMaybeMessage< ::Catalyst::Protocol::Deltas::DeltaDfsHashBroadcast >(Arena* arena) {
  return Arena::CreateInternal< ::Catalyst::Protocol::Deltas::DeltaDfsHashBroadcast >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
